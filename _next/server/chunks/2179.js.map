{"version":3,"file":"2179.js","mappings":"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","sources":["webpack://web/./src/views/Farms/hooks/getNonBscVaultFee.ts","webpack://web/./src/utils/calls/farms.ts","webpack://web/./src/utils/calls/estimateGas.ts","webpack://web/./src/utils/calls/pools.ts","webpack://web/./src/utils/calls/index.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getNonBscVaultContract, getCrossFarmingSenderContract } from 'utils/contractHelpers'\n\nexport enum MessageTypes {\n  Deposit = 0,\n  Withdraw = 1,\n  EmergencyWithdraw = 2,\n  Claim = 3,\n}\n\nenum Chains {\n  EVM = 0,\n  BSC = 1,\n}\n\ninterface CalculateTotalFeeProps {\n  pid: number\n  amount: string\n  chainId: number\n  userAddress: string\n  messageType: MessageTypes\n  gasPrice: number\n  oraclePrice: string\n}\n\nconst COMPENSATION_PRECISION = 1e5\nconst ORACLE_PRECISION = 1e18\nconst BNB_CHANGE = 5000000000000000\nconst BUFFER = 1.3\nconst WITHDRAW_BUFFER = 1.4\n\nexport const getNonBscVaultContractFee = async ({\n  pid,\n  amount,\n  chainId,\n  userAddress,\n  messageType,\n  oraclePrice,\n  gasPrice,\n}: CalculateTotalFeeProps) => {\n  try {\n    const nonBscVaultContract = getNonBscVaultContract(null, chainId)\n    const crossFarmingAddress = getCrossFarmingSenderContract(null, chainId)\n    const exchangeRate = new BigNumber(ORACLE_PRECISION).div(oraclePrice).times(ORACLE_PRECISION) // invert into BNB/ETH price\n\n    const getNonce = await crossFarmingAddress.nonces(userAddress, pid)\n    const nonce = new BigNumber(getNonce.toString()).toJSON()\n    const [encodeMessage, hasFirstTime, estimateGaslimit] = await Promise.all([\n      nonBscVaultContract.encodeMessage(userAddress, pid, amount, messageType, nonce),\n      crossFarmingAddress.is1st(userAddress),\n      crossFarmingAddress.estimateGaslimit(Chains.BSC, userAddress, messageType),\n    ])\n    const calcFee = await nonBscVaultContract.calcFee(encodeMessage)\n\n    const msgBusFee = new BigNumber(calcFee.toString())\n    const destTxFee = new BigNumber(gasPrice)\n      .times(estimateGaslimit.toString())\n      .times(exchangeRate)\n      .times(COMPENSATION_PRECISION)\n      .div(new BigNumber(ORACLE_PRECISION).times(COMPENSATION_PRECISION))\n    const totalFee = new BigNumber(msgBusFee).plus(destTxFee)\n\n    if (!hasFirstTime) {\n      const depositFee = new BigNumber(BNB_CHANGE).times(exchangeRate).div(ORACLE_PRECISION)\n      return totalFee.plus(depositFee).times(BUFFER).toFixed(0)\n    }\n\n    if (messageType >= MessageTypes.Withdraw) {\n      const estimateEvmGaslimit = await crossFarmingAddress.estimateGaslimit(Chains.EVM, userAddress, messageType)\n      const fee = msgBusFee.times(exchangeRate).div(ORACLE_PRECISION)\n      const total = new BigNumber(gasPrice).times(estimateEvmGaslimit.toString()).plus(fee)\n      return totalFee.plus(total).times(WITHDRAW_BUFFER).toFixed(0)\n    }\n\n    return totalFee.times(BUFFER).toFixed(0)\n  } catch (error) {\n    console.error('Failed to fetch non BscVault fee', error)\n    return BIG_ZERO.toJSON()\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport BigNumber from 'bignumber.js'\nimport { BOOSTED_FARM_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { getNonBscVaultContractFee, MessageTypes } from 'views/Farms/hooks/getNonBscVaultFee'\n\nconst options = {\n  gasLimit: BOOSTED_FARM_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract: Contract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.deposit(pid, value, options)\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.withdraw(pid, value, options)\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  return masterChefContract.deposit(pid, '0', options)\n}\n\nexport const nonBscStakeFarm = async (contract, pid, amount, gasPrice, account, oraclePrice, chainId) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const totalFee = await getNonBscVaultContractFee({\n    pid,\n    chainId,\n    gasPrice,\n    oraclePrice,\n    amount: value,\n    userAddress: account,\n    messageType: MessageTypes.Deposit,\n  })\n  console.info(totalFee, 'stake totalFee')\n  return contract.deposit(pid, value, { value: totalFee })\n}\n\nexport const nonBscUnstakeFarm = async (contract, pid, amount, gasPrice, account, oraclePrice, chainId) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const totalFee = await getNonBscVaultContractFee({\n    pid,\n    chainId,\n    gasPrice,\n    oraclePrice,\n    amount: value,\n    userAddress: account,\n    messageType: MessageTypes.Withdraw,\n  })\n  console.info(totalFee, 'unstake totalFee')\n  return contract.withdraw(pid, value, { value: totalFee })\n}\n","import { Contract, PayableOverrides } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { calculateGasMargin } from 'utils'\nimport { ContractMethodName, MaybeContract, ContractMethodParams } from 'utils/types'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async <C extends Contract = Contract, N extends ContractMethodName<C> = any>(\n  contract: MaybeContract<C>,\n  methodName: N,\n  methodArgs: ContractMethodParams<C, N>,\n  overrides: PayableOverrides = {},\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs, overrides)\n  // By convention, BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = calculateGasMargin(rawGasEstimation, gasMarginPer10000)\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async <C extends Contract = Contract, N extends ContractMethodName<C> = any>(\n  contract: MaybeContract<C>,\n  methodName: N,\n  methodArgs: ContractMethodParams<C, N>,\n  overrides: PayableOverrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<TransactionResponse> => {\n  const gasEstimation = await estimateGas(contract, methodName, methodArgs, overrides, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { bscRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = poolsConfig\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await bscRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress, 56),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress, 56),\n    name: 'bonusEndBlock',\n  }))\n  const [startBlocks, endBlocks] = await Promise.all([\n    multicall(sousChefV2, startBlockCalls),\n    multicall(sousChefV2, endBlockCalls),\n  ])\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","export * from './estimateGas'\nexport * from './farms'\nexport * from './pools'\n"],"names":["BigNumber","BIG_ZERO","getNonBscVaultContract","getCrossFarmingSenderContract","MessageTypes","Deposit","Withdraw","EmergencyWithdraw","Claim","Chains","EVM","BSC","COMPENSATION_PRECISION","ORACLE_PRECISION","BNB_CHANGE","BUFFER","WITHDRAW_BUFFER","getNonBscVaultContractFee","pid","amount","chainId","userAddress","messageType","oraclePrice","gasPrice","nonBscVaultContract","crossFarmingAddress","exchangeRate","div","times","getNonce","nonces","nonce","toString","toJSON","encodeMessage","hasFirstTime","estimateGaslimit","Promise","all","is1st","calcFee","msgBusFee","destTxFee","totalFee","plus","depositFee","toFixed","estimateEvmGaslimit","fee","total","error","console","BOOSTED_FARM_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","options","gasLimit","stakeFarm","masterChefContract","value","deposit","unstakeFarm","withdraw","harvestFarm","nonBscStakeFarm","contract","account","info","nonBscUnstakeFarm","calculateGasMargin","estimateGas","methodName","methodArgs","overrides","gasMarginPer10000","Error","address","rawGasEstimation","gasEstimation","callWithEstimateGas","tx","poolsConfig","sousChefV2","multicall","bscRpcProvider","getAddress","getActivePools","block","eligiblePools","filter","pool","sousId","isFinished","undefined","blockNumber","getBlockNumber","startBlockCalls","map","contractAddress","name","endBlockCalls","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte"],"sourceRoot":""}