{"version":3,"file":"330.js","mappings":"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","sources":["webpack://web/./src/views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/StakingApy.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","webpack://web/./src/views/Pools/components/CakeVaultCard/index.tsx","webpack://web/./src/views/Pools/components/LockedPool/Common/IfoCakeRow.tsx","webpack://web/./src/views/Pools/components/LockedPool/Common/LockedActions.tsx","webpack://web/./src/views/Pools/components/LockedPool/LockedStakingApy.tsx","webpack://web/./src/views/Pools/components/PoolCard/AprRow.tsx","webpack://web/./src/views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","webpack://web/./src/views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","webpack://web/./src/views/Pools/components/PoolCard/CardActions/StakeActions.tsx","webpack://web/./src/views/Pools/components/PoolCard/CardActions/index.tsx","webpack://web/./src/views/Pools/components/PoolCard/CardFooter/index.tsx","webpack://web/./src/views/Pools/components/PoolCard/PoolCardHeader.tsx","webpack://web/./src/views/Pools/components/PoolCard/StyledCard.tsx","webpack://web/./src/views/Pools/components/PoolCard/index.tsx","webpack://web/./src/views/Pools/components/PoolTabButtons.tsx","webpack://web/./src/views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","webpack://web/./src/views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","webpack://web/./src/views/Pools/components/PoolsTable/Cells/StakedCell.tsx","webpack://web/./src/views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","webpack://web/./src/views/Pools/components/PoolsTable/ExpandRow.tsx","webpack://web/./src/views/Pools/components/PoolsTable/PoolRow.tsx","webpack://web/./src/views/Pools/components/PoolsTable/PoolsTable.tsx","webpack://web/./src/views/Pools/index.tsx","webpack://web/../../packages/uikit/src/components/Card/CardRibbon.tsx"],"sourcesContent":["import { TooltipText, useTooltip, Balance } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport AutoEarningsBreakdown from '../AutoEarningsBreakdown'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  pool: DeserializedPool\n  account: string\n}\n\nconst RecentCakeProfitBalance: React.FC<React.PropsWithChildren<RecentCakeProfitBalanceProps>> = ({\n  cakeToDisplay,\n  pool,\n  account,\n}) => {\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<AutoEarningsBreakdown pool={pool} account={account} />, {\n    placement: 'bottom-end',\n  })\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool, VaultKey, DeserializedLockedVaultUser } from 'state/types'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = ({ pool }: { pool: DeserializedPool }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pricePerFullShare, userData } = useVaultPoolByKey(pool.vaultKey)\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay } = getCakeVaultEarnings(\n    account,\n    userData.cakeAtLastUserAction,\n    userData.userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n    pool.vaultKey === VaultKey.CakeVault\n      ? (userData as DeserializedLockedVaultUser).currentPerformanceFee.plus(\n          (userData as DeserializedLockedVaultUser).currentOverdueFee,\n        )\n      : null,\n  )\n\n  if (!(userData.userShares.gt(0) && account)) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && <RecentCakeProfitBalance cakeToDisplay={autoCakeToDisplay} pool={pool} account={account} />}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import { Flex, Text, Skeleton, useModal, Button, CalculateIcon, FlexGap, Balance } from '@pancakeswap/uikit'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { memo } from 'react'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport styled from 'styled-components'\nimport { VaultRoiCalculatorModal } from '../Vault/VaultRoiCalculatorModal'\n\nconst AprLabelContainer = styled(Flex)`\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport const StakingApy = memo(({ pool }: { pool: DeserializedPool }) => {\n  const { t } = useTranslation()\n\n  const { flexibleApy, lockedApy } = useVaultApy()\n\n  const [onPresentFlexibleApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} />)\n\n  const [onPresentLockedApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} initialView={1} />)\n\n  return (\n    <LightGreyCard>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Flexible')} APY:\n        </Text>\n        {flexibleApy ? (\n          <AprLabelContainer alignItems=\"center\" justifyContent=\"flex-start\">\n            <Balance fontSize=\"16px\" value={parseFloat(flexibleApy)} decimals={2} unit=\"%\" bold />\n            <Button\n              onClick={(e) => {\n                e.stopPropagation()\n                onPresentFlexibleApyModal()\n              }}\n              variant=\"text\"\n              width=\"20px\"\n              height=\"20px\"\n              padding=\"0px\"\n              marginLeft=\"4px\"\n            >\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          </AprLabelContainer>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </Flex>\n      {pool.vaultKey === VaultKey.CakeVault && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('Locked')} APY:\n          </Text>\n          {lockedApy ? (\n            <FlexGap gap=\"4px\" flexWrap=\"wrap\" justifyContent=\"flex-end\">\n              <Text style={{ whiteSpace: 'nowrap' }} bold>\n                {t('Up to')}\n              </Text>\n              <AprLabelContainer alignItems=\"center\">\n                <Balance fontSize=\"16px\" value={parseFloat(lockedApy)} decimals={2} unit=\"%\" bold />\n                <Button\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    onPresentLockedApyModal()\n                  }}\n                  variant=\"text\"\n                  width=\"20px\"\n                  height=\"20px\"\n                  padding=\"0px\"\n                  marginLeft=\"4px\"\n                >\n                  <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n                </Button>\n              </AprLabelContainer>\n            </FlexGap>\n          ) : (\n            <Skeleton width=\"80px\" height=\"16px\" />\n          )}\n        </Flex>\n      )}\n    </LightGreyCard>\n  )\n})\n","import { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton, Box, Balance } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport NotEnoughTokensModal from '../../Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport ConvertToLock from '../../LockedPool/Common/ConvertToLock'\n\ninterface HasStakeActionProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  performanceFee: number\n}\n\nconst HasSharesActions: React.FC<React.PropsWithChildren<HasStakeActionProps>> = ({\n  pool,\n  stakingTokenBalance,\n  performanceFee,\n}) => {\n  const {\n    userData: {\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { stakingToken } = pool\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} performanceFee={performanceFee} pool={pool} />,\n  )\n  const [onPresentUnstake] = useModal(\n    <VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />,\n    true,\n    true,\n    'withdraw-vault',\n  )\n\n  return (\n    <>\n      <Flex mb=\"16px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n          <Text as={Flex} fontSize=\"12px\" color=\"textSubtle\" flexWrap=\"wrap\">\n            {cakePriceBusd.gt(0) ? (\n              <Balance\n                value={stakedDollarValue}\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                prefix=\"~\"\n                unit=\" USD\"\n              />\n            ) : (\n              <Skeleton mt=\"1px\" height={16} width={64} />\n            )}\n          </Text>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n            <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n      {pool.vaultKey === VaultKey.CakeVault && (\n        <Box mb=\"16px\">\n          <ConvertToLock stakingToken={stakingToken} currentStakedAmount={cakeAsNumberBalance} />\n        </Box>\n      )}\n    </>\n  )\n}\n\nexport default HasSharesActions\n","import { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { VaultKey } from 'state/types'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultApprove } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  vaultKey: VaultKey\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<React.PropsWithChildren<ApprovalActionProps>> = ({\n  vaultKey,\n  isLoading = false,\n  setLastUpdated,\n}) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, pendingTx } = useVaultApprove(vaultKey, setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={pendingTx}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import { Flex, Skeleton, useModal } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport NotEnoughTokensModal from '../../Modals/NotEnoughTokensModal'\nimport { VaultStakeButtonGroup } from '../../Vault/VaultStakeButtonGroup'\nimport VaultStakeModal from '../VaultStakeModal'\nimport LockedStakeModal from '../../LockedPool/Modals/LockedStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  performanceFee: number\n}\n\nconst VaultStakeActions: React.FC<React.PropsWithChildren<VaultStakeActionsProps>> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  performanceFee,\n}) => {\n  const { stakingToken, userDataLoaded } = pool\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} performanceFee={performanceFee} />,\n  )\n  const [openPresentLockedStakeModal] = useModal(\n    <LockedStakeModal\n      currentBalance={stakingTokenBalance}\n      stakingToken={stakingToken}\n      stakingTokenBalance={stakingTokenBalance}\n    />,\n  )\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} performanceFee={performanceFee} />\n    ) : (\n      <VaultStakeButtonGroup\n        onFlexibleClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n        onLockedClick={pool.vaultKey === VaultKey.CakeVault ? openPresentLockedStakeModal : null}\n      />\n    )\n  }\n\n  return (\n    <Flex flexDirection=\"column\">{userDataLoaded ? renderStakeAction() : <Skeleton width=\"100%\" height=\"52px\" />}</Flex>\n  )\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\n\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { DeserializedPool } from 'state/types'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<\n  React.PropsWithChildren<{\n    pool: DeserializedPool\n    accountHasSharesStaked: boolean\n    isLoading: boolean\n    performanceFee: number\n  }>\n> = ({ pool, accountHasSharesStaked, isLoading, performanceFee }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus(pool.vaultKey)\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n            performanceFee={performanceFee}\n          />\n        ) : (\n          <VaultApprovalAction vaultKey={pool.vaultKey} isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import { Box, CardBody, CardProps, Flex, Text, TokenPairImage, FlexGap, Skeleton } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool, VaultKey, DeserializedLockedCakeVault, DeserializedCakeVault } from 'state/types'\nimport styled from 'styled-components'\n\nimport CardFooter from '../PoolCard/CardFooter'\nimport PoolCardHeader, { PoolCardHeaderTitle } from '../PoolCard/PoolCardHeader'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport { VaultPositionTagWithLabel } from '../Vault/VaultPositionTag'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\nimport { StakingApy } from './StakingApy'\nimport VaultCardActions from './VaultCardActions'\nimport LockedStakingApy from '../LockedPool/LockedStakingApy'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps extends CardProps {\n  pool: DeserializedPool\n  showStakedOnly: boolean\n  defaultFooterExpanded?: boolean\n  showICake?: boolean\n  showSkeleton?: boolean\n}\n\ninterface CakeVaultDetailProps {\n  isLoading?: boolean\n  account: string\n  pool: DeserializedPool\n  vaultPool: DeserializedCakeVault\n  accountHasSharesStaked: boolean\n  defaultFooterExpanded?: boolean\n  showICake?: boolean\n  performanceFeeAsDecimal: number\n}\n\nexport const CakeVaultDetail: React.FC<React.PropsWithChildren<CakeVaultDetailProps>> = ({\n  isLoading = false,\n  account,\n  pool,\n  vaultPool,\n  accountHasSharesStaked,\n  showICake,\n  performanceFeeAsDecimal,\n  defaultFooterExpanded,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <StyledCardBody isLoading={isLoading}>\n        {account && pool.vaultKey === VaultKey.CakeVault && (\n          <VaultPositionTagWithLabel userData={(vaultPool as DeserializedLockedCakeVault).userData} />\n        )}\n        {account &&\n        pool.vaultKey === VaultKey.CakeVault &&\n        (vaultPool as DeserializedLockedCakeVault).userData.locked ? (\n          <LockedStakingApy\n            userData={(vaultPool as DeserializedLockedCakeVault).userData}\n            stakingToken={pool?.stakingToken}\n            stakingTokenBalance={pool?.userData?.stakingTokenBalance}\n            showICake={showICake}\n          />\n        ) : (\n          <>\n            <StakingApy pool={pool} />\n            <FlexGap mt=\"16px\" gap=\"24px\" flexDirection={accountHasSharesStaked ? 'column-reverse' : 'column'}>\n              <Box>\n                {account && (\n                  <Box mb=\"8px\">\n                    <UnstakingFeeCountdownRow vaultKey={pool.vaultKey} />\n                  </Box>\n                )}\n                <RecentCakeProfitRow pool={pool} />\n              </Box>\n              <Flex flexDirection=\"column\">\n                {account ? (\n                  <VaultCardActions\n                    pool={pool}\n                    accountHasSharesStaked={accountHasSharesStaked}\n                    isLoading={isLoading}\n                    performanceFee={performanceFeeAsDecimal}\n                  />\n                ) : (\n                  <>\n                    <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                      {t('Start earning')}\n                    </Text>\n                    <ConnectWalletButton />\n                  </>\n                )}\n              </Flex>\n            </FlexGap>\n          </>\n        )}\n      </StyledCardBody>\n      <CardFooter defaultExpanded={defaultFooterExpanded} pool={pool} account={account} />\n    </>\n  )\n}\n\nconst CakeVaultCard: React.FC<React.PropsWithChildren<CakeVaultProps>> = ({\n  pool,\n  showStakedOnly,\n  defaultFooterExpanded,\n  showICake = false,\n  showSkeleton = true,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n\n  const vaultPool = useVaultPoolByKey(pool.vaultKey)\n  const { totalStaked } = pool\n\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFeeAsDecimal },\n  } = vaultPool\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isActive {...props}>\n      <PoolCardHeader isStaking={accountHasSharesStaked}>\n        {!showSkeleton || (totalStaked && totalStaked.gte(0)) ? (\n          <>\n            <PoolCardHeaderTitle\n              title={vaultPoolConfig[pool.vaultKey].name}\n              subTitle={vaultPoolConfig[pool.vaultKey].description}\n            />\n            <TokenPairImage {...vaultPoolConfig[pool.vaultKey].tokenImage} width={64} height={64} />\n          </>\n        ) : (\n          <Flex width=\"100%\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\">\n              <Skeleton width={100} height={26} mb=\"4px\" />\n              <Skeleton width={65} height={20} />\n            </Flex>\n            <Skeleton width={58} height={58} variant=\"circle\" />\n          </Flex>\n        )}\n      </PoolCardHeader>\n      <CakeVaultDetail\n        isLoading={isLoading}\n        account={account}\n        pool={pool}\n        vaultPool={vaultPool}\n        accountHasSharesStaked={accountHasSharesStaked}\n        showICake={showICake}\n        performanceFeeAsDecimal={performanceFeeAsDecimal}\n        defaultFooterExpanded={defaultFooterExpanded}\n      />\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import styled from 'styled-components'\nimport { Flex, Text, TooltipText, useTooltip, Box, Link, BalanceWithLoading } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useIfoCredit, useIfoCeiling } from 'state/pools/hooks'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { getICakeWeekDisplay } from 'views/Pools/helpers'\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst IfoCakeRow: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n  const credit = useIfoCredit()\n  const ceiling = useIfoCeiling()\n  const weeksDisplay = getICakeWeekDisplay(ceiling)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Box>\n      <Text>\n        {t(\n          'The number of iCAKE equals the locked staking amount if the staking duration is longer than %weeks% weeks. If the staking duration is less than %weeks% weeks, it will linearly decrease based on the staking duration.',\n          {\n            weeks: weeksDisplay,\n          },\n        )}\n      </Text>\n      <InlineLink external href=\"https://docs.pancakeswap.finance/products/ifo-initial-farm-offering/icake\">\n        {t('Learn more about iCAKE')}\n      </InlineLink>\n    </Box>,\n    {\n      placement: 'bottom-start',\n    },\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText>\n        <Text ref={targetRef} color=\"textSubtle\" bold fontSize=\"12px\">\n          {t('iCAKE')}\n        </Text>\n      </TooltipText>\n      <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" decimals={3} value={getBalanceNumber(credit)} />\n    </Flex>\n  )\n}\n\nexport default IfoCakeRow\n","import { useMemo } from 'react'\nimport { Flex, Box } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport AddCakeButton from '../Buttons/AddCakeButton'\nimport ExtendButton from '../Buttons/ExtendDurationButton'\nimport AfterLockedActions from './AfterLockedActions'\nimport { LockedActionsPropsType } from '../types'\n\nconst LockedActions: React.FC<React.PropsWithChildren<LockedActionsPropsType>> = ({\n  userShares,\n  locked,\n  lockEndTime,\n  lockStartTime,\n  stakingToken,\n  stakingTokenBalance,\n  lockedAmount,\n}) => {\n  const position = useMemo(\n    () =>\n      getVaultPosition({\n        userShares,\n        locked,\n        lockEndTime,\n      }),\n    [userShares, locked, lockEndTime],\n  )\n  const { t } = useTranslation()\n  const lockedAmountAsNumber = getBalanceNumber(lockedAmount)\n\n  const currentBalance = useMemo(\n    () => (stakingTokenBalance ? new BigNumber(stakingTokenBalance) : BIG_ZERO),\n    [stakingTokenBalance],\n  )\n\n  if (position === VaultPosition.Locked) {\n    return (\n      <Flex>\n        <Box width=\"100%\" mr=\"4px\">\n          <AddCakeButton\n            lockEndTime={lockEndTime}\n            lockStartTime={lockStartTime}\n            currentLockedAmount={lockedAmount}\n            stakingToken={stakingToken}\n            currentBalance={currentBalance}\n            stakingTokenBalance={stakingTokenBalance}\n          />\n        </Box>\n        <Box width=\"100%\" ml=\"4px\">\n          <ExtendButton\n            lockEndTime={lockEndTime}\n            lockStartTime={lockStartTime}\n            stakingToken={stakingToken}\n            currentBalance={currentBalance}\n            currentLockedAmount={lockedAmountAsNumber}\n          >\n            {t('Extend')}\n          </ExtendButton>\n        </Box>\n      </Flex>\n    )\n  }\n\n  return (\n    <AfterLockedActions\n      lockEndTime={lockEndTime}\n      lockStartTime={lockStartTime}\n      position={position}\n      currentLockedAmount={lockedAmountAsNumber}\n      stakingToken={stakingToken}\n    />\n  )\n}\n\nexport default LockedActions\n","import { useMemo, memo } from 'react'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\n\nimport { Flex, Text, Box, TooltipText, useTooltip, HelpIcon, BalanceWithLoading } from '@pancakeswap/uikit'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport Divider from 'components/Divider'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport isUndefinedOrNull from '@pancakeswap/utils/isUndefinedOrNull'\nimport { getBalanceNumber, getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport BurningCountDown from './Common/BurningCountDown'\nimport LockedActions from './Common/LockedActions'\nimport YieldBoostRow from './Common/YieldBoostRow'\nimport LockDurationRow from './Common/LockDurationRow'\nimport IfoCakeRow from './Common/IfoCakeRow'\nimport useUserDataInVaultPresenter from './hooks/useUserDataInVaultPresenter'\nimport { LockedStakingApyPropsType } from './types'\n\ninterface LockedStakingApyProps extends LockedStakingApyPropsType {\n  showICake?: boolean\n}\n\nconst LockedStakingApy: React.FC<React.PropsWithChildren<LockedStakingApyProps>> = ({\n  stakingToken,\n  stakingTokenBalance,\n  userData,\n  showICake,\n}) => {\n  const { t } = useTranslation()\n  const position = useMemo(\n    () =>\n      getVaultPosition({\n        userShares: userData?.userShares,\n        locked: userData?.locked,\n        lockEndTime: userData?.lockEndTime,\n      }),\n    [userData],\n  )\n\n  const currentLockedAmountAsBigNumber = useMemo(() => {\n    return userData?.balance?.cakeAsBigNumber\n  }, [userData?.balance?.cakeAsBigNumber])\n\n  const currentLockedAmount = getBalanceNumber(currentLockedAmountAsBigNumber)\n\n  const usdValueStaked = useBUSDCakeAmount(currentLockedAmount)\n\n  const { weekDuration, lockEndDate, secondDuration, remainingTime, burnStartTime } = useUserDataInVaultPresenter({\n    lockStartTime: userData?.lockStartTime,\n    lockEndTime: userData?.lockEndTime,\n    burnStartTime: userData?.burnStartTime,\n  })\n\n  const { lockedApy } = useVaultApy({ duration: secondDuration })\n\n  // earningTokenBalance includes overdue fee if any\n  const earningTokenBalance = useMemo(() => {\n    return getBalanceNumber(currentLockedAmountAsBigNumber.minus(userData?.cakeAtLastUserAction))\n  }, [currentLockedAmountAsBigNumber, userData?.cakeAtLastUserAction])\n\n  const tooltipContent = t(\n    'Calculated based on current rates and subject to change based on pool conditions. It is an estimate provided for your convenience only, and by no means represents guaranteed returns.',\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const tooltipContentOfBurn = t(\n    'After Burning starts at %burnStartTime%. You need to renew your fix-term position, to initiate a new lock or convert your staking position to flexible before it starts. Otherwise all the rewards will be burned within the next 90 days.',\n    { burnStartTime },\n  )\n  const {\n    targetRef: tagTargetRefOfBurn,\n    tooltip: tagTooltipOfBurn,\n    tooltipVisible: tagTooltipVisibleOfBurn,\n  } = useTooltip(tooltipContentOfBurn, {\n    placement: 'bottom',\n  })\n\n  return (\n    <LightGreyCard>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Box>\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('CAKE locked')}\n          </Text>\n          <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={currentLockedAmount} decimals={5} />\n          <BalanceWithLoading\n            value={usdValueStaked}\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            prefix=\"~\"\n            unit=\" USD\"\n          />\n        </Box>\n        <Box>\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('Unlocks In')}\n          </Text>\n          <Text color={position >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'} bold fontSize=\"16px\">\n            {position >= VaultPosition.LockedEnd ? t('Unlocked') : remainingTime}\n            {tagTooltipVisibleOfBurn && tagTooltipOfBurn}\n            <span ref={tagTargetRefOfBurn}>\n              <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n            </span>\n          </Text>\n          <Text color={position >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'} fontSize=\"12px\">\n            {t('On %date%', { date: lockEndDate })}\n          </Text>\n        </Box>\n      </Flex>\n      <Box mb=\"16px\">\n        <LockedActions\n          userShares={userData?.userShares}\n          locked={userData?.locked}\n          lockEndTime={userData?.lockEndTime}\n          lockStartTime={userData?.lockStartTime}\n          stakingToken={stakingToken}\n          stakingTokenBalance={stakingTokenBalance}\n          lockedAmount={currentLockedAmountAsBigNumber}\n        />\n      </Box>\n      <Divider />\n      {![VaultPosition.LockedEnd, VaultPosition.AfterBurning].includes(position) && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          {tooltipVisible && tooltip}\n          <TooltipText>\n            <Text ref={targetRef} color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n              {t('APY')}\n            </Text>\n          </TooltipText>\n          <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={parseFloat(lockedApy)} decimals={2} unit=\"%\" />\n        </Flex>\n      )}\n      <LockDurationRow weekDuration={weekDuration} />\n      {![VaultPosition.LockedEnd, VaultPosition.AfterBurning].includes(position) && (\n        <YieldBoostRow secondDuration={secondDuration} />\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Recent CAKE profit')}\n        </Text>\n        <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n      </Flex>\n      {position === VaultPosition.LockedEnd && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('After Burning In')}\n          </Text>\n          <Text color=\"failure\" bold>\n            <BurningCountDown lockEndTime={userData?.lockEndTime} />\n          </Text>\n        </Flex>\n      )}\n      {position === VaultPosition.AfterBurning && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('After burning')}\n          </Text>\n          <Text color=\"failure\" bold>\n            {isUndefinedOrNull(userData?.currentOverdueFee)\n              ? '-'\n              : t('%amount% Burned', { amount: getFullDisplayBalance(userData?.currentOverdueFee, 18, 5) })}\n          </Text>\n        </Flex>\n      )}\n      {showICake && <IfoCakeRow />}\n    </LightGreyCard>\n  )\n}\n\nexport default memo(LockedStakingApy)\n","import { Flex, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport Apr from 'views/Pools/components/Apr'\n\ninterface AprRowProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n  performanceFee?: number\n  showIcon?: boolean\n}\n\nconst AprRow: React.FC<React.PropsWithChildren<AprRowProps>> = ({\n  pool,\n  stakedBalance,\n  performanceFee = 0,\n  showIcon = true,\n}) => {\n  const { t } = useTranslation()\n  const { vaultKey } = pool\n\n  const tooltipContent = vaultKey\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{vaultKey ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      <Apr pool={pool} stakedBalance={stakedBalance} performanceFee={performanceFee} showIcon={showIcon} />\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { DeserializedPool } from 'state/types'\nimport { useApprovePool } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  pool: DeserializedPool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<React.PropsWithChildren<ApprovalActionProps>> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove, pendingTx } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={pendingTx}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import { Flex, Text, Button, Heading, useModal, Skeleton, Balance } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from '@pancakeswap/sdk'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from '@pancakeswap/utils/formatBalance'\nimport CollectModal from '../../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  earningTokenPrice: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<React.PropsWithChildren<HarvestActionsProps>> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n    />,\n  )\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n      <Flex flexDirection=\"column\">\n        {isLoading ? (\n          <Skeleton width=\"80px\" height=\"48px\" />\n        ) : (\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        )}\n      </Flex>\n      <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import {\n  Flex,\n  Text,\n  Button,\n  IconButton,\n  AddIcon,\n  MinusIcon,\n  useModal,\n  Skeleton,\n  useTooltip,\n  Balance,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport NotEnoughTokensModal from '../../Modals/NotEnoughTokensModal'\nimport StakeModal from '../../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<React.PropsWithChildren<StakeActionsProps>> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPrice !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\n\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { useProfileRequirement } from 'views/Pools/hooks/useProfileRequirement'\nimport { DeserializedPool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\nimport { ProfileRequirementWarning } from '../../ProfileRequirementWarning'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<React.PropsWithChildren<CardActionsProps>> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, poolCategory, userData, earningTokenPrice, profileRequirement } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const { notMeetRequired, notMeetThreshold } = useProfileRequirement(profileRequirement)\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <>\n          <Box display=\"inline\">\n            <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n              {`${earningToken.symbol} `}\n            </InlineText>\n            <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n              {t('Earned')}\n            </InlineText>\n          </Box>\n          <HarvestActions\n            earnings={earnings}\n            earningToken={earningToken}\n            sousId={sousId}\n            earningTokenPrice={earningTokenPrice}\n            isBnbPool={isBnbPool}\n            isLoading={isLoading}\n          />\n        </>\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {notMeetRequired || notMeetThreshold ? (\n          <ProfileRequirementWarning profileRequirement={profileRequirement} />\n        ) : needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip, Farm as FarmUI } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport PoolStatsInfo from '../../PoolStatsInfo'\n\nconst { CompoundingPoolTag, ManualPoolTag } = FarmUI.Tags\n\ninterface FooterProps {\n  pool: DeserializedPool\n  account: string\n  totalCakeInVault?: BigNumber\n  defaultExpanded?: boolean\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst Footer: React.FC<React.PropsWithChildren<FooterProps>> = ({ pool, account, defaultExpanded, children }) => {\n  const { vaultKey } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded || false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Rewards are distributed and included into your staking balance automatically. There’s no need to manually compound your rewards.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(vaultKey ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {vaultKey ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedWrapper flexDirection=\"column\">\n          {children || <PoolStatsInfo pool={pool} account={account} />}\n        </ExpandedWrapper>\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import { CardHeader, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst PoolCardHeader: React.FC<\n  React.PropsWithChildren<{\n    isFinished?: boolean\n    isStaking?: boolean\n  }>\n> = ({ isFinished = false, isStaking = false, children }) => {\n  const background = isStaking ? 'gradientBubblegum' : 'gradientCardHeader'\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        {children}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport const PoolCardHeaderTitle: React.FC<\n  React.PropsWithChildren<{ isFinished?: boolean; title: ReactNode; subTitle: ReactNode }>\n> = ({ isFinished, title, subTitle }) => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n        {title}\n      </Heading>\n      <Text fontSize=\"14px\" color={isFinished ? 'textDisabled' : 'textSubtle'}>\n        {subTitle}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default PoolCardHeader\n","import styled from 'styled-components'\nimport { Card } from '@pancakeswap/uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  min-width: 280px;\n  max-width: 100%;\n  margin: 0 0 24px 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 350px;\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import BigNumber from 'bignumber.js'\n\nimport { CardBody, Flex, Text, CardRibbon, Skeleton } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { DeserializedPool } from 'state/types'\nimport { TokenPairImage } from 'components/TokenImage'\nimport AprRow from './AprRow'\nimport { StyledCard } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport PoolCardHeader, { PoolCardHeaderTitle } from './PoolCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<React.PropsWithChildren<{ pool: DeserializedPool; account: string }>> = ({\n  pool,\n  account,\n}) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData, totalStaked } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      <PoolCardHeader isStaking={accountHasStakedBalance} isFinished={isFinished && sousId !== 0}>\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <PoolCardHeaderTitle\n              title={isCakePool ? t('Manual') : t('Earn %asset%', { asset: earningToken.symbol })}\n              subTitle={isCakePool ? t('Earn CAKE, stake CAKE') : t('Stake %symbol%', { symbol: stakingToken.symbol })}\n            />\n            <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\n          </>\n        ) : (\n          <Flex width=\"100%\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\">\n              <Skeleton width={100} height={26} mb=\"4px\" />\n              <Skeleton width={65} height={20} />\n            </Flex>\n            <Skeleton width={58} height={58} variant=\"circle\" />\n          </Flex>\n        )}\n      </PoolCardHeader>\n      <CardBody>\n        <AprRow pool={pool} stakedBalance={stakedBalance} />\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </CardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import ToggleView from 'components/ToggleView/ToggleView'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot, NextLinkFromReactRouter } from '@pancakeswap/uikit'\nimport { useTranslation } from '@pancakeswap/localization'\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const router = useRouter()\n\n  const { t } = useTranslation()\n\n  const isExact = router.pathname === '/pools' || router.pathname === '/_mp/pools'\n\n  const viewModeToggle = <ToggleView idPrefix=\"clickPool\" viewMode={viewMode} onToggle={setViewMode} />\n\n  const liveOrFinishedSwitch = (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/pools\" replace>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedPools}>\n          <ButtonMenuItem id=\"finished-pools-button\" as={NextLinkFromReactRouter} to=\"/pools/history\" replace>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n\n  const stakedOnlySwitch = (\n    <ToggleWrapper>\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n      <Text> {t('Staked only')}</Text>\n    </ToggleWrapper>\n  )\n\n  return (\n    <ViewControls>\n      {viewModeToggle}\n      {stakedOnlySwitch}\n      {liveOrFinishedSwitch}\n    </ViewControls>\n  )\n}\n\nexport default PoolTabButtons\n","import styled from 'styled-components'\nimport { Skeleton, Text, Flex, Box, useModal, useMatchBreakpoints, Balance } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst EarningsCell: React.FC<React.PropsWithChildren<EarningsCellProps>> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice } = pool\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!pool.userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon, Balance } from '@pancakeswap/uikit'\nimport { getBlockExploreLink } from 'utils'\nimport { DeserializedPool } from 'state/types'\nimport { useCurrentBlock } from 'state/block/hooks'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<React.PropsWithChildren<FinishCellProps>> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const currentBlock = useCurrentBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBlockExploreLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingBlockData = !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const isLoadingPublicData = hasPoolStarted ? !totalStaked.gt(0) || isLoadingBlockData : isLoadingBlockData\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import { Box, Flex, Skeleton, Text, useMatchBreakpoints, Balance } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from '@pancakeswap/localization'\n\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool, VaultKey, DeserializedPoolLockedVault } from 'state/types'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from '@pancakeswap/utils/bigNumber'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface StakedCellProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledCell = styled(BaseCell)``\n\nconst StakedCell: React.FC<React.PropsWithChildren<StakedCellProps>> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const vaultData = useVaultPoolByKey(pool.vaultKey)\n  const {\n    userData: {\n      userShares,\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n      isLoading,\n    },\n  } = vaultData\n  const hasSharesStaked = userShares.gt(0)\n  const isVaultWithShares = pool.vaultKey && hasSharesStaked\n\n  // pool\n  const { stakingTokenPrice, stakingToken, userData } = pool\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const labelText = `${pool.stakingToken.symbol} ${\n    pool.vaultKey === VaultKey.CakeVault && (vaultData as DeserializedPoolLockedVault).userData.locked\n      ? t('Locked')\n      : t('Staked')\n  }`\n\n  const hasStaked = account && (stakedBalance.gt(0) || isVaultWithShares)\n\n  const userDataLoading = pool.vaultKey ? isLoading : !pool.userDataLoaded\n\n  return (\n    <StyledCell\n      role=\"cell\"\n      flex={\n        pool.vaultKey === VaultKey.CakeFlexibleSideVault\n          ? '1 0 162px'\n          : pool.vaultKey === VaultKey.CakeVault && !hasStaked\n          ? '1 0 120px'\n          : '2 0 100px'\n      }\n    >\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {userDataLoading && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasStaked ? 'primary' : 'textDisabled'}\n                  decimals={hasStaked ? 5 : 1}\n                  value={\n                    hasStaked\n                      ? pool.vaultKey\n                        ? Number.isNaN(cakeAsNumberBalance)\n                          ? 0\n                          : cakeAsNumberBalance\n                        : stakedTokenBalance\n                      : 0\n                  }\n                />\n                {hasStaked ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={pool.vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import { useMemo } from 'react'\nimport { Flex, Skeleton, Text, Balance } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { DeserializedPool } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { getBalanceNumber } from '@pancakeswap/utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<React.PropsWithChildren<TotalStakedCellProps>> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { stakingToken, totalStaked, vaultKey } = pool\n  const { totalCakeInVault } = useVaultPoolByKey(vaultKey)\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"20px\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import { useState, memo, ReactNode, useCallback, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\n\nimport ExpandActionCell from './Cells/ExpandActionCell'\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst ExpandRow: React.FC<\n  React.PropsWithChildren<{ children: ReactNode; panel: ReactNode; initialActivity?: boolean }>\n> = ({ children, panel, initialActivity }) => {\n  const hasSetInitialValue = useRef(false)\n  const { isTablet, isDesktop } = useMatchBreakpoints()\n\n  const [expanded, setExpanded] = useState(initialActivity)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = useCallback(() => {\n    setExpanded((prev) => !prev)\n  }, [])\n  useEffect(() => {\n    if (initialActivity && hasSetInitialValue.current === false) {\n      setExpanded(initialActivity)\n      hasSetInitialValue.current = true\n    }\n  }, [initialActivity])\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        {children}\n        <ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && panel}\n    </>\n  )\n}\n\nexport default memo(ExpandRow)\n","import { memo } from 'react'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { usePool, useDeserializedPoolByVaultKey } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\n\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport AutoAprCell from './Cells/AutoAprCell'\nimport StakedCell from './Cells/StakedCell'\nimport ExpandRow from './ExpandRow'\n\nexport const VaultPoolRow: React.FC<\n  React.PropsWithChildren<{ vaultKey: VaultKey; account: string; initialActivity?: boolean }>\n> = memo(({ vaultKey, account, initialActivity }) => {\n  const { isXs, isSm, isMd, isLg, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const isXLargerScreen = isXl || isXxl\n  const pool = useDeserializedPoolByVaultKey(vaultKey)\n\n  return (\n    <ExpandRow\n      initialActivity={initialActivity}\n      panel={\n        <ActionPanel account={account} pool={pool} expanded breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }} />\n      }\n    >\n      <NameCell pool={pool} />\n      {isXLargerScreen && <AutoEarningsCell pool={pool} account={account} />}\n      {isXLargerScreen ? <StakedCell pool={pool} account={account} /> : null}\n      <AutoAprCell pool={pool} />\n      {isLargerScreen && <TotalStakedCell pool={pool} />}\n    </ExpandRow>\n  )\n})\n\nconst PoolRow: React.FC<React.PropsWithChildren<{ sousId: number; account: string; initialActivity?: boolean }>> = ({\n  sousId,\n  account,\n  initialActivity,\n}) => {\n  const { isXs, isSm, isMd, isLg, isXl, isXxl, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const { pool } = usePool(sousId)\n\n  return (\n    <ExpandRow\n      initialActivity={initialActivity}\n      panel={\n        <ActionPanel account={account} pool={pool} expanded breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }} />\n      }\n    >\n      <NameCell pool={pool} />\n      <EarningsCell pool={pool} account={account} />\n      {isLargerScreen && <TotalStakedCell pool={pool} />}\n      <AprCell pool={pool} />\n      {isDesktop && <EndsInCell pool={pool} />}\n    </ExpandRow>\n  )\n}\n\nexport default memo(PoolRow)\n","import { useRef } from 'react'\nimport styled from 'styled-components'\nimport { DeserializedPool } from 'state/types'\nimport PoolRow, { VaultPoolRow } from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: DeserializedPool[]\n  account: string\n  urlSearch?: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  scroll-margin-top: 64px;\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst PoolsTable: React.FC<React.PropsWithChildren<PoolsTableProps>> = ({ pools, account, urlSearch }) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n\n  return (\n    <StyledTableBorder>\n      <StyledTable id=\"pools-table\" role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) =>\n          pool.vaultKey ? (\n            <VaultPoolRow\n              initialActivity={urlSearch.toLowerCase() === pool.earningToken.symbol?.toLowerCase()}\n              key={pool.vaultKey}\n              vaultKey={pool.vaultKey}\n              account={account}\n            />\n          ) : (\n            <PoolRow\n              initialActivity={urlSearch.toLowerCase() === pool.earningToken.symbol?.toLowerCase()}\n              key={pool.sousId}\n              sousId={pool.sousId}\n              account={account}\n            />\n          ),\n        )}\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\nimport { BigNumber as EthersBigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport {\n  Heading,\n  Flex,\n  Image,\n  Text,\n  Link,\n  FlexLayout,\n  PageHeader,\n  SearchInput,\n  Select,\n  OptionProps,\n  Loading,\n  ScrollToTopButtonV2,\n} from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from '@pancakeswap/localization'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { usePoolsPageFetch, usePoolsWithVault } from 'state/pools/hooks'\nimport { latinise } from 'utils/latinise'\nimport Page from 'components/Layout/Page'\nimport { DeserializedPool, DeserializedPoolVault, VaultKey, DeserializedPoolLockedVault } from 'state/types'\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport { useRouter } from 'next/router'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { BSC_BLOCK_TIME } from 'config'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { getCakeVaultEarnings } from './helpers'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst FinishedTextContainer = styled(Flex)`\n  padding-bottom: 32px;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst FinishedTextLink = styled(Link)`\n  font-weight: 400;\n  white-space: nowrap;\n  text-decoration: underline;\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst sortPools = (account: string, sortOption: string, pools: DeserializedPool[], poolsToSort: DeserializedPool[]) => {\n  switch (sortOption) {\n    case 'apr':\n      // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n      return orderBy(poolsToSort, (pool: DeserializedPool) => (pool.apr ? pool.apr : 0), 'desc')\n    case 'earned':\n      return orderBy(\n        poolsToSort,\n        (pool: DeserializedPool) => {\n          if (!pool.userData || !pool.earningTokenPrice) {\n            return 0\n          }\n\n          if (pool.vaultKey) {\n            const { userData, pricePerFullShare } = pool as DeserializedPoolVault\n            if (!userData || !userData.userShares) {\n              return 0\n            }\n            return getCakeVaultEarnings(\n              account,\n              userData.cakeAtLastUserAction,\n              userData.userShares,\n              pricePerFullShare,\n              pool.earningTokenPrice,\n              pool.vaultKey === VaultKey.CakeVault\n                ? (pool as DeserializedPoolLockedVault).userData.currentPerformanceFee.plus(\n                    (pool as DeserializedPoolLockedVault).userData.currentOverdueFee,\n                  )\n                : null,\n            ).autoUsdToDisplay\n          }\n          return pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n        },\n        'desc',\n      )\n    case 'totalStaked': {\n      return orderBy(\n        poolsToSort,\n        (pool: DeserializedPool) => {\n          let totalStaked = Number.NaN\n          if (pool.vaultKey) {\n            const vault = pool as DeserializedPoolVault\n            if (pool.stakingTokenPrice && vault.totalCakeInVault.isFinite()) {\n              totalStaked =\n                +formatUnits(EthersBigNumber.from(vault.totalCakeInVault.toString()), pool.stakingToken.decimals) *\n                pool.stakingTokenPrice\n            }\n          } else if (pool.totalStaked?.isFinite() && pool.stakingTokenPrice) {\n            totalStaked =\n              +formatUnits(EthersBigNumber.from(pool.totalStaked.toString()), pool.stakingToken.decimals) *\n              pool.stakingTokenPrice\n          }\n          return Number.isFinite(totalStaked) ? totalStaked : 0\n        },\n        'desc',\n      )\n    }\n    case 'latest':\n      return orderBy(poolsToSort, (pool: DeserializedPool) => Number(pool.sousId), 'desc')\n    default:\n      return poolsToSort\n  }\n}\n\nconst POOL_START_BLOCK_THRESHOLD = (60 / BSC_BLOCK_TIME) * 4\n\nconst Pools: React.FC<React.PropsWithChildren> = () => {\n  const router = useRouter()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools, userDataLoaded } = usePoolsWithVault()\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly()\n  const [viewMode, setViewMode] = useUserPoolsViewMode()\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const normalizedUrlSearch = useMemo(\n    () => (typeof router?.query?.search === 'string' ? router.query.search : ''),\n    [router.query],\n  )\n  const [_searchQuery, setSearchQuery] = useState('')\n  const searchQuery = normalizedUrlSearch && !_searchQuery ? normalizedUrlSearch : _searchQuery\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenPoolsLength = useRef(0)\n  const initialBlock = useInitialBlock()\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const openPoolsWithStartBlockFilter = useMemo(\n    () =>\n      openPools.filter((pool) =>\n        initialBlock > 0 && pool.startBlock\n          ? Number(pool.startBlock) < initialBlock + POOL_START_BLOCK_THRESHOLD\n          : true,\n      ),\n    [initialBlock, openPools],\n  )\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.vaultKey) {\n          const vault = pool as DeserializedPoolVault\n          return vault.userData.userShares.gt(0)\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools],\n  )\n  const stakedOnlyOpenPools = useCallback(() => {\n    return openPoolsWithStartBlockFilter.filter((pool) => {\n      if (pool.vaultKey) {\n        const vault = pool as DeserializedPoolVault\n        return vault.userData.userShares.gt(0)\n      }\n      return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n    })\n  }, [openPoolsWithStartBlockFilter])\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePoolsPageFetch()\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n          return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\n        }\n        return poolsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n  const showFinishedPools = router.pathname.includes('history')\n\n  const handleChangeSearchQuery = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(event.target.value),\n    [],\n  )\n\n  const handleSortOptionChange = useCallback((option: OptionProps) => setSortOption(option.value), [])\n\n  let chosenPools\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools() : openPoolsWithStartBlockFilter\n  }\n\n  chosenPools = useMemo(() => {\n    const sortedPools = sortPools(account, sortOption, pools, chosenPools).slice(0, numberOfPoolsVisible)\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      return sortedPools.filter((pool) => latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery))\n    }\n    return sortedPools\n  }, [account, sortOption, pools, chosenPools, numberOfPoolsVisible, searchQuery])\n  chosenPoolsLength.current = chosenPools.length\n\n  const cardLayout = (\n    <CardLayout>\n      {chosenPools.map((pool) =>\n        pool.vaultKey ? (\n          <CakeVaultCard key={pool.vaultKey} pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable urlSearch={normalizedUrlSearch} pools={chosenPools} account={account} />\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Syrup Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Just stake some tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolControls>\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <FilterContainer>\n            <LabelWrapper>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                    {\n                      label: t('Latest'),\n                      value: 'latest',\n                    },\n                  ]}\n                  onOptionChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <SearchInput initialValue={searchQuery} onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <FinishedTextContainer>\n            <Text fontSize={['16px', null, '20px']} color=\"failure\" pr=\"4px\">\n              {t('Looking for v1 CAKE syrup pools?')}\n            </Text>\n            <FinishedTextLink href=\"/migration\" fontSize={['16px', null, '20px']} color=\"failure\">\n              {t('Go to migration page')}.\n            </FinishedTextLink>\n          </FinishedTextContainer>\n        )}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\" mb=\"4px\">\n            <Loading />\n          </Flex>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={observerRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page>\n      {createPortal(<ScrollToTopButtonV2 />, document.body)}\n    </>\n  )\n}\n\nexport default Pools\n","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components\";\nimport { CardRibbonProps } from \"./types\";\n\ninterface StyledCardRibbonProps extends CardRibbonProps {\n  theme: DefaultTheme;\n}\n\nconst StyledCardRibbon = styled.div<Partial<StyledCardRibbonProps>>`\n  z-index: ${({ theme }) => theme.zIndices.ribbon};\n  background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n  color: white;\n  margin: 0;\n  padding: 8px 0;\n  position: absolute;\n  right: ${({ ribbonPosition }) => (ribbonPosition === \"right\" ? 0 : \"auto\")};\n  top: 0;\n  text-align: center;\n  transform: ${({ ribbonPosition }) =>\n    ribbonPosition === \"right\"\n      ? \"translateX(30%) translateY(0%) rotate(45deg)\"\n      : \"translateX(0%) translateY(200%) rotate(-45deg)\"};\n  transform-origin: top left;\n  width: 96px;\n\n  &:before,\n  &:after {\n    background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n    content: \"\";\n    height: 100%;\n    margin: 0 -1px; /* Removes tiny gap */\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n\n  &:before {\n    right: 100%;\n  }\n\n  &:after {\n    left: 100%;\n  }\n\n  & > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 96px;\n  }\n`;\n\nconst CardRibbon: React.FC<React.PropsWithChildren<CardRibbonProps>> = ({\n  variantColor,\n  text,\n  ribbonPosition,\n  ...props\n}) => {\n  return (\n    <StyledCardRibbon variantColor={variantColor} ribbonPosition={ribbonPosition} {...props}>\n      <div title={text}>{text}</div>\n    </StyledCardRibbon>\n  );\n};\n\nCardRibbon.defaultProps = {\n  // eslint-disable-next-line react/default-props-match-prop-types\n  ribbonPosition: \"right\",\n};\n\nexport default CardRibbon;\n"],"names":["TooltipText","useTooltip","Balance","AutoEarningsBreakdown","RecentCakeProfitBalance","cakeToDisplay","pool","account","targetRef","tooltip","tooltipVisible","placement","ref","small","fontSize","value","Flex","Text","useWeb3React","useTranslation","usePriceCakeBusd","useVaultPoolByKey","VaultKey","getCakeVaultEarnings","RecentCakeProfitCountdownRow","t","pricePerFullShare","userData","vaultKey","cakePriceBusd","hasAutoEarnings","autoCakeToDisplay","cakeAtLastUserAction","userShares","toNumber","CakeVault","currentPerformanceFee","plus","currentOverdueFee","gt","alignItems","justifyContent","Skeleton","useModal","Button","CalculateIcon","FlexGap","LightGreyCard","useVaultApy","memo","styled","VaultRoiCalculatorModal","AprLabelContainer","StakingApy","flexibleApy","lockedApy","onPresentFlexibleApyModal","onPresentLockedApyModal","initialView","color","textTransform","bold","parseFloat","decimals","unit","onClick","e","stopPropagation","variant","width","height","padding","marginLeft","gap","flexWrap","style","whiteSpace","IconButton","AddIcon","MinusIcon","Box","getBalanceNumber","NotEnoughTokensModal","VaultStakeModal","ConvertToLock","HasSharesActions","stakingTokenBalance","performanceFee","balance","cakeAsBigNumber","cakeAsNumberBalance","stakingToken","stakedDollarValue","multipliedBy","onPresentTokenRequired","tokenSymbol","symbol","onPresentStake","stakingMax","onPresentUnstake","isRemovingStake","mb","flexDirection","as","prefix","mt","mr","currentStakedAmount","AutoRenewIcon","useVaultApprove","VaultApprovalAction","isLoading","setLastUpdated","handleApprove","pendingTx","endIcon","spin","disabled","VaultStakeButtonGroup","LockedStakeModal","VaultStakeActions","accountHasSharesStaked","userDataLoaded","openPresentLockedStakeModal","currentBalance","renderStakeAction","onFlexibleClick","onLockedClick","BigNumber","BIG_ZERO","useCheckVaultApprovalStatus","InlineText","CakeVaultCardActions","isVaultApproved","display","CardBody","TokenPairImage","ConnectWalletButton","vaultPoolConfig","CardFooter","PoolCardHeader","PoolCardHeaderTitle","StyledCard","VaultPositionTagWithLabel","UnstakingFeeCountdownRow","RecentCakeProfitRow","VaultCardActions","LockedStakingApy","StyledCardBody","CakeVaultDetail","vaultPool","showICake","performanceFeeAsDecimal","defaultFooterExpanded","locked","defaultExpanded","CakeVaultCard","showStakedOnly","showSkeleton","props","totalStaked","isVaultUserDataLoading","fees","isActive","isStaking","gte","title","name","subTitle","description","tokenImage","Link","BalanceWithLoading","useIfoCredit","useIfoCeiling","getICakeWeekDisplay","InlineLink","IfoCakeRow","credit","ceiling","weeksDisplay","weeks","external","href","useMemo","getVaultPosition","VaultPosition","AddCakeButton","ExtendButton","AfterLockedActions","LockedActions","lockEndTime","lockStartTime","lockedAmount","position","lockedAmountAsNumber","Locked","currentLockedAmount","ml","HelpIcon","Divider","useBUSDCakeAmount","isUndefinedOrNull","getFullDisplayBalance","BurningCountDown","YieldBoostRow","LockDurationRow","useUserDataInVaultPresenter","currentLockedAmountAsBigNumber","usdValueStaked","weekDuration","lockEndDate","secondDuration","remainingTime","burnStartTime","duration","earningTokenBalance","minus","tooltipContent","tooltipContentOfBurn","tagTargetRefOfBurn","tagTooltipOfBurn","tagTooltipVisibleOfBurn","LockedEnd","span","date","AfterBurning","includes","amount","Apr","AprRow","stakedBalance","showIcon","useERC20","useApprovePool","ApprovalAction","sousId","earningToken","stakingTokenContract","address","Heading","formatNumber","CollectModal","HarvestActions","earnings","isBnbPool","earningTokenPrice","formattedBalance","earningTokenDollarBalance","fullBalance","hasEarnings","onPresentCollect","earningsDollarValue","StakeModal","StakeAction","isStaked","stakingTokenPrice","stakingLimit","isFinished","stakedTokenBalance","stakedTokenDollarBalance","reachStakingLimit","PoolCategory","useProfileRequirement","StakeActions","ProfileRequirementWarning","CardActions","poolCategory","profileRequirement","BINANCE","allowance","pendingReward","needsApproval","notMeetRequired","notMeetThreshold","useState","ExpandableLabel","Farm","FarmUI","PoolStatsInfo","CompoundingPoolTag","ManualPoolTag","Tags","ExpandableButtonWrapper","ExpandedWrapper","Footer","children","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","CardHeader","Wrapper","background","theme","colors","backgroundDisabled","radii","card","scale","Card","mediaQueries","sm","CardRibbon","PoolCard","accountHasStakedBalance","isCakePool","ribbon","variantColor","text","asset","primaryToken","secondaryToken","ToggleView","useRouter","ButtonMenu","ButtonMenuItem","Toggle","NotificationDot","NextLinkFromReactRouter","ToggleWrapper","div","ViewControls","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","router","isExact","pathname","viewModeToggle","idPrefix","onToggle","liveOrFinishedSwitch","activeIndex","to","replace","show","id","stakedOnlySwitch","checked","onChange","useMatchBreakpoints","BaseCell","CellContent","StyledCell","EarningsCell","isMobile","labelText","handleEarningsClick","event","role","textAlign","undefined","TimerIcon","getBlockExploreLink","useCurrentBlock","getPoolBlockInfo","EndsInCell","startBlock","endBlock","currentBlock","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","renderBlocks","flex","isLoadingBlockData","isLoadingPublicData","showLoading","StakedCell","vaultData","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","hasStaked","userDataLoading","CakeFlexibleSideVault","Number","isNaN","TotalStakedCell","totalCakeInVault","totalStakedBalance","useCallback","useEffect","useRef","useDelayedUnmount","ExpandActionCell","StyledRow","ExpandRow","panel","initialActivity","hasSetInitialValue","isTablet","isDesktop","setExpanded","shouldRenderActionPanel","toggleExpanded","prev","current","isFullLayout","usePool","useDeserializedPoolByVaultKey","NameCell","AprCell","ActionPanel","AutoEarningsCell","AutoAprCell","VaultPoolRow","isXs","isSm","isMd","isLg","isXl","isXxl","isLargerScreen","isXLargerScreen","breakpoints","PoolRow","StyledTable","StyledTableBorder","cardBorder","PoolsTable","pools","urlSearch","tableWrapperEl","map","toLowerCase","createPortal","EthersBigNumber","formatUnits","Image","FlexLayout","PageHeader","SearchInput","Select","Loading","ScrollToTopButtonV2","orderBy","partition","useIntersectionObserver","usePoolsPageFetch","usePoolsWithVault","latinise","Page","useUserPoolStakedOnly","useUserPoolsViewMode","ViewMode","useInitialBlock","BSC_BLOCK_TIME","CardLayout","PoolControls","FilterContainer","LabelWrapper","ControlStretch","FinishedTextContainer","md","FinishedTextLink","NUMBER_OF_POOLS_VISIBLE","sortPools","sortOption","poolsToSort","apr","autoUsdToDisplay","times","NaN","vault","isFinite","from","toString","POOL_START_BLOCK_THRESHOLD","Pools","numberOfPoolsVisible","setNumberOfPoolsVisible","observerRef","isIntersecting","normalizedUrlSearch","query","search","_searchQuery","setSearchQuery","searchQuery","setSortOption","chosenPoolsLength","initialBlock","finishedPools","openPools","openPoolsWithStartBlockFilter","filter","stakedOnlyFinishedPools","isGreaterThan","stakedOnlyOpenPools","length","poolsCurrentlyVisible","showFinishedPools","handleChangeSearchQuery","target","handleSortOptionChange","option","chosenPools","sortedPools","slice","lowercaseQuery","cardLayout","tableLayout","options","label","onOptionChange","initialValue","placeholder","pr","CARD","mx","src","alt","document","body","React","StyledCardRibbon","zIndices","ribbonPosition","defaultProps"],"sourceRoot":""}