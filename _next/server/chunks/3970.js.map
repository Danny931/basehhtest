{"version":3,"file":"3970.js","mappings":"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","sources":["webpack://web/./src/components/CollapsibleCard/index.tsx","webpack://web/./src/views/Nft/market/Collection/Traits/CollectionTraits.tsx","webpack://web/./src/views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","webpack://web/./src/views/Nft/market/Collection/Traits/index.tsx","webpack://web/./src/views/Nft/market/Collection/Traits/styles.tsx","webpack://web/../../packages/uikit/src/components/Card/CardHeader.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ChevronDown.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ChevronUp.tsx","webpack://web/../../packages/uikit/src/components/Table/Cell.tsx","webpack://web/../../packages/uikit/src/components/Table/Table.tsx"],"sourcesContent":["import { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<React.PropsWithChildren<CollapsibleCardProps>> = ({\n  initialOpenState = true,\n  title,\n  children,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from '@pancakeswap/utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from '@pancakeswap/localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<React.PropsWithChildren<CollectionTraitsProps>> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).map(\n            (traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return { value: traitValue, count, rarity }\n            },\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import { useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport { useRouter } from 'next/router'\nimport { formatNumber } from '@pancakeswap/utils/formatBalance'\nimport { useTranslation } from '@pancakeswap/localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport orderBy from 'lodash/orderBy'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\nimport { useGetCollectionDistributionPB } from '../../hooks/useGetCollectionDistribution'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<React.PropsWithChildren<{ bunnyId: string }>> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<React.PropsWithChildren<PancakeBunniesTraitsProps>> = ({ collectionAddress }) => {\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const collection = useGetCollection(collectionAddress)\n  const totalBunnyCount = Number(collection?.totalSupply)\n  const { t } = useTranslation()\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\n  const { push } = useRouter()\n\n  const sortedTokenList = useMemo(() => {\n    if (!distributionData || !Object.keys(distributionData)) return []\n\n    const distributionKeys: string[] = Object.keys(distributionData)\n    const distributionValues: any[] = Object.values(distributionData)\n\n    return orderBy(\n      distributionValues.map((token, index) => ({ ...token, tokenId: distributionKeys[index] })),\n      (token) => token.tokenCount,\n      raritySort,\n    )\n  }, [raritySort, distributionData])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {!isFetchingDistribution ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedTokenList.map((token) => {\n                  const count: number = token.tokenCount\n                  const percentage = (count / totalBunnyCount) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${token.tokenId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={token.tokenId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={token.image.thumbnail} name={token.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={token.tokenId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import { useRouter } from 'next/router'\nimport { isAddress } from 'utils'\nimport Container from 'components/Layout/Container'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const collectionAddress = useRouter().query.collectionAddress as string\n\n  return (\n    <>\n      <Container py=\"40px\">\n        {isAddress(collectionAddress) === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n","import styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<React.PropsWithChildren<{ thumbnailSrc: string; name: string }>> = ({\n  thumbnailSrc,\n  name,\n}) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\nimport { CardTheme } from \"./types\";\n\nexport interface CardHeaderProps extends SpaceProps {\n  variant?: keyof CardTheme[\"cardHeaderBackground\"];\n}\n\nconst CardHeader = styled.div<CardHeaderProps>`\n  background: ${({ theme, variant = \"default\" }) => theme.card.cardHeaderBackground[variant]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n  ${space}\n`;\n\nCardHeader.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardHeader;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.11997 9.29006L12 13.1701L15.88 9.29006C16.27 8.90006 16.9 8.90006 17.29 9.29006C17.68 9.68006 17.68 10.3101 17.29 10.7001L12.7 15.2901C12.31 15.6801 11.68 15.6801 11.29 15.2901L6.69997 10.7001C6.30997 10.3101 6.30997 9.68006 6.69997 9.29006C7.08997 8.91006 7.72997 8.90006 8.11997 9.29006Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.11997 14.7101L12 10.8301L15.88 14.7101C16.27 15.1001 16.9 15.1001 17.29 14.7101C17.68 14.3201 17.68 13.6901 17.29 13.3001L12.7 8.7101C12.31 8.3201 11.68 8.3201 11.29 8.7101L6.69997 13.3001C6.30997 13.6901 6.30997 14.3201 6.69997 14.7101C7.08997 15.0901 7.72997 15.1001 8.11997 14.7101Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\nexport const Td = styled.td<TypographyProps>`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 16px;\n  vertical-align: middle;\n\n  ${typography}\n`;\n\nexport const Th = styled(Td).attrs({ as: \"th\" })`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 12px;\n  text-transform: uppercase;\n`;\n","import styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { Td } from \"./Cell\";\n\nconst Table = styled.table`\n  max-width: 100%;\n  width: 100%;\n\n  tbody tr:last-child {\n    ${Td} {\n      border-bottom: 0;\n    }\n  }\n\n  ${space}\n`;\n\nexport default Table;\n"],"names":["useState","CardHeader","Card","Flex","Heading","IconButton","ChevronUpIcon","ChevronDownIcon","CollapsibleCard","initialOpenState","title","children","props","isOpen","setIsOpen","toggleOpen","p","alignItems","justifyContent","as","variant","scale","onClick","width","times","capitalize","sum","orderBy","ArrowDownIcon","ArrowUpIcon","Skeleton","Table","Td","Th","formatNumber","useTranslation","StyledSortButton","TableWrapper","useGetCollectionDistribution","CollectionTraits","collectionAddress","data","isFetching","raritySort","setRaritySort","t","thead","tr","textAlign","tbody","map","bunnyCnt","Object","keys","traitType","index","total","values","traitValues","traitValue","count","rarity","value","sortType","toggleRaritySort","prevRaritySort","mb","type","color","useMemo","useRouter","useGetCollection","useGetLowestPriceFromBunnyId","BNBAmountLabel","nftsBaseUrl","ClickableRow","NftName","useGetCollectionDistributionPB","LowestPriceCell","bunnyId","lowestPrice","height","amount","PancakeBunniesTraits","collection","totalBunnyCount","Number","totalSupply","distributionData","isFetchingDistribution","push","sortedTokenList","distributionKeys","distributionValues","token","tokenId","tokenCount","currentValue","percentage","handleClick","thumbnailSrc","image","thumbnail","name","mr","isAddress","Container","pancakeBunniesAddress","Traits","query","py","styled","Image","Text","button","theme","colors","secondary","div","NftImage","src","space","card","cardHeaderBackground","radii","defaultProps","React","Svg","Icon","viewBox","path","d","typography","td","cardBorder","text","attrs","table"],"sourceRoot":""}