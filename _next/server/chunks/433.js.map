{"version":3,"file":"433.js","mappings":"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","sources":["webpack://web/./src/hooks/useSWRContract.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { FetchStatus } from 'config/constants/types'\nimport { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Contract } from '@ethersproject/contracts'\nimport { FormatTypes } from '@ethersproject/abi'\nimport useSWR, {\n  Middleware,\n  SWRConfiguration,\n  KeyedMutator,\n  // eslint-disable-next-line camelcase\n  unstable_serialize,\n} from 'swr'\nimport { multicallv2, MulticallOptions, Call } from 'utils/multicall'\nimport { MaybeContract, ContractMethodName, ContractMethodParams } from 'utils/types'\n\ndeclare module 'swr' {\n  interface SWRResponse<Data = any, Error = any> {\n    data?: Data\n    error?: Error\n    mutate: KeyedMutator<Data>\n    isValidating: boolean\n    // Add global fetchStatus to SWRResponse\n    status: FetchStatus\n  }\n}\n\nexport const fetchStatusMiddleware: Middleware = (useSWRNext) => {\n  return (key, fetcher, config) => {\n    const swr = useSWRNext(key, fetcher, config)\n    return Object.defineProperty(swr, 'status', {\n      get() {\n        let status = FetchStatus.Idle\n\n        if (!swr.isValidating && !swr.error && !swr.data) {\n          status = FetchStatus.Idle\n        } else if (swr.isValidating && !swr.error && !swr.data) {\n          status = FetchStatus.Fetching\n        } else if (swr.data) {\n          status = FetchStatus.Fetched\n        } else if (swr.error && !swr.data) {\n          status = FetchStatus.Failed\n        }\n        return status\n      },\n    })\n  }\n}\n\ntype UseSWRContractArrayKey<C extends Contract = Contract, N extends ContractMethodName<C> = any> =\n  | [MaybeContract<C>, N, ContractMethodParams<C, N>]\n  | [MaybeContract<C>, N]\n\nexport type UseSWRContractObjectKey<\n  C extends Contract = Contract,\n  N extends ContractMethodName<C> = ContractMethodName<C>,\n> = {\n  contract: MaybeContract<C>\n  methodName: N\n  params?: ContractMethodParams<C, N>\n}\n\ntype UseSWRContractSerializeKeys = {\n  address: string\n  interfaceFormat: string[]\n  methodName: string\n  callData: string\n}\n\nconst getContractKey = <T extends Contract = Contract, N extends ContractMethodName<T> = any>(\n  key?: UseSWRContractKey<T, N> | null,\n) => {\n  if (Array.isArray(key)) {\n    const [contract, methodName, params] = key || []\n    return {\n      contract,\n      methodName,\n      params,\n    }\n  }\n  return key\n}\n\nconst serializesContractKey = <T extends Contract = Contract>(\n  key?: UseSWRContractKey<T> | null,\n): UseSWRContractSerializeKeys | null => {\n  const { contract, methodName, params } = getContractKey(key) || {}\n  const serializedKeys =\n    key && contract && methodName\n      ? {\n          address: contract.address,\n          interfaceFormat: contract.interface.format(FormatTypes.full) as string[],\n          methodName,\n          callData: contract.interface.encodeFunctionData(methodName, params),\n        }\n      : null\n  return serializedKeys\n}\n\nexport type UseSWRContractKey<T extends Contract = Contract, N extends ContractMethodName<T> = any> =\n  | UseSWRContractArrayKey<T, N>\n  | UseSWRContractObjectKey<T, N>\n\n/**\n * @example\n * const key = [contract, 'methodName', [params]]\n * const key = { contract, methodName, params }\n * const { data, error, mutate } = useSWRContract(key)\n */\nexport function useSWRContract<\n  Error = any,\n  T extends Contract = Contract,\n  N extends ContractMethodName<T> = ContractMethodName<T>,\n  Data = Awaited<ReturnType<T['callStatic'][N]>>,\n>(key?: UseSWRContractKey<T, N> | null, config: SWRConfiguration<Data, Error> = {}) {\n  const { contract, methodName, params } = getContractKey(key) || {}\n  const serializedKeys = useMemo(() => serializesContractKey(key), [key])\n\n  return useSWR<Data, Error>(\n    serializedKeys,\n    async () => {\n      if (!contract || !methodName) return null\n      if (!params) return contract[methodName]()\n      return contract[methodName](...params)\n    },\n    config,\n  )\n}\n\nexport const immutableMiddleware: Middleware = (useSWRNext) => (key, fetcher, config) => {\n  config.revalidateOnFocus = false\n  config.revalidateIfStale = false\n  config.revalidateOnReconnect = false\n  return useSWRNext(key, fetcher, config)\n}\n\nexport function useSWRMulticall<Data>(abi: any[], calls: Call[], options?: MulticallOptions & SWRConfiguration) {\n  const { requireSuccess = true, ...config } = options || {}\n  return useSWR<Data>(calls, () => multicallv2({ abi, calls, options: { requireSuccess } }), {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    ...config,\n  })\n}\n\nexport const localStorageMiddleware: Middleware = (useSWRNext) => (key, fetcher, config) => {\n  const swr = useSWRNext(key, fetcher, config)\n  const { data } = swr\n  const serializedKey = useMemo(() => unstable_serialize(key), [key])\n\n  useEffect(() => {\n    if (data) {\n      try {\n        const stringify = JSON.stringify(data)\n        localStorage?.setItem(serializedKey, stringify)\n      } catch (error) {\n        //\n      }\n    }\n  }, [data, serializedKey])\n\n  let localStorageDataParsed\n\n  if (!data && typeof window !== 'undefined') {\n    const localStorageData = localStorage?.getItem(serializedKey)\n\n    if (localStorageData) {\n      try {\n        localStorageDataParsed = JSON.parse(localStorageData)\n      } catch (error) {\n        localStorage?.removeItem(serializedKey)\n      }\n    }\n  }\n\n  return Object.defineProperty(swr, 'data', {\n    value: data || localStorageDataParsed,\n  })\n}\n\n// This is a SWR middleware for keeping the data even if key changes.\nexport const laggyMiddleware: Middleware = (useSWRNext) => {\n  return (key, fetcher, config) => {\n    // Use a ref to store previous returned data.\n    const laggyDataRef = useRef<any>()\n\n    // Actual SWR hook.\n    const swr = useSWRNext(key, fetcher, config)\n\n    useEffect(() => {\n      // Update ref if data is not undefined.\n      if (swr.data !== undefined) {\n        laggyDataRef.current = swr.data\n      }\n    }, [swr.data])\n\n    // Expose a method to clear the laggy data, if any.\n    const resetLaggy = useCallback(() => {\n      laggyDataRef.current = undefined\n    }, [])\n\n    // Fallback to previous data if the current data is undefined.\n    const dataOrLaggyData = swr.data === undefined ? laggyDataRef.current : swr.data\n\n    // Is it showing previous data?\n    const isLagging = swr.data === undefined && laggyDataRef.current !== undefined\n\n    // Also add a `isLagging` field to SWR.\n    Object.defineProperty(swr, 'isLagging', {\n      value: isLagging,\n    })\n    Object.defineProperty(swr, 'resetLaggy', {\n      value: resetLaggy,\n    })\n    Object.defineProperty(swr, 'data', {\n      value: dataOrLaggyData,\n    })\n    return swr\n  }\n}\n\n// dev only\nexport const loggerMiddleware: Middleware = (useSWRNext) => {\n  return (key, fetcher, config) => {\n    // Add logger to the original fetcher.\n    const extendedFetcher = fetcher\n      ? (...args: unknown[]) => {\n          console.debug('SWR Request:', key)\n          return fetcher(...args)\n        }\n      : null\n\n    // Execute the hook with the new fetcher.\n    return useSWRNext(key, extendedFetcher, config)\n  }\n}\n"],"names":["FetchStatus","useCallback","useEffect","useMemo","useRef","FormatTypes","useSWR","unstable_serialize","multicallv2","fetchStatusMiddleware","useSWRNext","key","fetcher","config","swr","Object","defineProperty","get","status","Idle","isValidating","error","data","Fetching","Fetched","Failed","getContractKey","Array","isArray","contract","methodName","params","serializesContractKey","serializedKeys","address","interfaceFormat","interface","format","full","callData","encodeFunctionData","useSWRContract","immutableMiddleware","revalidateOnFocus","revalidateIfStale","revalidateOnReconnect","useSWRMulticall","abi","calls","options","requireSuccess","localStorageMiddleware","serializedKey","stringify","JSON","localStorage","setItem","localStorageDataParsed","localStorageData","getItem","parse","removeItem","value","laggyMiddleware","laggyDataRef","undefined","current","resetLaggy","dataOrLaggyData","isLagging","loggerMiddleware","extendedFetcher","args","console","debug"],"sourceRoot":""}