{"version":3,"file":"1145.js","mappings":"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","sources":["webpack://web/./src/contexts/LocalRedux/Provider.tsx","webpack://web/./src/contexts/LocalRedux/useLocalDispatch.ts","webpack://web/./src/hooks/useTheme.ts","webpack://web/./src/state/predictions/config.ts","webpack://web/./src/state/predictions/bnbQueries.ts","webpack://web/./src/state/predictions/cakeQueries.ts","webpack://web/./src/state/predictions/queries.ts","webpack://web/./src/utils/numberOrNull.ts","webpack://web/./src/state/predictions/cakeTransformers.ts","webpack://web/./src/state/predictions/bnbTransformers.ts","webpack://web/./src/state/predictions/helpers.ts","webpack://web/./src/contexts/LocalRedux/useSelector.ts","webpack://web/./src/state/predictions/selectors.ts","webpack://web/./src/state/predictions/hooks.ts","webpack://web/./src/state/predictions/index.ts","webpack://web/./src/views/Predictions/context/ConfigProvider.tsx","webpack://web/./src/contexts/LocalRedux/makeStore.ts","webpack://web/./src/views/Predictions/context/config.ts","webpack://web/./src/views/Predictions/context/PredictionConfigProviders.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ArrowDown.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ArrowUp.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ChevronDown.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ChevronRight.tsx","webpack://web/../../packages/uikit/src/components/Svg/Icons/ChevronUp.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport { Provider } from 'react-redux'\n\nexport const LocalContext = createContext(null)\n\nexport default ({ children, store }) => {\n  return (\n    <Provider store={store} context={LocalContext}>\n      {children}\n    </Provider>\n  )\n}\n","import { useContext, useCallback } from 'react'\nimport _noop from 'lodash/noop'\nimport { LocalContext } from './Provider'\n\nexport default function useLocalDispatch() {\n  const localContext = useContext(LocalContext)\n\n  const emptyFn = useCallback(_noop, [])\n\n  return localContext?.store?.dispatch || emptyFn\n}\n","import { useContext } from 'react'\nimport Cookie from 'js-cookie'\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\nimport { useTheme as useNextTheme } from 'next-themes'\n\nexport const COOKIE_THEME_KEY = 'theme'\nexport const THEME_DOMAIN = '.pancakeswap.finance'\n\nconst useTheme = () => {\n  const { resolvedTheme, setTheme } = useNextTheme()\n  const theme = useContext(StyledThemeContext)\n\n  const handleSwitchTheme = (themeValue: 'light' | 'dark') => {\n    try {\n      setTheme(themeValue)\n      Cookie.set(COOKIE_THEME_KEY, themeValue, { domain: THEME_DOMAIN })\n    } catch (err) {\n      // ignore set cookie error for perp theme\n    }\n  }\n\n  return { isDark: resolvedTheme === 'dark', theme, setTheme: handleSwitchTheme }\n}\n\nexport default useTheme\n","import { BSC_BLOCK_TIME } from 'config'\n\nexport const REWARD_RATE = 0.97\n\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\nexport const ROUND_BUFFER = BSC_BLOCK_TIME * 3\n\nexport const PAST_ROUND_COUNT = 5\nexport const FUTURE_ROUND_COUNT = 2\n\nexport const ROUNDS_PER_PAGE = 200\nexport const LEADERBOARD_MIN_ROUNDS_PLAYED = 10\n","import { UserResponse, BetResponse, HistoricalBetResponse, RoundResponse } from './responseType'\n\nexport interface UserResponseBNB extends UserResponse<BetResponseBNB> {\n  totalBNB: string\n  totalBNBBull: string\n  totalBNBBear: string\n  averageBNB: string\n  totalBNBClaimed: string\n  netBNB: string\n}\n\nexport interface BetResponseBNB extends BetResponse {\n  claimedBNB: string\n  claimedNetBNB: string\n  user?: UserResponseBNB\n  round?: RoundResponseBNB\n}\n\nexport type HistoricalBetResponseBNB = HistoricalBetResponse<UserResponseBNB>\n\nexport type RoundResponseBNB = RoundResponse<BetResponseBNB>\n\nexport interface TotalWonMarketResponseBNB {\n  totalBNB: string\n  totalBNBTreasury: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const roundBaseFields = `\n  id\n  epoch\n  position\n  failed\n  startAt\n  startBlock\n  startHash\n  lockAt\n  lockBlock\n  lockHash\n  lockPrice\n  lockRoundId\n  closeAt\n  closeBlock\n  closeHash\n  closePrice\n  closeRoundId\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n`\n\nexport const betBaseFields = `\n id\n hash  \n amount\n position\n claimed\n claimedAt\n claimedHash\n claimedBlock\n claimedBNB\n claimedNetBNB\n createdAt\n updatedAt\n`\n\nexport const userBaseFields = `\n  id\n  createdAt\n  updatedAt\n  block\n  totalBets\n  totalBetsBull\n  totalBetsBear\n  totalBNB\n  totalBNBBull\n  totalBNBBear\n  totalBetsClaimed\n  totalBNBClaimed\n  winRate\n  averageBNB\n  netBNB\n`\n","import { UserResponse, BetResponse, HistoricalBetResponse, RoundResponse } from './responseType'\n\nexport interface UserResponseCAKE extends UserResponse<BetResponseCAKE> {\n  totalCAKE: string\n  totalCAKEBull: string\n  totalCAKEBear: string\n  averageCAKE: string\n  totalCAKEClaimed: string\n  netCAKE: string\n}\n\nexport interface BetResponseCAKE extends BetResponse {\n  claimedCAKE: string\n  claimedNetCAKE: string\n  user?: UserResponseCAKE\n  round?: RoundResponseCAKE\n}\n\nexport type HistoricalBetResponseCAKE = HistoricalBetResponse<UserResponseCAKE>\n\nexport type RoundResponseCAKE = RoundResponse<BetResponseCAKE>\n\nexport interface TotalWonMarketResponseCAKE {\n  totalCAKE: string\n  totalCAKETreasury: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const roundBaseFields = `\n  id\n  epoch\n  position\n  failed\n  startAt\n  startBlock\n  startHash\n  lockAt\n  lockBlock\n  lockHash\n  lockPrice\n  lockRoundId\n  closeAt\n  closeBlock\n  closeHash\n  closePrice\n  closeRoundId\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n`\n\nexport const betBaseFields = `\n id\n hash  \n amount\n position\n claimed\n claimedAt\n claimedHash\n claimedBlock\n claimedCAKE\n claimedNetCAKE\n createdAt\n updatedAt\n`\n\nexport const userBaseFields = `\n  id\n  createdAt\n  updatedAt\n  block\n  totalBets\n  totalBetsBull\n  totalBetsBear\n  totalCAKE\n  totalCAKEBull\n  totalCAKEBear\n  totalBetsClaimed\n  totalCAKEClaimed\n  winRate\n  averageCAKE\n  netCAKE\n`\n","import {\n  roundBaseFields as roundBaseFieldsBNB,\n  betBaseFields as betBaseFieldsBNB,\n  userBaseFields as userBaseFieldsBNB,\n} from './bnbQueries'\nimport {\n  roundBaseFields as roundBaseFieldsCAKE,\n  betBaseFields as betBaseFieldsCAKE,\n  userBaseFields as userBaseFieldsCAKE,\n} from './cakeQueries'\n\nexport const getRoundBaseFields = (tokenSymbol: string) =>\n  tokenSymbol === 'CAKE' ? roundBaseFieldsCAKE : roundBaseFieldsBNB\n\nexport const getBetBaseFields = (tokenSymbol: string) => (tokenSymbol === 'CAKE' ? betBaseFieldsCAKE : betBaseFieldsBNB)\n\nexport const getUserBaseFields = (tokenSymbol: string) =>\n  tokenSymbol === 'CAKE' ? userBaseFieldsCAKE : userBaseFieldsBNB\n","const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport default numberOrNull\n","import { Bet, BetPosition, Round, PredictionUser } from 'state/types'\nimport numberOrNull from 'utils/numberOrNull'\n\nimport { RoundResponseCAKE } from './cakeQueries'\n\nconst getRoundPosition = (positionResponse: string) => {\n  if (positionResponse === 'Bull') {\n    return BetPosition.BULL\n  }\n\n  if (positionResponse === 'Bear') {\n    return BetPosition.BEAR\n  }\n\n  if (positionResponse === 'House') {\n    return BetPosition.HOUSE\n  }\n\n  return null\n}\n\nexport const transformBetResponseCAKE = (betResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    block: numberOrNull(betResponse.block),\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedAt: numberOrNull(betResponse.claimedAt),\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\n    claimedHash: betResponse.claimedHash,\n    claimedBNB: betResponse.claimedCAKE ? parseFloat(betResponse.claimedCAKE) : 0,\n    claimedNetBNB: betResponse.claimedNetCAKE ? parseFloat(betResponse.claimedNetCAKE) : 0,\n    createdAt: numberOrNull(betResponse.createdAt),\n    updatedAt: numberOrNull(betResponse.updatedAt),\n  } as Bet\n\n  if (betResponse.user) {\n    bet.user = transformUserResponseCAKE(betResponse.user)\n  }\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponseCAKE(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformUserResponseCAKE = (userResponse): PredictionUser => {\n  const {\n    id,\n    createdAt,\n    updatedAt,\n    block,\n    totalBets,\n    totalBetsBull,\n    totalBetsBear,\n    totalCAKE,\n    totalCAKEBull,\n    totalCAKEBear,\n    totalBetsClaimed,\n    totalCAKEClaimed,\n    winRate,\n    averageCAKE,\n    netCAKE,\n  } = userResponse || {}\n\n  return {\n    id,\n    createdAt: numberOrNull(createdAt),\n    updatedAt: numberOrNull(updatedAt),\n    block: numberOrNull(block),\n    totalBets: numberOrNull(totalBets),\n    totalBetsBull: numberOrNull(totalBetsBull),\n    totalBetsBear: numberOrNull(totalBetsBear),\n    totalBNB: totalCAKE ? parseFloat(totalCAKE) : 0,\n    totalBNBBull: totalCAKEBull ? parseFloat(totalCAKEBull) : 0,\n    totalBNBBear: totalCAKEBear ? parseFloat(totalCAKEBear) : 0,\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\n    totalBNBClaimed: totalCAKEClaimed ? parseFloat(totalCAKEClaimed) : 0,\n    winRate: winRate ? parseFloat(winRate) : 0,\n    averageBNB: averageCAKE ? parseFloat(averageCAKE) : 0,\n    netBNB: netCAKE ? parseFloat(netCAKE) : 0,\n  }\n}\n\nexport const transformRoundResponseCAKE = (roundResponse: RoundResponseCAKE): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    position,\n    startAt,\n    startBlock,\n    startHash,\n    lockAt,\n    lockBlock,\n    lockHash,\n    lockPrice,\n    lockRoundId,\n    closeAt,\n    closeBlock,\n    closeHash,\n    closePrice,\n    closeRoundId,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bullAmount,\n    bearBets,\n    bearAmount,\n    bets = [],\n  } = roundResponse\n\n  return {\n    id,\n    failed,\n    startHash,\n    lockHash,\n    lockRoundId,\n    closeRoundId,\n    closeHash,\n    position: getRoundPosition(position),\n    epoch: numberOrNull(epoch),\n    startAt: numberOrNull(startAt),\n    startBlock: numberOrNull(startBlock),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n    closeAt: numberOrNull(closeAt),\n    closeBlock: numberOrNull(closeBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n    bearBets: numberOrNull(bearBets),\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n    bets: bets.map(transformBetResponseCAKE),\n  }\n}\n","import { Bet, BetPosition, Round, PredictionUser } from 'state/types'\nimport numberOrNull from 'utils/numberOrNull'\nimport { RoundResponseBNB } from './bnbQueries'\n\nconst getRoundPosition = (positionResponse: string) => {\n  if (positionResponse === 'Bull') {\n    return BetPosition.BULL\n  }\n\n  if (positionResponse === 'Bear') {\n    return BetPosition.BEAR\n  }\n\n  if (positionResponse === 'House') {\n    return BetPosition.HOUSE\n  }\n\n  return null\n}\n\nexport const transformBetResponseBNB = (betResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    block: numberOrNull(betResponse.block),\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedAt: numberOrNull(betResponse.claimedAt),\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\n    claimedHash: betResponse.claimedHash,\n    claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\n    claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\n    createdAt: numberOrNull(betResponse.createdAt),\n    updatedAt: numberOrNull(betResponse.updatedAt),\n  } as Bet\n\n  if (betResponse.user) {\n    bet.user = transformUserResponseBNB(betResponse.user)\n  }\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponseBNB(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformUserResponseBNB = (userResponse): PredictionUser => {\n  const {\n    id,\n    createdAt,\n    updatedAt,\n    block,\n    totalBets,\n    totalBetsBull,\n    totalBetsBear,\n    totalBNB,\n    totalBNBBull,\n    totalBNBBear,\n    totalBetsClaimed,\n    totalBNBClaimed,\n    winRate,\n    averageBNB,\n    netBNB,\n  } = userResponse || {}\n\n  return {\n    id,\n    createdAt: numberOrNull(createdAt),\n    updatedAt: numberOrNull(updatedAt),\n    block: numberOrNull(block),\n    totalBets: numberOrNull(totalBets),\n    totalBetsBull: numberOrNull(totalBetsBull),\n    totalBetsBear: numberOrNull(totalBetsBear),\n    totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\n    totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\n    totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\n    totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\n    winRate: winRate ? parseFloat(winRate) : 0,\n    averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\n    netBNB: netBNB ? parseFloat(netBNB) : 0,\n  }\n}\n\nexport const transformRoundResponseBNB = (roundResponse: RoundResponseBNB): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    position,\n    startAt,\n    startBlock,\n    startHash,\n    lockAt,\n    lockBlock,\n    lockHash,\n    lockPrice,\n    lockRoundId,\n    closeAt,\n    closeBlock,\n    closeHash,\n    closePrice,\n    closeRoundId,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bullAmount,\n    bearBets,\n    bearAmount,\n    bets = [],\n  } = roundResponse\n\n  return {\n    id,\n    failed,\n    startHash,\n    lockHash,\n    lockRoundId,\n    closeRoundId,\n    closeHash,\n    position: getRoundPosition(position),\n    epoch: numberOrNull(epoch),\n    startAt: numberOrNull(startAt),\n    startBlock: numberOrNull(startBlock),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n    closeAt: numberOrNull(closeAt),\n    closeBlock: numberOrNull(closeBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n    bearBets: numberOrNull(bearBets),\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n    bets: bets.map(transformBetResponseBNB),\n  }\n}\n","import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION_BNB, GRAPH_API_PREDICTION_CAKE } from 'config/constants/endpoints'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Bet,\n  LedgerData,\n  BetPosition,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeLedger,\n  ReduxNodeRound,\n  RoundData,\n  HistoryFilter,\n} from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport { Zero } from '@ethersproject/constants'\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\nimport { getRoundBaseFields, getBetBaseFields, getUserBaseFields } from './queries'\nimport { ROUNDS_PER_PAGE } from './config'\nimport { transformBetResponseCAKE, transformUserResponseCAKE } from './cakeTransformers'\nimport { transformBetResponseBNB, transformUserResponseBNB } from './bnbTransformers'\nimport { BetResponse, UserResponse } from './responseType'\nimport { BetResponseBNB } from './bnbQueries'\nimport { BetResponseCAKE } from './cakeQueries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  HOUSE = 'house',\n  LIVE = 'live',\n}\n\nexport const transformBetResponse = (tokenSymbol) =>\n  tokenSymbol === 'CAKE' ? transformBetResponseCAKE : transformBetResponseBNB\n\nexport const transformUserResponse = (tokenSymbol) =>\n  tokenSymbol === 'CAKE' ? transformUserResponseCAKE : transformUserResponseBNB\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n\n  if (bet.round.position === BetPosition.HOUSE) {\n    return Result.HOUSE\n  }\n\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\nexport const getFilteredBets = (bets: Bet[], filter: HistoryFilter) => {\n  switch (filter) {\n    case HistoryFilter.COLLECTED:\n      return bets.filter((bet) => bet.claimed === true)\n    case HistoryFilter.UNCOLLECTED:\n      return bets.filter((bet) => {\n        return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n      })\n    case HistoryFilter.ALL:\n    default:\n      return bets\n  }\n}\n\nconst getTotalWonMarket = (market, tokenSymbol) => {\n  const total = market[`total${tokenSymbol}`] ? parseFloat(market[`total${tokenSymbol}`]) : 0\n  const totalTreasury = market[`total${tokenSymbol}Treasury`] ? parseFloat(market[`total${tokenSymbol}Treasury`]) : 0\n\n  return Math.max(total - totalTreasury, 0)\n}\n\nexport const getTotalWon = async (): Promise<{ totalWonBNB: number; totalWonCAKE: number }> => {\n  const [{ market: BNBMarket, market: CAKEMarket }] = await Promise.all([\n    request(\n      GRAPH_API_PREDICTION_BNB,\n      gql`\n        query getTotalWonData {\n          market(id: 1) {\n            totalBNB\n            totalBNBTreasury\n          }\n        }\n      `,\n    ),\n    request(\n      GRAPH_API_PREDICTION_CAKE,\n      gql`\n        query getTotalWonData {\n          market(id: 1) {\n            totalCAKE\n            totalCAKETreasury\n          }\n        }\n      `,\n    ),\n  ])\n\n  const totalWonBNB = getTotalWonMarket(BNBMarket, 'BNB')\n  const totalWonCAKE = getTotalWonMarket(CAKEMarket, 'CAKE')\n\n  return { totalWonBNB, totalWonCAKE }\n}\n\ntype WhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: WhereClause = {},\n  first = 1000,\n  skip = 0,\n  api: string,\n  tokenSymbol: string,\n): Promise<Array<BetResponseBNB | BetResponseCAKE>> => {\n  const response = await request(\n    api,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\n          ${getBetBaseFields(tokenSymbol)}\n          round {\n            ${getRoundBaseFields(tokenSymbol)}\n          }\n          user {\n            ${getUserBaseFields(tokenSymbol)}\n          }\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getLedgerData = async (account: string, epochs: number[], address: string) => {\n  const ledgerCalls = epochs.map((epoch) => ({\n    address,\n    name: 'ledger',\n    params: [epoch, account],\n  }))\n  const response = await multicallv2<PredictionsLedgerResponse[]>({ abi: predictionsAbi, calls: ledgerCalls })\n  return response\n}\n\nexport const LEADERBOARD_RESULTS_PER_PAGE = 20\n\ninterface GetPredictionUsersOptions {\n  skip?: number\n  first?: number\n  orderBy?: string\n  orderDir?: string\n  where?: WhereClause\n}\n\nconst defaultPredictionUserOptions = {\n  skip: 0,\n  first: LEADERBOARD_RESULTS_PER_PAGE,\n  orderBy: 'createdAt',\n  orderDir: 'desc',\n}\n\nexport const getHasRoundFailed = (oracleCalled: boolean, closeTimestamp: number, buffer: number) => {\n  if (!oracleCalled) {\n    const closeTimestampMs = (closeTimestamp + buffer) * 1000\n    if (Number.isFinite(closeTimestampMs)) {\n      return Date.now() > closeTimestampMs\n    }\n  }\n\n  return false\n}\n\nexport const getPredictionUsers = async (\n  options: GetPredictionUsersOptions = {},\n  api: string,\n  tokenSymbol: string,\n): Promise<UserResponse<BetResponse>[]> => {\n  const { first, skip, where, orderBy, orderDir } = { ...defaultPredictionUserOptions, ...options }\n  const response = await request(\n    api,\n    gql`\n      query getUsers($first: Int!, $skip: Int!, $where: User_filter, $orderBy: User_orderBy, $orderDir: OrderDirection) {\n        users(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDir) {\n          ${getUserBaseFields(tokenSymbol)}\n        }\n      }\n    `,\n    { first, skip, where, orderBy, orderDir },\n  )\n  return response.users\n}\n\nexport const getPredictionUser = async (\n  account: string,\n  api: string,\n  tokenSymbol: string,\n): Promise<UserResponse<BetResponse>> => {\n  const response = await request(\n    api,\n    gql`\n      query getUser($id: ID!) {\n        user(id: $id) {\n          ${getUserBaseFields(tokenSymbol)}\n        }\n      }\n  `,\n    {\n      id: account.toLowerCase(),\n    },\n  )\n  return response.user\n}\n\nexport const getClaimStatuses = async (\n  account: string,\n  epochs: number[],\n  address: string,\n): Promise<PredictionsState['claimableStatuses']> => {\n  const claimableCalls = epochs.map((epoch) => ({\n    address,\n    name: 'claimable',\n    params: [epoch, account],\n  }))\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>({\n    abi: predictionsAbi,\n    calls: claimableCalls,\n  })\n\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\n    const epoch = epochs[index]\n    const [claimable] = claimableResponse\n\n    return {\n      ...accum,\n      [epoch]: claimable,\n    }\n  }, {})\n}\n\nexport type MarketData = Pick<PredictionsState, 'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount'>\nexport const getPredictionData = async (address: string): Promise<MarketData> => {\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused'].map((method) => ({\n    address,\n    name: method,\n  }))\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused]] = await multicallv2({\n    abi: predictionsAbi,\n    calls: staticCalls,\n  })\n\n  return {\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: currentEpoch.toNumber(),\n    intervalSeconds: intervalSeconds.toNumber(),\n    minBetAmount: minBetAmount.toString(),\n  }\n}\n\nexport const getRoundsData = async (epochs: number[], address: string): Promise<PredictionsRoundsResponse[]> => {\n  const calls = epochs.map((epoch) => ({\n    address,\n    name: 'rounds',\n    params: [epoch],\n  }))\n  const response = await multicallv2<PredictionsRoundsResponse[]>({ abi: predictionsAbi, calls })\n  return response\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\n  return {\n    epoch,\n    startTimestamp,\n    lockTimestamp: null,\n    closeTimestamp: null,\n    lockPrice: null,\n    closePrice: null,\n    totalAmount: Zero.toJSON(),\n    bullAmount: Zero.toJSON(),\n    bearAmount: Zero.toJSON(),\n    rewardBaseCalAmount: Zero.toJSON(),\n    rewardAmount: Zero.toJSON(),\n    oracleCalled: false,\n    lockOracleId: null,\n    closeOracleId: null,\n  }\n}\n\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.epoch.toString()]: round,\n    }\n  }, {})\n}\n\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\n  amount: ledgerResponse.amount.toJSON(),\n  claimed: ledgerResponse.claimed,\n})\n\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\n  return ledgers.reduce((accum, ledgerResponse, index) => {\n    if (!ledgerResponse) {\n      return accum\n    }\n\n    // If the amount is zero that means the user did not bet\n    if (ledgerResponse.amount.eq(0)) {\n      return accum\n    }\n\n    const epoch = epochs[index].toString()\n\n    return {\n      ...accum,\n      [account]: {\n        ...accum[account],\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\n      },\n    }\n  }, {})\n}\n\n/**\n * Serializes the return from the \"rounds\" call for redux\n */\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\n  const {\n    epoch,\n    startTimestamp,\n    lockTimestamp,\n    closeTimestamp,\n    lockPrice,\n    closePrice,\n    totalAmount,\n    bullAmount,\n    bearAmount,\n    rewardBaseCalAmount,\n    rewardAmount,\n    oracleCalled,\n    lockOracleId,\n    closeOracleId,\n  } = response\n\n  return {\n    oracleCalled,\n    epoch: epoch.toNumber(),\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\n    totalAmount: totalAmount.toJSON(),\n    bullAmount: bullAmount.toJSON(),\n    bearAmount: bearAmount.toJSON(),\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\n    rewardAmount: rewardAmount.toJSON(),\n    lockOracleId: lockOracleId.toString(),\n    closeOracleId: closeOracleId.toString(),\n  }\n}\n\n/**\n * Parse serialized values back into BigNumber\n * BigNumber values are stored with the \"toJSON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\n  return Object.keys(data).reduce((accum, key) => {\n    const value = data[key]\n\n    if (value && value?.type === 'BigNumber') {\n      return {\n        ...accum,\n        [key]: BigNumber.from(value),\n      }\n    }\n\n    return {\n      ...accum,\n      [key]: value,\n    }\n  }, {}) as K\n}\n\nexport const fetchUsersRoundsLength = async (account: string, address: string) => {\n  try {\n    const contract = getPredictionsContract(address)\n    const length = await contract.getUserRoundsLength(account)\n    return length\n  } catch {\n    return Zero\n  }\n}\n\n/**\n * Fetches rounds a user has participated in\n */\nexport const fetchUserRounds = async (\n  account: string,\n  cursor = 0,\n  size = ROUNDS_PER_PAGE,\n  address,\n): Promise<{ [key: string]: ReduxNodeLedger }> => {\n  const contract = getPredictionsContract(address)\n\n  try {\n    const [rounds, ledgers] = await contract.getUserRounds(account, cursor, size)\n\n    return rounds.reduce((accum, round, index) => {\n      return {\n        ...accum,\n        [round.toString()]: serializePredictionsLedgerResponse(ledgers[index] as PredictionsLedgerResponse),\n      }\n    }, {})\n  } catch {\n    // When the results run out the contract throws an error.\n    return null\n  }\n}\n","import { createSelectorHook } from 'react-redux'\nimport { LocalContext } from './Provider'\n\nconst useSelector = createSelectorHook(LocalContext)\n\nexport default useSelector\n","import { BigNumber } from '@ethersproject/bignumber'\nimport orderBy from 'lodash/orderBy'\nimport { createSelector } from '@reduxjs/toolkit'\nimport { PredictionsState, ReduxNodeRound, NodeRound, ReduxNodeLedger, NodeLedger } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nconst selectCurrentEpoch = (state: PredictionsState) => state.currentEpoch\nconst selectRounds = (state: PredictionsState) => state.rounds\nconst selectLedgers = (state: PredictionsState) => state.ledgers\nconst selectClaimableStatuses = (state: PredictionsState) => state.claimableStatuses\nconst selectMinBetAmount = (state: PredictionsState) => state.minBetAmount\nconst selectIntervalSeconds = (state: PredictionsState) => state.intervalSeconds\n\nexport const makeGetBetByEpochSelector = (account: string, epoch: number) =>\n  createSelector([selectLedgers], (bets) => {\n    if (!bets[account]) {\n      return null\n    }\n\n    if (!bets[account][epoch]) {\n      return null\n    }\n\n    return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n  })\n\nexport const makeGetIsClaimableSelector = (epoch: number) =>\n  createSelector([selectClaimableStatuses], (claimableStatuses) => {\n    return claimableStatuses[epoch] || false\n  })\n\nexport const getRoundsByCloseOracleIdSelector = createSelector([selectRounds], (rounds) => {\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    const parsed = parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch])\n    return {\n      ...accum,\n      [parsed.closeOracleId]: parsed,\n    }\n  }, {}) as { [key: string]: NodeRound }\n})\n\nexport const getBigNumberRounds = createSelector([selectRounds], (rounds) => {\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n})\n\nexport const getSortedRoundsSelector = createSelector([getBigNumberRounds], (rounds) => {\n  return orderBy(Object.values(rounds), ['epoch'], ['asc'])\n})\n\nexport const getSortedRoundsCurrentEpochSelector = createSelector(\n  [selectCurrentEpoch, getSortedRoundsSelector],\n  (currentEpoch, sortedRounds) => {\n    return {\n      currentEpoch,\n      rounds: sortedRounds,\n    }\n  },\n)\n\nexport const getMinBetAmountSelector = createSelector([selectMinBetAmount], BigNumber.from)\n\nexport const getCurrentRoundCloseTimestampSelector = createSelector(\n  [selectCurrentEpoch, getBigNumberRounds, selectIntervalSeconds],\n  (currentEpoch, rounds, intervalSeconds) => {\n    if (!currentEpoch) {\n      return undefined\n    }\n\n    const currentRound = rounds[currentEpoch - 1]\n\n    if (!currentRound) {\n      return undefined\n    }\n\n    if (!currentRound.closeTimestamp) {\n      return currentRound.lockTimestamp + intervalSeconds\n    }\n    return currentRound.closeTimestamp\n  },\n)\n","import { useEffect, useMemo } from 'react'\nimport { isAddress } from 'utils'\nimport useLocalDispatch from 'contexts/LocalRedux/useLocalDispatch'\nimport useSelector from 'contexts/LocalRedux/useSelector'\nimport { FetchStatus } from 'config/constants/types'\n\nimport { PredictionsState, PredictionUser } from '../types'\nimport { fetchAddressResult } from '.'\nimport {\n  getRoundsByCloseOracleIdSelector,\n  getSortedRoundsSelector,\n  makeGetBetByEpochSelector,\n  makeGetIsClaimableSelector,\n  getMinBetAmountSelector,\n  getSortedRoundsCurrentEpochSelector,\n  getCurrentRoundCloseTimestampSelector,\n} from './selectors'\n\nexport const useGetRoundsByCloseOracleId = () => {\n  return useSelector(getRoundsByCloseOracleIdSelector)\n}\n\nexport const useGetSortedRounds = () => {\n  return useSelector(getSortedRoundsSelector)\n}\n\nexport const useGetSortedRoundsCurrentEpoch = () => {\n  return useSelector(getSortedRoundsCurrentEpochSelector)\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const getBetByEpochSelector = useMemo(() => makeGetBetByEpochSelector(account, epoch), [account, epoch])\n  return useSelector(getBetByEpochSelector)\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const getIsClaimableSelector = useMemo(() => makeGetIsClaimableSelector(epoch), [epoch])\n  return useSelector(getIsClaimableSelector)\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: PredictionsState) => state.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: PredictionsState) => state.isChartPaneOpen)\n}\n\nexport const useChartView = () => {\n  return useSelector((state: PredictionsState) => state.chartView)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: PredictionsState) => state.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: PredictionsState) => state.intervalSeconds)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: PredictionsState) => state.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: PredictionsState) => state.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: PredictionsState) => state.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: PredictionsState) => state.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  return useSelector(getMinBetAmountSelector)\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: PredictionsState) => state.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: PredictionsState) => state.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: PredictionsState) => state.history)\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundCloseTimestamp = () => {\n  return useSelector(getCurrentRoundCloseTimestampSelector)\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = (): FetchStatus => {\n  return useSelector((state: PredictionsState) => state.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: PredictionsState) => state.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: PredictionsState) => state.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: PredictionsState) => state.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: PredictionsState) => state.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: PredictionsState) => state.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string): PredictionUser => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useLocalDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = (): string => {\n  return useSelector((state: PredictionsState) => state.leaderboard.selectedAddress)\n}\n\n// Because Modal Component is rendered outside the Prediction Page contexts\n// We have to pass local state as props instead of retrieving directly in component\nexport const useStatModalProps = (account?: string) => {\n  const selectedAddress = useGetSelectedAddress()\n  const address = account || selectedAddress\n  const result = useGetOrFetchLeaderboardAddressResult(address)\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n\n  return {\n    address,\n    result,\n    leaderboardLoadingState,\n  }\n}\n\nexport const useCollectWinningModalProps = () => {\n  const isLoadingHistory = useGetIsFetchingHistory()\n  const history = useGetHistory()\n\n  return {\n    isLoadingHistory,\n    history,\n  }\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport range from 'lodash/range'\nimport pickBy from 'lodash/pickBy'\nimport {\n  Bet,\n  LedgerData,\n  HistoryFilter,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeRound,\n  BetPosition,\n  PredictionUser,\n  LeaderboardFilter,\n  PredictionsChartView,\n  PredictionConfig,\n} from 'state/types'\nimport { FetchStatus } from 'config/constants/types'\nimport {\n  FUTURE_ROUND_COUNT,\n  LEADERBOARD_MIN_ROUNDS_PLAYED,\n  PAST_ROUND_COUNT,\n  ROUNDS_PER_PAGE,\n  ROUND_BUFFER,\n} from './config'\nimport {\n  getBetHistory,\n  transformBetResponse,\n  makeFutureRoundResponse,\n  makeRoundData,\n  getRoundsData,\n  getPredictionData,\n  getLedgerData,\n  makeLedgerData,\n  serializePredictionsRoundsResponse,\n  getClaimStatuses,\n  fetchUsersRoundsLength,\n  fetchUserRounds,\n  getPredictionUsers,\n  transformUserResponse,\n  LEADERBOARD_RESULTS_PER_PAGE,\n  getPredictionUser,\n  getHasRoundFailed,\n} from './helpers'\nimport { resetUserState } from '../global/actions'\n\nexport const initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  chartView: PredictionsChartView.Chainlink,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  intervalSeconds: 300,\n  minBetAmount: '10000000000000',\n  bufferSeconds: 60,\n  rounds: {},\n  history: [],\n  totalHistory: 0,\n  currentHistoryPage: 1,\n  hasHistoryLoaded: false,\n  ledgers: {},\n  claimableStatuses: {},\n  leaderboard: {\n    selectedAddress: null,\n    loadingState: FetchStatus.Idle,\n    filters: {\n      address: null,\n      orderBy: 'totalBets',\n      timePeriod: 'all',\n    },\n    skip: 0,\n    hasMoreResults: true,\n    addressResults: {},\n    results: [],\n  },\n}\n\n// Thunks\ntype PredictionInitialization = Pick<\n  PredictionsState,\n  'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount' | 'rounds' | 'ledgers' | 'claimableStatuses'\n>\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string, { extra: PredictionConfig }>(\n  'predictions/initialize',\n  async (account = null, { extra }) => {\n    // Static values\n    const marketData = await getPredictionData(extra.address)\n    const epochs =\n      marketData.currentEpoch > PAST_ROUND_COUNT\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\n        : [marketData.currentEpoch]\n\n    // Round data\n    const roundsResponse = await getRoundsData(epochs, extra.address)\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n\n    const initializedData = {\n      ...marketData,\n      rounds: initialRoundData,\n      ledgers: {},\n      claimableStatuses: {},\n    }\n\n    if (!account) {\n      return initializedData\n    }\n\n    const [ledgerResponses, claimableStatuses] = await Promise.all([\n      getLedgerData(account, epochs, extra.address), // Bet data\n      getClaimStatuses(account, epochs, extra.address), // Claim statuses\n    ])\n\n    return merge({}, initializedData, {\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\n      claimableStatuses,\n    })\n  },\n)\n\nexport const fetchPredictionData = createAsyncThunk<PredictionInitialization, string, { extra: PredictionConfig }>(\n  'predictions/fetchPredictionData',\n  async (account = null, { extra }) => {\n    const { status, currentEpoch, intervalSeconds, minBetAmount } = await getPredictionData(extra.address)\n    const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n    const roundsResponse = await getRoundsData(liveCurrentAndRecent, extra.address)\n    const roundData = roundsResponse.reduce((accum, round) => {\n      if (!round) {\n        return accum\n      }\n\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n\n    const publicData = {\n      status,\n      currentEpoch,\n      intervalSeconds,\n      minBetAmount,\n      rounds: roundData,\n      ledgers: {},\n      claimableStatuses: {},\n    }\n\n    if (!account) {\n      return publicData\n    }\n\n    const epochs =\n      currentEpoch > PAST_ROUND_COUNT ? range(currentEpoch, currentEpoch - PAST_ROUND_COUNT) : [currentEpoch]\n\n    const [ledgerResponses, claimableStatuses] = await Promise.all([\n      getLedgerData(account, epochs, extra.address), // Bet data\n      getClaimStatuses(account, epochs, extra.address), // Claim statuses\n    ])\n\n    return merge({}, publicData, {\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\n      claimableStatuses,\n    })\n  },\n)\n\nexport const fetchLedgerData = createAsyncThunk<\n  LedgerData,\n  { account: string; epochs: number[] },\n  { extra: PredictionConfig }\n>('predictions/fetchLedgerData', async ({ account, epochs }, { extra }) => {\n  const ledgers = await getLedgerData(account, epochs, extra.address)\n  return makeLedgerData(account, ledgers, epochs)\n})\n\nexport const fetchHistory = createAsyncThunk<\n  { account: string; bets: Bet[] },\n  { account: string; claimed?: boolean },\n  { extra: PredictionConfig }\n>('predictions/fetchHistory', async ({ account, claimed }, { extra }) => {\n  const response = await getBetHistory(\n    {\n      user: account.toLowerCase(),\n      claimed,\n    },\n    undefined,\n    undefined,\n    extra.api,\n    extra.token.symbol,\n  )\n\n  const transformer = transformBetResponse(extra.token.symbol)\n\n  const bets = response.map(transformer)\n\n  return { account, bets }\n})\n\nexport const fetchNodeHistory = createAsyncThunk<\n  { bets: Bet[]; claimableStatuses: PredictionsState['claimableStatuses']; page?: number; totalHistory: number },\n  { account: string; page?: number },\n  { state: PredictionsState; extra: PredictionConfig }\n>('predictions/fetchNodeHistory', async ({ account, page = 1 }, { getState, extra }) => {\n  const userRoundsLength = await fetchUsersRoundsLength(account, extra.address)\n  const emptyResult = { bets: [], claimableStatuses: {}, totalHistory: userRoundsLength.toNumber() }\n  const maxPages = userRoundsLength.lte(ROUNDS_PER_PAGE) ? 1 : Math.ceil(userRoundsLength.toNumber() / ROUNDS_PER_PAGE)\n\n  if (userRoundsLength.eq(0)) {\n    return emptyResult\n  }\n\n  if (page > maxPages) {\n    return emptyResult\n  }\n\n  const cursor = userRoundsLength.sub(ROUNDS_PER_PAGE * page)\n\n  // If the page request is the final one we only want to retrieve the amount of rounds up to the next cursor.\n  const size =\n    maxPages === page\n      ? userRoundsLength\n          .sub(ROUNDS_PER_PAGE * (page - 1)) // Previous page's cursor\n          .toNumber()\n      : ROUNDS_PER_PAGE\n  const userRounds = await fetchUserRounds(account, cursor.lt(0) ? 0 : cursor.toNumber(), size, extra.address)\n\n  if (!userRounds) {\n    return emptyResult\n  }\n\n  const epochs = Object.keys(userRounds).map((epochStr) => Number(epochStr))\n  const [roundData, claimableStatuses] = await Promise.all([\n    getRoundsData(epochs, extra.address),\n    getClaimStatuses(account, epochs, extra.address),\n  ])\n\n  // No need getState().predictions in local redux state\n  const { bufferSeconds } = getState()\n\n  // Turn the data from the node into a Bet object that comes from the graph\n  const bets: Bet[] = roundData.reduce((accum, round) => {\n    const reduxRound = serializePredictionsRoundsResponse(round)\n    const ledger = userRounds[reduxRound.epoch]\n    const ledgerAmount = BigNumber.from(ledger.amount)\n    const closePrice = round.closePrice ? parseFloat(formatUnits(round.closePrice, 8)) : null\n    const lockPrice = round.lockPrice ? parseFloat(formatUnits(round.lockPrice, 8)) : null\n\n    const getRoundPosition = () => {\n      if (!closePrice) {\n        return null\n      }\n\n      if (round.closePrice.eq(round.lockPrice)) {\n        return BetPosition.HOUSE\n      }\n\n      return round.closePrice.gt(round.lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n    }\n\n    return [\n      ...accum,\n      {\n        id: null,\n        hash: null,\n        amount: parseFloat(formatUnits(ledgerAmount)),\n        position: ledger.position,\n        claimed: ledger.claimed,\n        claimedAt: null,\n        claimedHash: null,\n        claimedBNB: 0,\n        claimedNetBNB: 0,\n        createdAt: null,\n        updatedAt: null,\n        block: 0,\n        round: {\n          id: null,\n          epoch: round.epoch.toNumber(),\n          failed: getHasRoundFailed(reduxRound.oracleCalled, reduxRound.closeTimestamp, bufferSeconds),\n          startBlock: null,\n          startAt: round.startTimestamp ? round.startTimestamp.toNumber() : null,\n          startHash: null,\n          lockAt: round.lockTimestamp ? round.lockTimestamp.toNumber() : null,\n          lockBlock: null,\n          lockPrice,\n          lockHash: null,\n          lockRoundId: round.lockOracleId ? round.lockOracleId.toString() : null,\n          closeRoundId: round.closeOracleId ? round.closeOracleId.toString() : null,\n          closeHash: null,\n          closeAt: null,\n          closePrice,\n          closeBlock: null,\n          totalBets: 0,\n          totalAmount: parseFloat(formatUnits(round.totalAmount)),\n          bullBets: 0,\n          bullAmount: parseFloat(formatUnits(round.bullAmount)),\n          bearBets: 0,\n          bearAmount: parseFloat(formatUnits(round.bearAmount)),\n          position: getRoundPosition(),\n        },\n      },\n    ]\n  }, [])\n\n  return { bets, claimableStatuses, page, totalHistory: userRoundsLength.toNumber() }\n})\n\n// Leaderboard\nexport const filterLeaderboard = createAsyncThunk<\n  { results: PredictionUser[] },\n  { filters: LeaderboardFilter },\n  { extra: PredictionConfig }\n>('predictions/filterLeaderboard', async ({ filters }, { extra }) => {\n  const usersResponse = await getPredictionUsers(\n    {\n      skip: 0,\n      orderBy: filters.orderBy,\n      where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${filters.orderBy}_gt`]: 0 },\n    },\n    extra.api,\n    extra.token.symbol,\n  )\n\n  const transformer = transformUserResponse(extra.token.symbol)\n\n  return { results: usersResponse.map(transformer) }\n})\n\nexport const fetchAddressResult = createAsyncThunk<\n  { account: string; data: PredictionUser },\n  string,\n  { rejectValue: string; extra: PredictionConfig }\n>('predictions/fetchAddressResult', async (account, { rejectWithValue, extra }) => {\n  const userResponse = await getPredictionUser(account, extra.api, extra.token.symbol)\n\n  if (!userResponse) {\n    return rejectWithValue(account)\n  }\n\n  return { account, data: transformUserResponse(extra.token.symbol)(userResponse) }\n})\n\nexport const filterNextPageLeaderboard = createAsyncThunk<\n  { results: PredictionUser[]; skip: number },\n  number,\n  { state: PredictionsState; extra: PredictionConfig }\n>('predictions/filterNextPageLeaderboard', async (skip, { getState, extra }) => {\n  const state = getState()\n  const usersResponse = await getPredictionUsers(\n    {\n      skip,\n      orderBy: state.leaderboard.filters.orderBy,\n      where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${state.leaderboard.filters.orderBy}_gt`]: 0 },\n    },\n    extra.api,\n    extra.token.symbol,\n  )\n\n  const transformer = transformUserResponse(extra.token.symbol)\n\n  return { results: usersResponse.map(transformer), skip }\n})\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setLeaderboardFilter: (state, action: PayloadAction<Partial<LeaderboardFilter>>) => {\n      state.leaderboard.filters = {\n        ...state.leaderboard.filters,\n        ...action.payload,\n      }\n\n      // Anytime we filters change we need to reset back to page 1\n      state.leaderboard.skip = 0\n      state.leaderboard.hasMoreResults = true\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setChartView: (state, action: PayloadAction<PredictionsChartView>) => {\n      state.chartView = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    markAsCollected: (state, action: PayloadAction<{ [key: string]: boolean }>) => {\n      state.claimableStatuses = { ...state.claimableStatuses, ...action.payload }\n    },\n    setSelectedAddress: (state, action: PayloadAction<string>) => {\n      state.leaderboard.selectedAddress = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetUserState, (state) => {\n      state.claimableStatuses = {}\n      state.ledgers = {}\n      state.isFetchingHistory = false\n      state.history = []\n      state.hasHistoryLoaded = false\n      state.totalHistory = 0\n      state.currentHistoryPage = 1\n    })\n    // Leaderboard filter\n    builder.addCase(filterLeaderboard.pending, (state) => {\n      // Only mark as loading if we come from Fetched. This allows initialization.\n      if (state.leaderboard.loadingState === FetchStatus.Fetched) {\n        state.leaderboard.loadingState = FetchStatus.Fetching\n      }\n    })\n    builder.addCase(filterLeaderboard.fulfilled, (state, action) => {\n      const { results } = action.payload\n\n      state.leaderboard.loadingState = FetchStatus.Fetched\n      state.leaderboard.results = results\n\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\n        state.leaderboard.hasMoreResults = false\n      }\n\n      // Populate address results to reduce calls\n      state.leaderboard.addressResults = {\n        ...state.leaderboard.addressResults,\n        ...results.reduce((accum, result) => {\n          return {\n            ...accum,\n            [result.id]: result,\n          }\n        }, {}),\n      }\n    })\n\n    // Leaderboard account result\n    builder.addCase(fetchAddressResult.pending, (state) => {\n      state.leaderboard.loadingState = FetchStatus.Fetching\n    })\n    builder.addCase(fetchAddressResult.fulfilled, (state, action) => {\n      const { account, data } = action.payload\n      state.leaderboard.loadingState = FetchStatus.Fetched\n      state.leaderboard.addressResults[account] = data\n    })\n    builder.addCase(fetchAddressResult.rejected, (state, action) => {\n      state.leaderboard.loadingState = FetchStatus.Fetched // TODO: should handle error\n      state.leaderboard.addressResults[action.payload] = null\n    })\n\n    // Leaderboard next page\n    builder.addCase(filterNextPageLeaderboard.pending, (state) => {\n      state.leaderboard.loadingState = FetchStatus.Fetching\n    })\n    builder.addCase(filterNextPageLeaderboard.fulfilled, (state, action) => {\n      const { results, skip } = action.payload\n\n      state.leaderboard.loadingState = FetchStatus.Fetched\n      state.leaderboard.results = [...state.leaderboard.results, ...results]\n      state.leaderboard.skip = skip\n\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\n        state.leaderboard.hasMoreResults = false\n      }\n    })\n\n    // Ledger (bet) records\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\n      state.ledgers = merge({}, state.ledgers, action.payload)\n    })\n\n    // Get static market data\n    builder.addCase(fetchPredictionData.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, minBetAmount, rounds, claimableStatuses, ledgers } = action.payload\n\n      const allRoundData = merge({}, state.rounds, rounds)\n      let newRounds = pickBy(allRoundData, (value, key) => {\n        return Number(key) > state.currentEpoch - PAST_ROUND_COUNT\n      })\n\n      // If the round has change add a new future round\n      if (state.currentEpoch !== currentEpoch) {\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\n        const futureRound = makeFutureRoundResponse(\n          newestRound.epoch + 1,\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\n        )\n\n        newRounds = { ...newRounds, [futureRound.epoch]: futureRound }\n      }\n\n      state.status = status\n      state.currentEpoch = currentEpoch\n      state.intervalSeconds = intervalSeconds\n      state.minBetAmount = minBetAmount\n      state.claimableStatuses = merge({}, state.claimableStatuses, claimableStatuses)\n      state.ledgers = merge({}, state.ledgers, ledgers)\n      state.rounds = newRounds\n    })\n\n    // Initialize predictions\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, rounds, claimableStatuses, ledgers } = action.payload\n      const futureRounds: ReduxNodeRound[] = []\n      const currentRound = rounds[currentEpoch]\n\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\n      }\n\n      return {\n        ...state,\n        status,\n        currentEpoch,\n        intervalSeconds,\n        claimableStatuses,\n        ledgers,\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\n      }\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.history[account] = merge([], state.history[account] ?? [], bets)\n    })\n\n    // History from the node\n    builder.addCase(fetchNodeHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchNodeHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchNodeHistory.fulfilled, (state, action) => {\n      const { bets, claimableStatuses, page, totalHistory } = action.payload\n\n      state.isFetchingHistory = false\n      state.history = page === 1 ? bets : [...state.history, ...bets]\n      state.claimableStatuses = { ...state.claimableStatuses, ...claimableStatuses }\n      state.hasHistoryLoaded = state.history.length === totalHistory || bets.length === 0\n      state.totalHistory = totalHistory\n      state.currentHistoryPage = page\n    })\n  },\n})\n\n// Actions\nexport const {\n  setChartPaneState,\n  setChartView,\n  setHistoryFilter,\n  setHistoryPaneState,\n  markAsCollected,\n  setLeaderboardFilter,\n  setSelectedAddress,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n","import { createContext, useContext } from 'react'\nimport { PredictionConfig } from 'state/types'\n\nexport const ConfigContext = createContext<PredictionConfig>(null)\n\nexport function useConfig() {\n  return useContext(ConfigContext)\n}\n\nexport default function ConfigProvider({ children, config }) {\n  return <ConfigContext.Provider value={config}>{children}</ConfigContext.Provider>\n}\n","import { configureStore } from '@reduxjs/toolkit'\n\nexport default function makeStore(reducer, preloadedState = undefined, extraArgument) {\n  return configureStore({\n    reducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({\n        thunk: {\n          extraArgument,\n        },\n      }),\n    preloadedState,\n  })\n}\n","import addresses from 'config/constants/contracts'\n\nimport { GRAPH_API_PREDICTION_CAKE, GRAPH_API_PREDICTION_BNB } from 'config/constants/endpoints'\nimport { getAddress } from 'utils/addressHelpers'\nimport { bscTokens } from '@pancakeswap/tokens'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst DEFAULT_MIN_PRICE_USD_DISPLAYED = BigNumber.from(10000)\n\nexport default {\n  BNB: {\n    address: getAddress(addresses.predictionsBNB),\n    api: GRAPH_API_PREDICTION_BNB,\n    chainlinkOracleAddress: getAddress(addresses.chainlinkOracleBNB),\n    minPriceUsdDisplayed: DEFAULT_MIN_PRICE_USD_DISPLAYED,\n    displayedDecimals: 4,\n    token: bscTokens.bnb,\n  },\n  CAKE: {\n    address: getAddress(addresses.predictionsCAKE),\n    api: GRAPH_API_PREDICTION_CAKE,\n    chainlinkOracleAddress: getAddress(addresses.chainlinkOracleCAKE),\n    minPriceUsdDisplayed: DEFAULT_MIN_PRICE_USD_DISPLAYED,\n    displayedDecimals: 4,\n    token: bscTokens.cake,\n  },\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport LocalReduxProvider from 'contexts/LocalRedux/Provider'\nimport makeStore from 'contexts/LocalRedux/makeStore'\nimport { PredictionSupportedSymbol } from 'state/types'\nimport reducers, { initialState } from 'state/predictions'\nimport { useRouter } from 'next/router'\nimport _toUpper from 'lodash/toUpper'\nimport ConfigProvider from './ConfigProvider'\nimport configs from './config'\n\nconst PREDICTION_TOKEN_KEY = 'prediction-token'\n\nconst PredictionConfigProviders = ({ children }) => {\n  const { query } = useRouter()\n  const { token } = query\n  const [selectedToken, setConfig] = useState(() => {\n    const initToken = localStorage?.getItem(PREDICTION_TOKEN_KEY) as PredictionSupportedSymbol\n\n    if ([PredictionSupportedSymbol.BNB, PredictionSupportedSymbol.CAKE].includes(initToken)) {\n      return initToken\n    }\n\n    return PredictionSupportedSymbol.CAKE\n  })\n\n  useEffect(() => {\n    const upperToken = _toUpper(token as string) as PredictionSupportedSymbol\n\n    if ([PredictionSupportedSymbol.BNB, PredictionSupportedSymbol.CAKE].includes(upperToken)) {\n      setConfig(upperToken)\n      localStorage?.setItem(PREDICTION_TOKEN_KEY, upperToken)\n    }\n  }, [token])\n\n  const config = useMemo(() => {\n    return configs[selectedToken]\n  }, [selectedToken])\n\n  const store = useMemo(() => {\n    return makeStore(reducers, initialState, config)\n  }, [config])\n\n  return (\n    <ConfigProvider config={config}>\n      <LocalReduxProvider store={store}>{children}</LocalReduxProvider>\n    </ConfigProvider>\n  )\n}\n\nexport default PredictionConfigProviders\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M11 5V16.17L6.11997 11.29C5.72997 10.9 5.08997 10.9 4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7L11.29 19.29C11.68 19.68 12.31 19.68 12.7 19.29L19.29 12.7C19.68 12.31 19.68 11.68 19.29 11.29C18.9 10.9 18.27 10.9 17.88 11.29L13 16.17V5C13 4.45 12.55 4 12 4C11.45 4 11 4.45 11 5Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M13 19V7.83001L17.88 12.71C18.27 13.1 18.91 13.1 19.3 12.71C19.69 12.32 19.69 11.69 19.3 11.3L12.71 4.71001C12.32 4.32001 11.69 4.32001 11.3 4.71001L4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7C5.08997 13.09 5.71997 13.09 6.10997 12.7L11 7.83001V19C11 19.55 11.45 20 12 20C12.55 20 13 19.55 13 19Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.11997 9.29006L12 13.1701L15.88 9.29006C16.27 8.90006 16.9 8.90006 17.29 9.29006C17.68 9.68006 17.68 10.3101 17.29 10.7001L12.7 15.2901C12.31 15.6801 11.68 15.6801 11.29 15.2901L6.69997 10.7001C6.30997 10.3101 6.30997 9.68006 6.69997 9.29006C7.08997 8.91006 7.72997 8.90006 8.11997 9.29006Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M9.29006 15.88L13.1701 12L9.29006 8.12001C8.90006 7.73001 8.90006 7.10001 9.29006 6.71001C9.68006 6.32001 10.3101 6.32001 10.7001 6.71001L15.2901 11.3C15.6801 11.69 15.6801 12.32 15.2901 12.71L10.7001 17.3C10.3101 17.69 9.68006 17.69 9.29006 17.3C8.91006 16.91 8.90006 16.27 9.29006 15.88Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<React.PropsWithChildren<SvgProps>> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M8.11997 14.7101L12 10.8301L15.88 14.7101C16.27 15.1001 16.9 15.1001 17.29 14.7101C17.68 14.3201 17.68 13.6901 17.29 13.3001L12.7 8.7101C12.31 8.3201 11.68 8.3201 11.29 8.7101L6.69997 13.3001C6.30997 13.6901 6.30997 14.3201 6.69997 14.7101C7.08997 15.0901 7.72997 15.1001 8.11997 14.7101Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n"],"names":["createContext","Provider","LocalContext","children","store","context","useContext","useCallback","_noop","useLocalDispatch","localContext","emptyFn","dispatch","Cookie","ThemeContext","StyledThemeContext","useTheme","useNextTheme","COOKIE_THEME_KEY","THEME_DOMAIN","resolvedTheme","setTheme","theme","handleSwitchTheme","themeValue","set","domain","err","isDark","BSC_BLOCK_TIME","REWARD_RATE","ROUND_BUFFER","PAST_ROUND_COUNT","FUTURE_ROUND_COUNT","ROUNDS_PER_PAGE","LEADERBOARD_MIN_ROUNDS_PLAYED","roundBaseFields","betBaseFields","userBaseFields","roundBaseFieldsBNB","betBaseFieldsBNB","userBaseFieldsBNB","roundBaseFieldsCAKE","betBaseFieldsCAKE","userBaseFieldsCAKE","getRoundBaseFields","tokenSymbol","getBetBaseFields","getUserBaseFields","numberOrNull","value","valueNum","Number","isNaN","BetPosition","getRoundPosition","positionResponse","BULL","BEAR","HOUSE","transformBetResponseCAKE","betResponse","bet","id","hash","block","amount","parseFloat","position","claimed","claimedAt","claimedBlock","claimedHash","claimedBNB","claimedCAKE","claimedNetBNB","claimedNetCAKE","createdAt","updatedAt","user","transformUserResponseCAKE","round","transformRoundResponseCAKE","userResponse","totalBets","totalBetsBull","totalBetsBear","totalCAKE","totalCAKEBull","totalCAKEBear","totalBetsClaimed","totalCAKEClaimed","winRate","averageCAKE","netCAKE","totalBNB","totalBNBBull","totalBNBBear","totalBNBClaimed","averageBNB","netBNB","roundResponse","epoch","failed","startAt","startBlock","startHash","lockAt","lockBlock","lockHash","lockPrice","lockRoundId","closeAt","closeBlock","closeHash","closePrice","closeRoundId","totalAmount","bullBets","bullAmount","bearBets","bearAmount","bets","map","transformBetResponseBNB","transformUserResponseBNB","transformRoundResponseBNB","request","gql","GRAPH_API_PREDICTION_BNB","GRAPH_API_PREDICTION_CAKE","BigNumber","PredictionStatus","HistoryFilter","multicallv2","getPredictionsContract","predictionsAbi","Zero","Result","WIN","LOSE","CANCELED","LIVE","transformBetResponse","transformUserResponse","getRoundResult","currentEpoch","roundResultPosition","getFilteredBets","filter","COLLECTED","UNCOLLECTED","ALL","getTotalWonMarket","market","total","totalTreasury","Math","max","getTotalWon","BNBMarket","CAKEMarket","Promise","all","totalWonBNB","totalWonCAKE","getBetHistory","where","first","skip","api","response","getLedgerData","account","epochs","address","ledgerCalls","name","params","abi","calls","LEADERBOARD_RESULTS_PER_PAGE","defaultPredictionUserOptions","orderBy","orderDir","getHasRoundFailed","oracleCalled","closeTimestamp","buffer","closeTimestampMs","isFinite","Date","now","getPredictionUsers","options","users","getPredictionUser","toLowerCase","getClaimStatuses","claimableCalls","claimableResponses","reduce","accum","claimableResponse","index","claimable","getPredictionData","staticCalls","method","intervalSeconds","minBetAmount","paused","status","PAUSED","toNumber","toString","getRoundsData","makeFutureRoundResponse","startTimestamp","lockTimestamp","toJSON","rewardBaseCalAmount","rewardAmount","lockOracleId","closeOracleId","makeRoundData","rounds","serializePredictionsLedgerResponse","ledgerResponse","makeLedgerData","ledgers","eq","serializePredictionsRoundsResponse","parseBigNumberObj","data","Object","keys","key","type","from","fetchUsersRoundsLength","contract","length","getUserRoundsLength","fetchUserRounds","cursor","size","getUserRounds","createSelectorHook","useSelector","createSelector","selectCurrentEpoch","state","selectRounds","selectLedgers","selectClaimableStatuses","claimableStatuses","selectMinBetAmount","selectIntervalSeconds","makeGetBetByEpochSelector","makeGetIsClaimableSelector","getRoundsByCloseOracleIdSelector","parsed","getBigNumberRounds","getSortedRoundsSelector","values","getSortedRoundsCurrentEpochSelector","sortedRounds","getMinBetAmountSelector","getCurrentRoundCloseTimestampSelector","undefined","currentRound","useEffect","useMemo","isAddress","fetchAddressResult","useGetRoundsByCloseOracleId","useGetSortedRounds","useGetSortedRoundsCurrentEpoch","useGetBetByEpoch","getBetByEpochSelector","useGetIsClaimable","getIsClaimableSelector","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useChartView","chartView","useGetCurrentEpoch","useGetIntervalSeconds","useGetPredictionsStatus","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetMinBetAmount","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetCurrentRoundCloseTimestamp","useGetLeaderboardLoadingState","leaderboard","loadingState","useGetLeaderboardResults","results","useGetLeaderboardFilters","filters","useGetLeaderboardSkip","useGetLeaderboardHasMoreResults","hasMoreResults","useGetAddressResult","addressResults","useGetOrFetchLeaderboardAddressResult","addressResult","useGetSelectedAddress","selectedAddress","useStatModalProps","result","leaderboardLoadingState","useCollectWinningModalProps","isLoadingHistory","createAsyncThunk","createSlice","formatUnits","maxBy","merge","range","pickBy","PredictionsChartView","FetchStatus","resetUserState","initialState","INITIAL","Chainlink","isLoading","totalHistory","Idle","timePeriod","initializePredictions","extra","marketData","roundsResponse","initialRoundData","reduxNodeRound","initializedData","ledgerResponses","fetchPredictionData","liveCurrentAndRecent","roundData","publicData","fetchLedgerData","fetchHistory","token","symbol","transformer","fetchNodeHistory","page","getState","userRoundsLength","emptyResult","maxPages","lte","ceil","sub","userRounds","lt","epochStr","reduxRound","ledger","ledgerAmount","gt","filterLeaderboard","usersResponse","totalBets_gte","rejectWithValue","filterNextPageLeaderboard","predictionsSlice","reducers","setLeaderboardFilter","action","payload","setHistoryPaneState","setChartPaneState","setChartView","setHistoryFilter","markAsCollected","setSelectedAddress","extraReducers","builder","addCase","pending","Fetched","Fetching","fulfilled","rejected","allRoundData","newRounds","newestRound","futureRound","futureRounds","i","push","actions","reducer","ConfigContext","useConfig","ConfigProvider","config","configureStore","makeStore","preloadedState","extraArgument","middleware","getDefaultMiddleware","thunk","addresses","getAddress","bscTokens","DEFAULT_MIN_PRICE_USD_DISPLAYED","BNB","predictionsBNB","chainlinkOracleAddress","chainlinkOracleBNB","minPriceUsdDisplayed","displayedDecimals","bnb","CAKE","predictionsCAKE","chainlinkOracleCAKE","cake","useState","LocalReduxProvider","PredictionSupportedSymbol","useRouter","_toUpper","configs","PREDICTION_TOKEN_KEY","PredictionConfigProviders","query","selectedToken","setConfig","initToken","localStorage","getItem","includes","upperToken","setItem","React","Svg","Icon","props","viewBox","path","d"],"sourceRoot":""}