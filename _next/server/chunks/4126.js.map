{"version":3,"file":"4126.js","mappings":";;;;;;;;;;;;;;;;AAAA,8BAA8B,GAC9B,mCAAmC,GAEgC;AAC9C;AAC+B;AAEpD,MAAMG,kBAAkB,GAAG,IAAIF,4CAAG,CAAC;IAAEG,SAAS,EAAE,IAAI;CAAE,CAAC,CAACC,OAAO,CAACL,2EAAM,CAAC;AAEvE;;;CAGC,GACc,eAAeM,YAAY,CAACC,OAAe,EAAsB;IAC9E,MAAMC,IAAI,GAAaN,iFAAS,CAACK,OAAO,CAAC;IAEzC,IAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,EAAE,CAAE;QACpC,MAAME,GAAG,GAAGH,IAAI,CAACC,CAAC,CAAC;QACnB,MAAMG,MAAM,GAAGH,CAAC,KAAKD,IAAI,CAACE,MAAM,GAAG,CAAC;QACpC,IAAIG,QAAQ;QACZ,IAAI;YACFA,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;QAC7B,EAAE,OAAOI,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAER,OAAO,EAAEQ,KAAK,CAAC;YACrD,IAAIH,MAAM,EAAE,MAAM,IAAIK,KAAK,CAAC,CAAC,wBAAwB,EAAEV,OAAO,CAAC,CAAC,CAAC;YACjE,SAAQ;QACV,CAAC;QAED,IAAI,CAACM,QAAQ,CAACK,EAAE,EAAE;YAChB,IAAIN,MAAM,EAAE,MAAM,IAAIK,KAAK,CAAC,CAAC,wBAAwB,EAAEV,OAAO,CAAC,CAAC,CAAC;YACjE,SAAQ;QACV,CAAC;QAED,MAAMY,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAI,EAAE;QAClC,IAAI,CAAChB,kBAAkB,CAACgB,IAAI,CAAC,EAAE;YAC7B,MAAMC,gBAAgB,GACpBjB,kBAAkB,CAACkB,MAAM,EAAEC,MAAM,CAAS,CAACC,IAAI,EAAER,KAAK,GAAK;gBACzD,MAAMS,GAAG,GAAG,CAAC,EAAE,KAAM,CAASC,QAAQ,CAAC,CAAC,EAAEV,KAAK,CAACW,OAAO,IAAI,EAAE,CAAC,CAAC;gBAC/D,OAAOH,IAAI,CAACb,MAAM,GAAG,CAAC,GAAG,CAAC,EAAEa,IAAI,CAAC,EAAE,EAAEC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEA,GAAG,CAAC,CAAC;YACvD,CAAC,EAAE,EAAE,CAAC,IAAI,eAAe;YAC3B,MAAM,IAAIP,KAAK,CAAC,CAAC,8BAA8B,EAAEG,gBAAgB,CAAC,CAAC,CAAC;QACtE,CAAC;QACD,OAAOD,IAAI,CAAa;IAC1B,CAAC;IACD,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;AACpD,CAAC","sources":["webpack://web/../../packages/token-lists/src/getTokenList.ts"],"sourcesContent":["/* eslint-disable no-continue */\n/* eslint-disable no-await-in-loop */\nimport { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport uriToHttp from '@pancakeswap/utils/uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n */\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls: string[] = uriToHttp(listUrl)\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url)\n    } catch (error) {\n      console.error('Failed to fetch list', listUrl, error)\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${(error as any).dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'unknown error'\n      throw new Error(`Token list failed validation: ${validationErrors}`)\n    }\n    return json as TokenList\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n"],"names":["schema","Ajv","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","urls","i","length","url","isLast","response","fetch","error","console","Error","ok","json","validationErrors","errors","reduce","memo","add","dataPath","message"],"sourceRoot":""}