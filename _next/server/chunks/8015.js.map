{"version":3,"file":"8015.js","mappings":";;;;;;;;;;;;;;;;;;;AAAkE;AACrC;AACY;AAGzC,MAAMM,QAAQ,GAAG,CACfC,KAAsB,EACtBC,mBAAmB,GAAG,IAAI,EAC1BC,mBAAmB,GAAG,KAAK,EAC3BC,OAAO,GAAG,eAAe,GACF;IACvB,MAAM,EAAEC,MAAM,GAAEC,MAAM,GAAEC,SAAS,GAAEC,YAAY,GAAEC,SAAS,GAAEC,SAAS,GAAE,GAAGd,iDAAU,CAACG,4DAAO,CAAC;IAC7F,MAAMY,iBAAiB,GAAGhB,kDAAW,CAAC,IAAM;QAC1Cc,SAAS,CAACR,KAAK,EAAEG,OAAO,EAAEF,mBAAmB,CAAC,CAAC;IACjD,CAAC,EAAE;QAACD,KAAK;QAAEG,OAAO;QAAEK,SAAS;QAAEP,mBAAmB;KAAC,CAAC;IAEpD,qDAAqD;IACrD,+DAA+D;IAC/D,iGAAiG;IACjGL,gDAAS,CAAC,IAAM;QACd,uGAAuG;QACvG,IAAIM,mBAAmB,IAAIE,MAAM,IAAIC,MAAM,KAAKF,OAAO,EAAE;YACvD,MAAMQ,UAAU,GAAGd,iDAAG,CAACG,KAAK,EAAE,OAAO,CAAC;YACtC,MAAMY,aAAa,GAAGf,iDAAG,CAACS,SAAS,EAAE,OAAO,CAAC;YAC7C,mGAAmG;YACnG,sGAAsG;YACtG,uGAAuG;YACvG,qFAAqF;YACrF,0GAA0G;YAC1G,4CAA4C;YAC5C,IAAIK,UAAU,IAAIC,aAAa,IAAIC,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACF,aAAa,CAAC,EAAE;gBAC/FL,YAAY,CAACP,KAAK,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;IACH,CAAC,EAAE;QAACE,mBAAmB;QAAEG,MAAM;QAAEF,OAAO;QAAEC,MAAM;QAAEJ,KAAK;QAAEM,SAAS;QAAEC,YAAY;KAAC,CAAC,CAAC;IAEnF,OAAO;QAACG,iBAAiB;QAAED,SAAS;KAAC,CAAC;AACxC,CAAC;AAED,iEAAeV,QAAQ,EAAC","sources":["webpack://web/../../packages/uikit/src/widgets/Modal/useModal.ts"],"sourcesContent":["import React, { useCallback, useContext, useEffect } from \"react\";\nimport get from \"lodash/get\";\nimport { Context } from \"./ModalContext\";\nimport { Handler } from \"./types\";\n\nconst useModal = (\n  modal: React.ReactNode,\n  closeOnOverlayClick = true,\n  updateOnPropsChange = false,\n  modalId = \"defaultNodeId\"\n): [Handler, Handler] => {\n  const { isOpen, nodeId, modalNode, setModalNode, onPresent, onDismiss } = useContext(Context);\n  const onPresentCallback = useCallback(() => {\n    onPresent(modal, modalId, closeOnOverlayClick);\n  }, [modal, modalId, onPresent, closeOnOverlayClick]);\n\n  // Updates the \"modal\" component if props are changed\n  // Use carefully since it might result in unnecessary rerenders\n  // Typically if modal is static there is no need for updates, use when you expect props to change\n  useEffect(() => {\n    // NodeId is needed in case there are 2 useModal hooks on the same page and one has updateOnPropsChange\n    if (updateOnPropsChange && isOpen && nodeId === modalId) {\n      const modalProps = get(modal, \"props\");\n      const oldModalProps = get(modalNode, \"props\");\n      // Note: I tried to use lodash isEqual to compare props but it is giving false-negatives too easily\n      // For example ConfirmSwapModal in exchange has ~500 lines prop object that stringifies to same string\n      // and online diff checker says both objects are identical but lodash isEqual thinks they are different\n      // Do not try to replace JSON.stringify with isEqual, high risk of infinite rerenders\n      // TODO: Find a good way to handle modal updates, this whole flow is just backwards-compatible workaround,\n      // would be great to simplify the logic here\n      if (modalProps && oldModalProps && JSON.stringify(modalProps) !== JSON.stringify(oldModalProps)) {\n        setModalNode(modal);\n      }\n    }\n  }, [updateOnPropsChange, nodeId, modalId, isOpen, modal, modalNode, setModalNode]);\n\n  return [onPresentCallback, onDismiss];\n};\n\nexport default useModal;\n"],"names":["React","useCallback","useContext","useEffect","get","Context","useModal","modal","closeOnOverlayClick","updateOnPropsChange","modalId","isOpen","nodeId","modalNode","setModalNode","onPresent","onDismiss","onPresentCallback","modalProps","oldModalProps","JSON","stringify"],"sourceRoot":""}