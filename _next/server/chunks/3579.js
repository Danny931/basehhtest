exports.id = 3579;
exports.ids = [3579];
exports.modules = {

/***/ 60471:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pancakeswap_localization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24953);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_pancakeswap_localization__WEBPACK_IMPORTED_MODULE_0__/* .Trans */ .cC);


/***/ }),

/***/ 71691:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Jz": () => (/* reexport */ erc20_bytes32_namespaceObject),
  "ZP": () => (/* binding */ abi_erc20)
});

// UNUSED EXPORTS: ERC20_ABI, ERC20_BYTES32_INTERFACE

// EXTERNAL MODULE: external "@ethersproject/abi"
var abi_ = __webpack_require__(6187);
// EXTERNAL MODULE: ./src/config/abi/erc20.json
var erc20 = __webpack_require__(93324);
;// CONCATENATED MODULE: ./src/config/abi/erc20_bytes32.json
const erc20_bytes32_namespaceObject = JSON.parse('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/erc20.ts



const ERC20_INTERFACE = new abi_.Interface(erc20);
const ERC20_BYTES32_INTERFACE = new abi_.Interface(erc20_bytes32_namespaceObject);
/* harmony default export */ const abi_erc20 = (ERC20_INTERFACE);



/***/ }),

/***/ 10494:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AM": () => (/* binding */ GRAPH_HEALTH),
/* harmony export */   "Bd": () => (/* binding */ GRAPH_API_NFTMARKET),
/* harmony export */   "C1": () => (/* binding */ API_NFT),
/* harmony export */   "EC": () => (/* binding */ INFO_CLIENT_ETH),
/* harmony export */   "GZ": () => (/* binding */ GRAPH_API_PREDICTION_BNB),
/* harmony export */   "Hr": () => (/* binding */ TC_MOBOX_SUBGRAPH),
/* harmony export */   "Hs": () => (/* binding */ BLOCKS_CLIENT_ETH),
/* harmony export */   "I0": () => (/* binding */ BLOCKS_CLIENT),
/* harmony export */   "JY": () => (/* binding */ INFO_CLIENT),
/* harmony export */   "Kt": () => (/* binding */ GRAPH_API_PREDICTION_V1),
/* harmony export */   "TY": () => (/* binding */ SNAPSHOT_API),
/* harmony export */   "Xr": () => (/* binding */ GRAPH_API_LOTTERY),
/* harmony export */   "YP": () => (/* binding */ GRAPH_API_PROFILE),
/* harmony export */   "d$": () => (/* binding */ BIT_QUERY),
/* harmony export */   "dm": () => (/* binding */ API_PROFILE),
/* harmony export */   "fK": () => (/* binding */ GRAPH_API_POTTERY),
/* harmony export */   "fO": () => (/* binding */ GRAPH_API_PREDICTION_CAKE),
/* harmony export */   "gG": () => (/* binding */ FARM_API),
/* harmony export */   "gr": () => (/* binding */ STABLESWAP_SUBGRAPH_CLIENT),
/* harmony export */   "iR": () => (/* binding */ ACCESS_RISK_API),
/* harmony export */   "tm": () => (/* binding */ TC_MOD_SUBGRAPH),
/* harmony export */   "uw": () => (/* binding */ CELER_API)
/* harmony export */ });
/* unused harmony exports SNAPSHOT_BASE_URL, SNAPSHOT_HUB_API, INFO_CLIENT_WITH_CHAIN, BLOCKS_CLIENT_WITH_CHAIN */
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);

const GRAPH_API_PROFILE = "https://api.thegraph.com/subgraphs/name/pancakeswap/profile";
const GRAPH_API_PREDICTION_BNB = "https://api.thegraph.com/subgraphs/name/pancakeswap/prediction-v2";
const GRAPH_API_PREDICTION_CAKE = "https://api.thegraph.com/subgraphs/name/pancakeswap/prediction-cake";
const GRAPH_API_LOTTERY = "https://api.thegraph.com/subgraphs/name/pancakeswap/lottery";
const SNAPSHOT_BASE_URL = "https://hub.snapshot.org";
const API_PROFILE = "https://profile.pancakeswap.com";
const API_NFT = "https://nft.pancakeswap.com/api/v1";
const SNAPSHOT_API = `${SNAPSHOT_BASE_URL}/graphql`;
const SNAPSHOT_HUB_API = `${SNAPSHOT_BASE_URL}/api/message`;
const GRAPH_API_POTTERY = "https://api.thegraph.com/subgraphs/name/pancakeswap/pottery";
/**
 * V1 will be deprecated but is still used to claim old rounds
 */ const GRAPH_API_PREDICTION_V1 = "https://api.thegraph.com/subgraphs/name/pancakeswap/prediction";
const INFO_CLIENT = "https://bsc.streamingfast.io/subgraphs/name/pancakeswap/exchange-v2";
const INFO_CLIENT_ETH = "https://api.thegraph.com/subgraphs/name/pancakeswap/exhange-eth";
const BLOCKS_CLIENT = "https://api.thegraph.com/subgraphs/name/pancakeswap/blocks";
const BLOCKS_CLIENT_ETH = "https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks";
const STABLESWAP_SUBGRAPH_CLIENT = "https://api.thegraph.com/subgraphs/name/pancakeswap/exchange-stableswap";
const GRAPH_API_NFTMARKET = "https://api.thegraph.com/subgraphs/name/pancakeswap/nft-market";
const GRAPH_HEALTH = "https://api.thegraph.com/index-node/graphql";
const TC_MOBOX_SUBGRAPH = "https://api.thegraph.com/subgraphs/name/pancakeswap/trading-competition-v3";
const TC_MOD_SUBGRAPH = "https://api.thegraph.com/subgraphs/name/pancakeswap/trading-competition-v4";
const FARM_API = "https://farms.pancake-swap.workers.dev";
const BIT_QUERY = "https://graphql.bitquery.io";
const ACCESS_RISK_API = "https://red.alert.pancakeswap.com/red-api";
const CELER_API = "https://api.celerscan.com/scan";
const INFO_CLIENT_WITH_CHAIN = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: "https://bsc.streamingfast.io/subgraphs/name/pancakeswap/exchange-v2",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: "https://api.thegraph.com/subgraphs/name/pancakeswap/exhange-eth"
};
const BLOCKS_CLIENT_WITH_CHAIN = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: "https://api.thegraph.com/subgraphs/name/pancakeswap/blocks",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: "https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks"
};


/***/ }),

/***/ 92794:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bz": () => (/* binding */ ALLOWED_PRICE_IMPACT_LOW),
/* harmony export */   "EV": () => (/* binding */ PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN),
/* harmony export */   "IP": () => (/* binding */ CUSTOM_BASES),
/* harmony export */   "IS": () => (/* binding */ ONE_BIPS),
/* harmony export */   "PM": () => (/* binding */ BIPS_BASE),
/* harmony export */   "Q8": () => (/* binding */ PINNED_PAIRS),
/* harmony export */   "Ru": () => (/* binding */ BETTER_TRADE_LESS_HOPS_THRESHOLD),
/* harmony export */   "TY": () => (/* binding */ BIG_INT_TEN),
/* harmony export */   "Uf": () => (/* binding */ ALLOWED_PRICE_IMPACT_HIGH),
/* harmony export */   "Uz": () => (/* binding */ MIN_BNB),
/* harmony export */   "VN": () => (/* binding */ DEFAULT_INPUT_CURRENCY),
/* harmony export */   "Zw": () => (/* binding */ INPUT_FRACTION_AFTER_FEE),
/* harmony export */   "bR": () => (/* binding */ ROUTER_ADDRESS),
/* harmony export */   "ck": () => (/* binding */ ADDITIONAL_BASES),
/* harmony export */   "fI": () => (/* binding */ ZERO_PERCENT),
/* harmony export */   "g$": () => (/* binding */ DEFAULT_OUTPUT_CURRENCY),
/* harmony export */   "iV": () => (/* binding */ BIG_INT_ZERO),
/* harmony export */   "kx": () => (/* binding */ SUGGESTED_BASES),
/* harmony export */   "lM": () => (/* binding */ BASES_TO_CHECK_TRADES_AGAINST),
/* harmony export */   "lN": () => (/* binding */ BLOCKED_PRICE_IMPACT_NON_EXPERT),
/* harmony export */   "p9": () => (/* binding */ ALLOWED_PRICE_IMPACT_MEDIUM),
/* harmony export */   "q3": () => (/* binding */ GENERIC_GAS_LIMIT_ORDER_EXECUTION),
/* harmony export */   "rU": () => (/* binding */ EXCHANGE_PAGE_PATHS),
/* harmony export */   "uX": () => (/* binding */ GELATO_HANDLER),
/* harmony export */   "vm": () => (/* binding */ LIMIT_ORDERS_DOCS_URL),
/* harmony export */   "xu": () => (/* binding */ BASES_TO_TRACK_LIQUIDITY_FOR),
/* harmony export */   "yC": () => (/* binding */ ONE_HUNDRED_PERCENT)
/* harmony export */ });
/* unused harmony export BASE_FEE */
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65757);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72502);



const ROUTER_ADDRESS = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: "0xEfF92A263d31888d860bD50809A8D171709b7b1c",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]: "0xEfF92A263d31888d860bD50809A8D171709b7b1c",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]: "0xEfF92A263d31888d860bD50809A8D171709b7b1c",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET]: "0x78d6d08470d44b3719430A5F9e93A062C4155Ab7"
};
// used to construct intermediary pairs for trading
const BASES_TO_CHECK_TRADES_AGAINST = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: [
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDT */ .AA[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .WBTC_ETH */ .Zn
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]: [
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]: [
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.wbnb */ .ds.wbnb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.cake */ .ds.cake,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.busd */ .ds.busd,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.usdt */ .ds.usdt,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.btcb */ .ds.btcb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.eth */ .ds.eth,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.usdc */ .ds.usdc, 
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.wbnb */ .dI.wbnb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.cake */ .dI.cake,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.busd */ .dI.busd
    ]
};
/**
 * Additional bases for specific tokens
 * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }
 */ const ADDITIONAL_BASES = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: {
        // SNFTS-SFUND
        [_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.snfts.address */ .ds.snfts.address]: [
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.sfund */ .ds.sfund
        ]
    }
};
/**
 * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these
 * tokens.
 * @example [AMPL.address]: [DAI, WNATIVE[ChainId.BSC]]
 */ const CUSTOM_BASES = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: {}
};
// used for display in the default list when adding liquidity
const SUGGESTED_BASES = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDT */ .AA[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .WBTC_ETH */ .Zn
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.busd */ .ds.busd,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.cake */ .ds.cake,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.btcb */ .ds.btcb
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.wbnb */ .dI.wbnb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.cake */ .dI.cake,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.busd */ .dI.busd
    ]
};
// used to construct the list of all pairs we consider by default in the frontend
const BASES_TO_TRACK_LIQUIDITY_FOR = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDT */ .AA[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .WBTC_ETH */ .Zn
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.RINKEBY]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI],
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .BUSD */ .lz[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI]
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.wbnb */ .ds.wbnb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.dai */ .ds.dai,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.busd */ .ds.busd,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.usdt */ .ds.usdt,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.cake */ .ds.cake
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET]: [
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.wbnb */ .dI.wbnb,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.cake */ .dI.cake,
        _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTestnetTokens.busd */ .dI.busd
    ]
};
const PINNED_PAIRS = {
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]: [
        [
            _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDC */ .gn[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]
        ],
        [
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .WBTC_ETH */ .Zn,
            _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]
        ],
        [
            _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.WNATIVE[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM],
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .USDT */ .AA[_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM]
        ], 
    ],
    [_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC]: [
        [
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.cake */ .ds.cake,
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.wbnb */ .ds.wbnb
        ],
        [
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.busd */ .ds.busd,
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.usdt */ .ds.usdt
        ],
        [
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.dai */ .ds.dai,
            _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_2__/* .bscTokens.usdt */ .ds.usdt
        ], 
    ]
};
const BIG_INT_ZERO = _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(0);
const BIG_INT_TEN = _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(10);
// one basis point
const BIPS_BASE = _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(10000);
const ONE_BIPS = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(1), BIPS_BASE);
// used for warning states
const ALLOWED_PRICE_IMPACT_LOW = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(100), BIPS_BASE) // 1%
;
const ALLOWED_PRICE_IMPACT_MEDIUM = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(300), BIPS_BASE) // 3%
;
const ALLOWED_PRICE_IMPACT_HIGH = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(500), BIPS_BASE) // 5%
;
// if the price slippage exceeds this number, force the user to type 'confirm' to execute
const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(1000), BIPS_BASE) // 10%
;
// for non expert mode disable swaps above this
const BLOCKED_PRICE_IMPACT_NON_EXPERT = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(1500), BIPS_BASE) // 15%
;
// used to ensure the user doesn't send so much BNB so they end up with <.01
const MIN_BNB = _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.exponentiate(BIG_INT_TEN, _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(16)) // .01 BNB
;
const BETTER_TRADE_LESS_HOPS_THRESHOLD = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(50), BIPS_BASE);
const ZERO_PERCENT = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent("0");
const ONE_HUNDRED_PERCENT = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent("1");
const BASE_FEE = new _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.Percent(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.JSBI.BigInt(25), BIPS_BASE);
const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);
// BNB
const DEFAULT_INPUT_CURRENCY = "BNB";
// CAKE
const DEFAULT_OUTPUT_CURRENCY = "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82";
// Handler string is passed to Gelato to use PCS router
const GELATO_HANDLER = "pancakeswap";
const GENERIC_GAS_LIMIT_ORDER_EXECUTION = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(500000);
const LIMIT_ORDERS_DOCS_URL = "https://docs.pancakeswap.finance/products/pancakeswap-exchange/limit-orders";
const EXCHANGE_PAGE_PATHS = [
    "/swap",
    "/limit-orders",
    "liquidity",
    "/add",
    "/find",
    "/remove"
];


/***/ }),

/***/ 87840:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "b": () => (/* binding */ cakeBnbLpToken),
  "Z": () => (/* binding */ ifo)
});

// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
// EXTERNAL MODULE: ../../packages/tokens/src/index.ts + 6 modules
var src = __webpack_require__(72502);
;// CONCATENATED MODULE: ./src/config/constants/lp.ts
const CAKE_BNB_LP_MAINNET = "0x0eD7e52944161450477ee417DE9Cd3a859b14fD0";

;// CONCATENATED MODULE: ./src/config/constants/ifo.ts



const cakeBnbLpToken = new dist.ERC20Token(dist.ChainId.BSC, CAKE_BNB_LP_MAINNET, 18, "CAKE-BNB LP");
const ifos = [
    {
        id: "mgp",
        address: "0x80828B68D126741EeA62b4712eBF7Ceb9d54CBAA",
        isActive: true,
        name: "MGP",
        poolBasic: {
            saleAmount: "17,500,000 MGP",
            raiseAmount: "$437,500",
            distributionRatio: 0.25
        },
        poolUnlimited: {
            saleAmount: "52,500,000 MGP",
            raiseAmount: "$1,312,500",
            distributionRatio: 0.75
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.mgp */.ds.mgp,
        releaseBlockNumber: 21595548,
        campaignId: "511900000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/0x5bbaee587df5b7e9b52e2b35f35f30afa08e15ab7098c73cb2503319c8d8ce44",
        tokenOfferingPrice: 0.025,
        version: 3.2,
        twitterUrl: "https://twitter.com/magpiexyz_io",
        description: "Magpie is a customized fork of Convex that helps users in the Wombat ecosystem to obtain better yields and voting power",
        vestingTitle: "Earn $MGP by converting $WOM and providing liquidities; Lock $MGP to share revenue and receive bribes."
    },
    {
        id: "wmx",
        address: "0xC202eb5f2487DA3675c4aAa2C3D2c071078699c1",
        isActive: false,
        name: "WMX",
        poolBasic: {
            saleAmount: "1,000,000 WMX",
            raiseAmount: "$300,000",
            distributionRatio: 0.25
        },
        poolUnlimited: {
            saleAmount: "3,000,000 WMX",
            raiseAmount: "$900,000",
            distributionRatio: 0.75
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.wmx */.ds.wmx,
        releaseBlockNumber: 22242441,
        campaignId: "511800000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/0x8bef379b1f3e1f42e180d877edd3ef5b11476300f9de37196904ca4c2070b470",
        tokenOfferingPrice: 0.3,
        version: 3.2,
        twitterUrl: "https://twitter.com/WombexFinance",
        description: "Wombex is a customized fork of Convex, designed specifically for the Wombat Exchange ecosystem",
        vestingTitle: "Earn $WMX by staking assets; Lock $WMX for Fee-Sharing and Wombat Governance"
    },
    {
        id: "krs",
        cIFO: true,
        address: "0x4CCB9960dEF2f9a55D1a0454a134a8Adb0047B8e",
        isActive: false,
        name: "KRS",
        poolBasic: {
            saleAmount: "12,000,000 KRS",
            raiseAmount: "$420,000",
            distributionRatio: 0.4
        },
        poolUnlimited: {
            saleAmount: "18,000,000 KRS",
            raiseAmount: "$630,000",
            distributionRatio: 0.6
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.krs */.ds.krs,
        releaseBlockNumber: 21970879,
        campaignId: "511700000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreicqqvgqpwtnhmlfdwz3ya3hnjm6nvgqbf3fpi4vbxmvqyv6yi3enu",
        tokenOfferingPrice: 0.035,
        version: 3.2,
        twitterUrl: "https://twitter.com/KingdomRaids",
        description: "Kingdom Raids is a blockchain-based strategy role-playing game (RPG) game with a NFT metaverse",
        vestingTitle: "$KRS - utility token for Kingdom Raids, a role-playing game (RPG) game."
    },
    {
        id: "co",
        address: "0x8baeee7d68cb332c63b3e4a8740072121070a2df",
        isActive: false,
        name: "CO",
        poolBasic: {
            saleAmount: "10,500,000 CO",
            raiseAmount: "$367,500",
            distributionRatio: 0.25
        },
        poolUnlimited: {
            saleAmount: "31,500,000 CO",
            raiseAmount: "$1,102,500",
            distributionRatio: 0.75
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.co */.ds.co,
        releaseBlockNumber: 21615380,
        campaignId: "511600000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreiddual5o7vzfcwuazw3lgckis66hka4xytqkttqg2wjtea5pywohy",
        tokenOfferingPrice: 0.035,
        version: 3.2,
        twitterUrl: "https://twitter.com/Coritecom",
        description: "Corite is a blockchain-based music platform jointly powered by fans and artists to finance and promote music in a unique Engage-to-Earn (E2E) model.",
        vestingTitle: "$CO - utility token for the Corite Experience!"
    },
    {
        id: "hoop",
        address: "0x326e9E1B685C7F366fb320e7eC59599F3d88b1a2",
        isActive: false,
        cIFO: true,
        name: "HOOP",
        poolBasic: {
            saleAmount: "6,499,500 HOOP",
            raiseAmount: "$357,472.50",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "15,165,500 HOOP",
            raiseAmount: "$834,102.50",
            distributionRatio: 0.7
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.hoop */.ds.hoop,
        releaseBlockNumber: 21525900,
        campaignId: "511500000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreicsc2nevwvyp7ot5ewkmujvor3bcafh372kuxzncojqbuabnpwupe",
        tokenOfferingPrice: 0.055,
        version: 3.2,
        twitterUrl: "https://twitter.com/DinosChibi",
        description: `Chibi Dinos is a basketball and dinosaur themed metaverse with games such as Primal Hoop, an arcade basketball game with an adventure role-playing game (RPG) mode and Primal Pick'em, a predictive play-to earn game (P2E).`,
        vestingTitle: "$HOOP - In-game currency for the Chibi Dinos Gaming Universe"
    },
    {
        id: "wom",
        address: "0x98828e9D69E49104a62ecb4FA3d6F9e06A295CBA",
        isActive: false,
        name: "WOM",
        poolBasic: {
            saleAmount: "2,800,000 WOM",
            raiseAmount: "$210,000",
            distributionRatio: 0.1
        },
        poolUnlimited: {
            saleAmount: "25,200,000 WOM",
            raiseAmount: "$1,890,000",
            distributionRatio: 0.9
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.wom */.ds.wom,
        releaseBlockNumber: 20685666,
        campaignId: "511400000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreieqv7mbzmumyftstt6l32x6okfzq4syrea7k5zbqgohhcekcvbduu",
        tokenOfferingPrice: 0.075,
        version: 3.2,
        twitterUrl: "https://twitter.com/WombatExchange",
        description: "Wombat Exchange is a next generation multi-chain stableswap native to BNB Chain.",
        vestingTitle: "Earn $WOM by staking stablecoins; Lock $WOM to maximize stablecoin yields"
    },
    {
        id: "peel",
        address: "0x35Bb6Dd4E8C63491057c32621c8cDdE43BabE201",
        isActive: false,
        name: "Meta Apes ($PEEL)",
        poolBasic: {
            saleAmount: "10,000,000 PEEL",
            raiseAmount: "$400,000",
            distributionRatio: 0.2
        },
        poolUnlimited: {
            saleAmount: "40,000,000 PEEL",
            raiseAmount: "$1,600,000",
            distributionRatio: 0.8
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.peel */.ds.peel,
        releaseBlockNumber: 19964276,
        campaignId: "511300000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreibomj5nilvyckdro7ztmm62syt55dcfnonxs63ji6hm2ijq35lru4",
        tokenOfferingPrice: 0.04,
        version: 3.2,
        twitterUrl: "https://twitter.com/MetaApesGame",
        description: "Meta Apes is a free-to-play, play-and-earn massively multiplayer online (MMO) strategy game designed for mobile and the first game to launch on the BNB Sidechain with their own dedicated chain, Ape Chain.",
        vestingTitle: "Utilize $PEEL for gas and governance in the Meta Apes ecosystem!"
    },
    {
        id: "trivia",
        address: "0x23C520d8227524E2cDD00360358864fF3fFC36b4",
        isActive: false,
        name: "TRIVIA",
        poolBasic: {
            saleAmount: "10,000,000 TRIVIA",
            raiseAmount: "$350,000",
            distributionRatio: 0.2
        },
        poolUnlimited: {
            saleAmount: "40,000,000 TRIVIA",
            raiseAmount: "$1,400,000",
            distributionRatio: 0.8
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.trivia */.ds.trivia,
        releaseBlockNumber: 19273145,
        campaignId: "511200000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/bafkreihrc2d55vrowbn2oajzs77ffv73g4hzch2e7wulnuccmbwl5u4hvq",
        tokenOfferingPrice: 0.035,
        version: 3.2,
        telegramUrl: "https://t.me/TriviansGlobal",
        twitterUrl: "https://twitter.com/PlayTrivians",
        description: "Trivian is a trivia gaming platform with different game modes such as multiplayer mode, single player mode, 1v1 games, instant play, scheduled tournaments, and live shows … all while earning TRIVIA tokens!",
        vestingTitle: "Earn $TRIVIA For Each Question You Answer Correctly"
    },
    {
        id: "duet",
        address: "0xDF24BE326af4c1fb888f567f41D9a981A4752cf1",
        isActive: false,
        name: "DUET",
        poolBasic: {
            saleAmount: "1,200,000 DUET",
            raiseAmount: "$360,000",
            distributionRatio: 0.2
        },
        poolUnlimited: {
            saleAmount: "4,800,000 DUET",
            raiseAmount: "$1,440,000",
            distributionRatio: 0.8
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.duet */.ds.duet,
        releaseBlockNumber: null,
        campaignId: "511190000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmXwoYYd8rkahVbxiGKsTa4rYRRFWPxhRGAHy3hVwK3Q2z",
        tokenOfferingPrice: 0.3,
        version: 3.1,
        telegramUrl: "https://t.me/duetprotocol",
        twitterUrl: "https://twitter.com/duetprotocol",
        description: "DUET Protocol is a multi-chain synthetic assets ecosystem, enabling pegged assets from various markets – from individual stocks, to indexes, ETFs, and commodities."
    },
    {
        id: "era",
        address: "0x527201a43f8da24ce9b7c21744a0706942f41fa3",
        isActive: false,
        name: "ERA (Game of Truth)",
        poolBasic: {
            saleAmount: "4,000,000 ERA",
            raiseAmount: "$360,000",
            distributionRatio: 0.2
        },
        poolUnlimited: {
            saleAmount: "16,000,000 ERA",
            raiseAmount: "$1,440,000",
            distributionRatio: 0.8
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.era */.ds.era,
        releaseBlockNumber: 15156634,
        campaignId: "511180000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmTfN1SKnFidF6XCDcpga7zAf69mFfhb26Zy9b85dYskxW",
        tokenOfferingPrice: 0.09,
        version: 3.1,
        telegramUrl: "https://t.me/Era7_Official",
        twitterUrl: "https://twitter.com/Era7_official",
        description: "Drawing from their experience in traditional games such as Awakening of Dragon, Era7: Game of Truth combines elements of DeFi, NFTs, and Trading Cards into a play-to-earn game steeped in mythology and magic."
    },
    {
        id: "froyo",
        address: "0xE0d6c91860a332068bdB59275b0AAC8769e26Ac4",
        isActive: false,
        name: "Froyo Games (FROYO)",
        poolBasic: {
            saleAmount: "20,000,000 FROYO",
            raiseAmount: "$1,200,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "46,666,668 FROYO",
            raiseAmount: "$2,800,000",
            distributionRatio: 0.7
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.froyo */.ds.froyo,
        releaseBlockNumber: 14297000,
        campaignId: "511170000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmRhc4oC73jk4zxU4YkP1kudKHeq6qamgYA1sWoh6XJnks",
        tokenOfferingPrice: 0.06,
        version: 3,
        telegramUrl: "https://t.me/froyogames",
        twitterUrl: "https://twitter.com/realfroyogames",
        description: `Froyo Games is a game publisher and decentralized GameFi platform, with a NFT Marketplace that integrates NFTs with their games.\n \n FROYO tokens can be used to buy NFTs and participate in Froyo games`
    },
    {
        id: "dpt",
        address: "0x63914805A0864e9557eA3A5cC86cc1BA054ec64b",
        isActive: false,
        name: "Diviner Protocol (DPT)",
        poolBasic: {
            saleAmount: "7,200,000 DPT",
            raiseAmount: "$180,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "16,800,000 DPT",
            raiseAmount: "$420,000",
            distributionRatio: 0.7
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.dpt */.ds.dpt,
        releaseBlockNumber: 13491500,
        campaignId: "511160000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmQqpknHvuQwshVP259qFxfQsxiWbQ9SLMebohDeRwRzKg",
        tokenOfferingPrice: 0.025,
        version: 3
    },
    {
        id: "santos",
        address: "0x69B5D2Ab0cf532a0E22Fc0dEB0c5135639892468",
        isActive: false,
        name: "FC Santos Fan Token (SANTOS)",
        poolBasic: {
            saleAmount: "120,000 SANTOS",
            raiseAmount: "$300,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "280,000 SANTOS",
            raiseAmount: "$700,000",
            distributionRatio: 0.7
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.santos */.ds.santos,
        releaseBlockNumber: 13097777,
        campaignId: "511150000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmUqRxjwZCWeZWEdgV2vHJ6hex7jMW7i247NKFas73xc8j",
        tokenOfferingPrice: 2.5,
        version: 2
    },
    {
        id: "porto",
        address: "0xFDFf29dD0b4DD49Bf5E991A30b8593eaA34B4580",
        isActive: false,
        name: "FC Porto Fan Token (PORTO)",
        poolBasic: {
            saleAmount: "250,000 PORTO",
            raiseAmount: "$500,000",
            distributionRatio: 0.5
        },
        poolUnlimited: {
            saleAmount: "250,000 PORTO",
            raiseAmount: "$500,000",
            distributionRatio: 0.5
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.porto */.ds.porto,
        releaseBlockNumber: 12687500,
        campaignId: "511140000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmaakXYpydAwCgTuSPe3R2ZNraRtkCbK6iBRqBCCdzqKEG",
        tokenOfferingPrice: 2,
        version: 2
    },
    {
        id: "dar",
        address: "0xb6eF1f36220397c434A6B15dc5EA616CFFDF58CE",
        isActive: false,
        name: "Mines of Dalarnia (DAR)",
        poolBasic: {
            saleAmount: "6,000,000 DAR",
            raiseAmount: "$450,000",
            distributionRatio: 0.5
        },
        poolUnlimited: {
            saleAmount: "6,000,000 DAR",
            raiseAmount: "$450,000",
            distributionRatio: 0.5
        },
        currency: src/* bscTokens.cake */.ds.cake,
        token: src/* bscTokens.dar */.ds.dar,
        releaseBlockNumber: 12335455,
        campaignId: "511130000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmeJenHcbY45eQxLRebzvpNk5qSCrj2wM1t4EAMHotFoJL",
        tokenOfferingPrice: 0.075,
        version: 2
    },
    {
        id: "dkt",
        address: "0x89ab9852155A794e371095d863aEAa2DF198067C",
        isActive: false,
        name: "Duelist King (DKT)",
        poolBasic: {
            saleAmount: "75,000 DKT",
            raiseAmount: "$131,250",
            cakeToBurn: "$65,625",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "175,000 DKT",
            raiseAmount: "$306,250",
            cakeToBurn: "$153,125",
            distributionRatio: 0.7
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.dkt */.ds.dkt,
        releaseBlockNumber: 12130750,
        campaignId: "511120000",
        articleUrl: "https://pancakeswap.finance/voting/proposal/QmTRWdW9a65fAkyJy1wrAJRU548fNMAZhRUDrSxzMDLmwk",
        tokenOfferingPrice: 1.75,
        version: 2
    },
    {
        id: "kalmar",
        address: "0x1aFB32b76696CdF05593Ca3f3957AEFB23a220FB",
        isActive: false,
        name: "Kalmar (KALM)",
        poolBasic: {
            saleAmount: "375,000 KALM",
            raiseAmount: "$750,000",
            cakeToBurn: "$375,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "875,000 KALM",
            raiseAmount: "$2,500,000",
            cakeToBurn: "$1,250,000",
            distributionRatio: 0.7
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.kalm */.ds.kalm,
        releaseBlockNumber: 7707736,
        campaignId: "511110000",
        articleUrl: "https://pancakeswap.medium.com/kalmar-kalm-ifo-to-be-hosted-on-pancakeswap-4540059753e4",
        tokenOfferingPrice: 2.0,
        version: 2
    },
    {
        id: "hotcross",
        address: "0xb664cdbe385656F8c54031c0CB12Cea55b584b63",
        isActive: false,
        name: "Hot Cross (HOTCROSS)",
        poolBasic: {
            saleAmount: "15,000,000 HOTCROSS",
            raiseAmount: "$750,000",
            cakeToBurn: "$375,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "35,000,000 HOTCROSS",
            raiseAmount: "$1,750,000",
            cakeToBurn: "$875,000",
            distributionRatio: 0.7
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.hotcross */.ds.hotcross,
        releaseBlockNumber: 7477900,
        campaignId: "511100000",
        articleUrl: "https://pancakeswap.medium.com/hot-cross-hotcross-ifo-to-be-hosted-on-pancakeswap-10e70f1f6841",
        tokenOfferingPrice: 0.05,
        version: 2
    },
    {
        id: "horizon",
        address: "0x6137B571f7F1E44839ae10310a08be86D1A4D03B",
        isActive: false,
        name: "Horizon Protocol (HZN)",
        poolBasic: {
            saleAmount: "3,000,000 HZN",
            raiseAmount: "$750,000",
            cakeToBurn: "$375,000",
            distributionRatio: 0.3
        },
        poolUnlimited: {
            saleAmount: "7,000,000 HZN",
            raiseAmount: "$1,750,000",
            cakeToBurn: "$875,000",
            distributionRatio: 0.7
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.hzn */.ds.hzn,
        releaseBlockNumber: 6581111,
        campaignId: "511090000",
        articleUrl: "https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8",
        tokenOfferingPrice: 0.25,
        version: 2
    },
    {
        id: "belt",
        address: "0xc9FBedC033a1c479a6AD451ffE463025E92a1d38",
        isActive: false,
        name: "Belt (BELT)",
        poolUnlimited: {
            saleAmount: "150,000 BELT",
            raiseAmount: "$3,000,000",
            cakeToBurn: "$1,500,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.belt */.ds.belt,
        releaseBlockNumber: 5493919,
        campaignId: "511080000",
        articleUrl: "https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "watch",
        address: "0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d",
        isActive: false,
        name: "Yieldwatch (WATCH)",
        poolUnlimited: {
            saleAmount: "8,000,000 WATCH",
            raiseAmount: "$800,000",
            cakeToBurn: "$400,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.watch */.ds.watch,
        releaseBlockNumber: 5294924,
        campaignId: "511070000",
        articleUrl: "https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "berry",
        address: "0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd",
        isActive: false,
        name: "Berry (BRY)",
        poolUnlimited: {
            saleAmount: "2,000,000 BRY",
            raiseAmount: "$1,000,000",
            cakeToBurn: "$500,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.bry */.ds.bry,
        releaseBlockNumber: 4750968,
        campaignId: "511060000",
        articleUrl: "https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "soteria",
        address: "0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e",
        isActive: false,
        name: "Soteria (wSOTE)",
        poolUnlimited: {
            saleAmount: "1,500,000 wSOTE",
            raiseAmount: "$525,000",
            cakeToBurn: "$262,500",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.wsote */.ds.wsote,
        releaseBlockNumber: 4086064,
        campaignId: "511050000",
        articleUrl: "https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "helmet",
        address: "0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB",
        isActive: false,
        name: "Helmet.insure (Helmet)",
        poolUnlimited: {
            saleAmount: "10,000,000 Helmet",
            raiseAmount: "$1,000,000",
            cakeToBurn: "$500,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.helmet */.ds.helmet,
        releaseBlockNumber: 3771926,
        campaignId: "511040000",
        articleUrl: "https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "tenet",
        address: "0xB922aA19A2603A07C6C9ED6c236618C9bac51f06",
        isActive: false,
        name: "Tenet (TEN)",
        poolUnlimited: {
            saleAmount: "1,000,000 TEN",
            raiseAmount: "$1,000,000",
            cakeToBurn: "$500,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.ten */.ds.ten,
        releaseBlockNumber: 3483883,
        campaignId: "511030000",
        articleUrl: "https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "ditto",
        address: "0x570c9eB19553526Fb35895a531928E19C7D20788",
        isActive: false,
        name: "Ditto (DITTO)",
        poolUnlimited: {
            saleAmount: "700,000 DITTO",
            raiseAmount: "$630,000",
            cakeToBurn: "$315,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.ditto */.ds.ditto,
        releaseBlockNumber: 3279767,
        campaignId: "511020000",
        articleUrl: "https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66",
        tokenOfferingPrice: null,
        version: 1
    },
    {
        id: "blink",
        address: "0x44a9Cc8463EC00937242b660BF65B10365d99baD",
        isActive: false,
        name: "BLINk (BLK)",
        poolUnlimited: {
            saleAmount: "100,000,000 BLINK",
            raiseAmount: "$1,000,000",
            cakeToBurn: "$500,000",
            distributionRatio: 1
        },
        currency: cakeBnbLpToken,
        token: src/* bscTokens.blink */.ds.blink,
        releaseBlockNumber: 3279767,
        campaignId: "511010000",
        articleUrl: "https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8",
        tokenOfferingPrice: null,
        version: 1
    }, 
];
/* harmony default export */ const ifo = (ifos);


/***/ }),

/***/ 17943:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KI": () => (/* binding */ SLOW_INTERVAL),
/* harmony export */   "PY": () => (/* binding */ DEFAULT_DEADLINE_FROM_NOW),
/* harmony export */   "Q2": () => (/* reexport safe */ _ifo__WEBPACK_IMPORTED_MODULE_0__.Z),
/* harmony export */   "SO": () => (/* binding */ EXCHANGE_DOCS_URLS),
/* harmony export */   "Vc": () => (/* binding */ NOT_ON_SALE_SELLER),
/* harmony export */   "ag": () => (/* binding */ GELATO_NATIVE),
/* harmony export */   "bF": () => (/* binding */ PREDICTION_TOOLTIP_DISMISS_KEY),
/* harmony export */   "gv": () => (/* binding */ INITIAL_ALLOWED_SLIPPAGE),
/* harmony export */   "h5": () => (/* binding */ NO_PROXY_CONTRACT),
/* harmony export */   "ki": () => (/* binding */ FARM_AUCTION_HOSTING_IN_SECONDS),
/* harmony export */   "mj": () => (/* binding */ BLOCKED_ADDRESSES),
/* harmony export */   "sR": () => (/* binding */ FAST_INTERVAL)
/* harmony export */ });
/* harmony import */ var _ifo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87840);
/* harmony import */ var _pools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73486);
// used to construct the list of all pairs we consider by default in the frontend
// SDN OFAC addresses
const BLOCKED_ADDRESSES = [
    "0x7F367cC41522cE07553e823bf3be79A889DEbe1B",
    "0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b",
    "0x901bb9583b24D97e995513C6778dc6888AB6870e",
    "0xA7e5d5A720f06526557c513402f2e6B5fA20b008",
    "0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C", 
];
// default allowed slippage, in bips
const INITIAL_ALLOWED_SLIPPAGE = 50;
// 20 minutes, denominated in seconds
const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;


const FAST_INTERVAL = 10000;
const SLOW_INTERVAL = 60000;
const NOT_ON_SALE_SELLER = "0x0000000000000000000000000000000000000000";
const NO_PROXY_CONTRACT = "0x0000000000000000000000000000000000000000";
const FARM_AUCTION_HOSTING_IN_SECONDS = 864000;
const PREDICTION_TOOLTIP_DISMISS_KEY = "prediction-switcher-dismiss-tooltip";
// Gelato uses this address to define a native currency in all chains
const GELATO_NATIVE = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
const EXCHANGE_DOCS_URLS = "https://docs.pancakeswap.finance/products/pancakeswap-exchange";


/***/ }),

/***/ 29762:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AN": () => (/* binding */ NUM_ROUNDS_TO_FETCH_FROM_NODES),
/* harmony export */   "f7": () => (/* binding */ NUM_ROUNDS_TO_CHECK_FOR_REWARDS),
/* harmony export */   "r": () => (/* binding */ TICKET_LIMIT_PER_REQUEST)
/* harmony export */ });
const TICKET_LIMIT_PER_REQUEST = 2500;
const NUM_ROUNDS_TO_CHECK_FOR_REWARDS = 3;
const NUM_ROUNDS_TO_FETCH_FROM_NODES = 3;


/***/ }),

/***/ 73486:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$$": () => (/* binding */ livePools),
/* harmony export */   "A0": () => (/* binding */ DURATION_FACTOR),
/* harmony export */   "VO": () => (/* binding */ MAX_LOCK_DURATION),
/* harmony export */   "Y4": () => (/* binding */ vaultPoolConfig),
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "by": () => (/* binding */ UNLOCK_FREE_DURATION),
/* harmony export */   "kp": () => (/* binding */ ONE_WEEK_DEFAULT),
/* harmony export */   "xt": () => (/* binding */ BOOST_WEIGHT)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20997);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65757);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var components_Trans__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60471);
/* harmony import */ var state_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(93638);
/* harmony import */ var _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(72502);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6429);






const MAX_LOCK_DURATION = 31536000;
const UNLOCK_FREE_DURATION = 604800;
const ONE_WEEK_DEFAULT = 604800;
const BOOST_WEIGHT = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from("20000000000000");
const DURATION_FACTOR = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from("31536000");
const vaultPoolConfig = {
    [state_types__WEBPACK_IMPORTED_MODULE_3__/* .VaultKey.CakeVaultV1 */ .om.CakeVaultV1]: {
        name: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Auto CAKE"
        }),
        description: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Automatic restaking"
        }),
        autoCompoundFrequency: 5000,
        gasLimit: 380000,
        tokenImage: {
            primarySrc: `/images/tokens/${_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake.address */ .ds.cake.address}.svg`,
            secondarySrc: "/images/tokens/autorenew.svg"
        }
    },
    [state_types__WEBPACK_IMPORTED_MODULE_3__/* .VaultKey.CakeVault */ .om.CakeVault]: {
        name: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Stake CAKE"
        }),
        description: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Stake, Earn – And more!"
        }),
        autoCompoundFrequency: 5000,
        gasLimit: 500000,
        tokenImage: {
            primarySrc: `/images/tokens/${_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake.address */ .ds.cake.address}.svg`,
            secondarySrc: "/images/tokens/autorenew.svg"
        }
    },
    [state_types__WEBPACK_IMPORTED_MODULE_3__/* .VaultKey.CakeFlexibleSideVault */ .om.CakeFlexibleSideVault]: {
        name: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Flexible CAKE"
        }),
        description: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Flexible staking on the side."
        }),
        autoCompoundFrequency: 5000,
        gasLimit: 500000,
        tokenImage: {
            primarySrc: `/images/tokens/${_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake.address */ .ds.cake.address}.svg`,
            secondarySrc: "/images/tokens/autorenew.svg"
        }
    },
    [state_types__WEBPACK_IMPORTED_MODULE_3__/* .VaultKey.IfoPool */ .om.IfoPool]: {
        name: "IFO CAKE",
        description: /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx(components_Trans__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z, {
            children: "Stake CAKE to participate in IFOs"
        }),
        autoCompoundFrequency: 1,
        gasLimit: 500000,
        tokenImage: {
            primarySrc: `/images/tokens/${_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake.address */ .ds.cake.address}.svg`,
            secondarySrc: `/images/tokens/ifo-pool-icon.svg`
        }
    }
};
const livePools = [
    {
        sousId: 0,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "0xB4A466911556e39210a6bB2FaECBB59E4eB7E43d",
            56: "0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "10",
        isFinished: false
    },
    {
        sousId: 302,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.wmx */ .ds.wmx,
        contractAddress: {
            56: "0xaEd58Af2c98dbF05d26B3E5b3cc809fc70D203ce",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5787",
        version: 3
    },
    {
        sousId: 301,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.krs */ .ds.krs,
        contractAddress: {
            56: "0x067F926EB8f2a95f260327B01C29B2034A785029",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.96",
        version: 3
    },
    {
        sousId: 300,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.arv */ .ds.arv,
        contractAddress: {
            56: "0x420Cd06440d8845FBcde9a396d9Aa211FE78C03d",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1335.47",
        version: 3
    },
    {
        sousId: 299,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.co */ .ds.co,
        contractAddress: {
            56: "0x31736A52bBdda4eaf0117B17736306Bbecb711ca",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.6296",
        version: 3
    },
    {
        sousId: 298,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hoop */ .ds.hoop,
        contractAddress: {
            56: "0x6C254E3AB3e4B909A2CfAA3E0b9d2B3F7887CFae",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.146",
        version: 3
    },
    {
        sousId: 297,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.moni */ .ds.moni,
        contractAddress: {
            56: "0xB5e36D441016016f251223EBD5E946cdeFe0E2E1",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.411",
        version: 3
    },
    {
        sousId: 296,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gq */ .ds.gq,
        contractAddress: {
            56: "0x983A241Bfe910fcFa3E70744AA21AAe5f45861f0",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "55.6446",
        version: 3
    },
    {
        sousId: 295,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.wom */ .ds.wom,
        contractAddress: {
            56: "0xf78DB5b635bA108212C9D84c124a52D7B1596b97",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.4722",
        version: 3
    },
    {
        sousId: 294,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ankr */ .ds.ankr,
        contractAddress: {
            56: "0x985a20998c7c59e98005c556393215e39c9a4978",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "6.0763",
        version: 3
    }, 
].map((p)=>({
        ...p,
        stakingToken: p.stakingToken.serialize,
        earningToken: p.earningToken.serialize
    }));
// known finished pools
const finishedPools = [
    {
        sousId: 293,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hay */ .ds.hay,
        contractAddress: {
            56: "0x8cBCf2f2be93D154be5135f465369Ee6dD84314B",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.2604",
        version: 3
    },
    {
        sousId: 292,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sfund */ .ds.sfund,
        contractAddress: {
            56: "0x449EC6B2779A3F63E6c2527CBB162A38Ef199d7D",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1071",
        version: 3
    },
    {
        sousId: 291,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pstake */ .ds.pstake,
        contractAddress: {
            56: "0x56D6955Ba6404647191DD7A5D65A5c9Fe43905e1",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.1574",
        version: 3
    },
    {
        sousId: 290,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.peel */ .ds.peel,
        contractAddress: {
            56: "0x288d1aD79c113552B618765B4986f7DE679367Da",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.34",
        version: 3
    },
    {
        sousId: 289,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.shell */ .ds.shell,
        contractAddress: {
            56: "0x595B7AF4F1828AB4953792482b01B2AFC4A46b72",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "89.699",
        version: 3
    },
    {
        sousId: 288,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.high */ .ds.high,
        contractAddress: {
            56: "0x28cc814bE3B994187B7f8Bfed10516A84A671119",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1332",
        version: 3
    },
    {
        sousId: 287,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ole */ .ds.ole,
        contractAddress: {
            56: "0xda6F750be1331963E5772BEe757062f6bddcEA4C",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.2569",
        version: 3
    },
    {
        sousId: 286,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.trivia */ .ds.trivia,
        contractAddress: {
            56: "0x86471019Bf3f403083390AC47643062e15B0256e",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.976",
        version: 3
    },
    {
        sousId: 285,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sdao */ .ds.sdao,
        contractAddress: {
            56: "0x168eF2e470bfeAEB32BE52FB218A41483904851c",
            97: ""
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.405",
        version: 3
    },
    {
        sousId: 284,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.antex */ .ds.antex,
        contractAddress: {
            97: "",
            56: "0xdC37A2B2A6a62008beEe029E36153dF8055a8ADa"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1937.62",
        version: 3
    },
    {
        sousId: 283,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xcn */ .ds.xcn,
        contractAddress: {
            97: "",
            56: "0xa79D37ce9DF9443eF4B6DEC2e38a8ecd35303adc"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.2505",
        version: 3
    },
    {
        sousId: 282,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.chr */ .ds.chr,
        contractAddress: {
            97: "",
            56: "0x2D17ec6cd0AF737B2adE40ea527d41ceEedc166f"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.58",
        version: 3
    },
    {
        sousId: 281,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.MIX */ .ds.MIX,
        contractAddress: {
            97: "",
            56: "0x0F96E19Bdc787e767BA1e8F1aDD0f62cbdad87C8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "63.136",
        version: 3
    },
    {
        sousId: 280,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.metis */ .ds.metis,
        contractAddress: {
            97: "",
            56: "0xC0A94bFF88EdCae7D5d79294C0e9954Ed75CBCb7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01331",
        version: 3
    },
    {
        sousId: 279,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gal */ .ds.gal,
        contractAddress: {
            97: "",
            56: "0xa5D57C5dca083a7051797920c78fb2b19564176B"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.09645",
        version: 3
    },
    {
        sousId: 278,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.rpg */ .ds.rpg,
        contractAddress: {
            97: "",
            56: "0xD1c395BCdC2d64ac6544A34A36185483B00530a1"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.06794",
        version: 3
    },
    {
        sousId: 277,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ankr */ .ds.ankr,
        contractAddress: {
            97: "",
            56: "0xc581345e1648CcE154978eA80bF8A584EC8aFDe0"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.6296",
        version: 3
    },
    {
        sousId: 276,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ceek */ .ds.ceek,
        contractAddress: {
            97: "",
            56: "0xED53944b1c0cEecDe1a413fDb4D0496e1a08ab58"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.8078",
        version: 3
    },
    {
        sousId: 275,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tinc */ .ds.tinc,
        contractAddress: {
            97: "",
            56: "0x9593462fF51A14633b243Ba3d054A8183d057A02"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4677",
        version: 3
    },
    {
        sousId: 274,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pex */ .ds.pex,
        contractAddress: {
            97: "",
            56: "0x641B1F2781B34a493E4308A0A3F1c7E042A9B952"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3865",
        version: 3
    },
    {
        sousId: 273,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gmi */ .ds.gmi,
        contractAddress: {
            97: "",
            56: "0x0D53E0f2Eb384777442e4EB813d8f5fAcC742206"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "17.939",
        version: 3
    },
    {
        sousId: 272,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.froyo */ .ds.froyo,
        contractAddress: {
            97: "",
            56: "0x84e3208578eE7db397a3d584d97Fea107b15bF35"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.404",
        version: 3
    },
    {
        sousId: 271,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bsw */ .ds.bsw,
        contractAddress: {
            97: "",
            56: "0x7092e029E4ce660F9AC081BF6D8a339BE602398b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.157",
        version: 3
    },
    {
        sousId: 270,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.duet */ .ds.duet,
        contractAddress: {
            97: "",
            56: "0xA581349F26dE887700045F9B7d148775d422fDA2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4861",
        version: 3
    },
    {
        sousId: 269,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gmt */ .ds.gmt,
        contractAddress: {
            97: "",
            56: "0xe76a31cF974BA5819ce86cB4667a4bf05174bC59"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.629",
        version: 3
    },
    {
        sousId: 268,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xwg */ .ds.xwg,
        contractAddress: {
            97: "",
            56: "0x6e0272A70075f6782F6842730107E9ABf74C5CC7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "5.106",
        version: 3
    },
    {
        sousId: 267,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.high */ .ds.high,
        contractAddress: {
            97: "",
            56: "0x60c4998C058BaC8042712B54E7e43b892Ab0B0c4"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.09756",
        version: 3
    },
    {
        sousId: 266,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.thg */ .ds.thg,
        contractAddress: {
            97: "",
            56: "0xD1D03A3D4C27884a8703Cdb78504737C9E9A159e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.162",
        version: 3
    },
    {
        sousId: 265,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.era */ .ds.era,
        contractAddress: {
            97: "",
            56: "0x260F95f5b7FD8eda720ED9d0829164dE35B048ab"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.608",
        version: 3
    },
    {
        sousId: 264,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.btt */ .ds.btt,
        contractAddress: {
            97: "",
            56: "0x346a1b672C5Cbb6AE21715428f77A0049B29B332"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "157829"
    },
    {
        sousId: 263,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ach */ .ds.ach,
        contractAddress: {
            97: "",
            56: "0xcD1Be742b04DB005e2C445A11BDe6d13DD9dd454"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "7.502"
    },
    {
        sousId: 261,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sfund */ .ds.sfund,
        contractAddress: {
            97: "",
            56: "0x80762101bd79D6e7A175E9678d05c7f815b8D7d7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.06481"
    },
    {
        sousId: 260,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.raca */ .ds.raca,
        contractAddress: {
            97: "",
            56: "0xAaF43935a526DF88AB57FC69b1d80a8d35e1De82"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "204.2"
    },
    {
        sousId: 259,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ertha */ .ds.ertha,
        contractAddress: {
            97: "",
            56: "0x921Ea7e12A66025F2BD287eDbff6dc5cEABd6477"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.585"
    },
    {
        sousId: 258,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.fuse */ .ds.fuse,
        contractAddress: {
            97: "",
            56: "0xeAd7b8fc5F2E5672FAe9dCf14E902287F35CB169"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.19"
    },
    {
        sousId: 257,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.froyo */ .ds.froyo,
        contractAddress: {
            97: "",
            56: "0x1c9E3972fdBa29b40954Bb7594Da6611998F8830"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.893"
    },
    {
        sousId: 256,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.aog */ .ds.aog,
        contractAddress: {
            97: "",
            56: "0xa34832efe74133763A85060a64103542031B0A7E"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6435"
    },
    {
        sousId: 255,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.apx */ .ds.apx,
        contractAddress: {
            97: "",
            56: "0x92c07c325cE7b340Da2591F5e9CbB1F5Bab73FCF"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.035"
    },
    {
        sousId: 254,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bcoin */ .ds.bcoin,
        contractAddress: {
            97: "",
            56: "0x25ca61796d786014ffe15e42ac11c7721d46e120"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1493"
    },
    {
        sousId: 253,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bcoin */ .ds.bcoin,
        contractAddress: {
            97: "",
            56: "0xad8F6A9d58012DCa2303226B287E80e5fE27eff0"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1493"
    },
    {
        sousId: 252,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.insur */ .ds.insur,
        contractAddress: {
            97: "",
            56: "0x1A777aE604CfBC265807A46Db2d228d4CC84E09D"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3281"
    },
    {
        sousId: 251,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gm */ .ds.gm,
        contractAddress: {
            97: "",
            56: "0x09e727c83a75fFdB729280639eDBf947dB76EeB7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "7893"
    },
    {
        sousId: 250,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.woop */ .ds.woop,
        contractAddress: {
            97: "",
            56: "0x2718D56aE2b8F08B3076A409bBF729542233E451"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.226"
    },
    {
        sousId: 249,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.high */ .ds.high,
        contractAddress: {
            97: "",
            56: "0x2461ea28907A2028b2bCa40040396F64B4141004"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02679"
    },
    {
        sousId: 247,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dpt */ .ds.dpt,
        contractAddress: {
            97: "",
            56: "0x1c0C7F3B07a42efb4e15679a9ed7e70B2d7Cc157"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.62962963"
    },
    {
        sousId: 246,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.thg */ .ds.thg,
        contractAddress: {
            97: "",
            56: "0x56Bfb98EBEF4344dF2d88c6b80694Cba5EfC56c8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.03761"
    },
    {
        sousId: 245,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.idia */ .ds.idia,
        contractAddress: {
            97: "",
            56: "0x07984aBb7489CD436d27875c07Eb532d4116795a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1262"
    },
    {
        sousId: 244,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xcv */ .ds.xcv,
        contractAddress: {
            97: "",
            56: "0xF1fA41f593547E406a203b681df18acCC3971A43"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.7413"
    },
    {
        sousId: 243,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nabox */ .ds.nabox,
        contractAddress: {
            97: "",
            56: "0x13A40BFab005D9284f8938FBb70Bf39982580e4D"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1271"
    },
    {
        sousId: 242,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.santos */ .ds.santos,
        contractAddress: {
            97: "",
            56: "0x0914b2d9D4DD7043893DEF53ecFC0F1179F87d5c"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0578"
    },
    {
        sousId: 241,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.quidd */ .ds.quidd,
        contractAddress: {
            97: "",
            56: "0xd97ee2bfe79a4d4ab388553411c462fbb536a88c"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.07471"
    },
    {
        sousId: 240,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.zoo */ .ds.zoo,
        contractAddress: {
            97: "",
            56: "0x2EfE8772EB97B74be742d578A654AB6C95bF18db"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4516"
    },
    {
        sousId: 239,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sfund */ .ds.sfund,
        contractAddress: {
            97: "",
            56: "0x7F103689cabe17C2F70DA6faa298045d72a943b8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0311"
    },
    {
        sousId: 238,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.qi */ .ds.qi,
        contractAddress: {
            97: "",
            56: "0xbd52ef04DB1ad1c68A8FA24Fa71f2188978ba617"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.736"
    },
    {
        sousId: 237,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.kart */ .ds.kart,
        contractAddress: {
            97: "",
            56: "0x73bB10B89091f15e8FeD4d6e9EBa6415df6acb21"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1897"
    },
    {
        sousId: 236,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.porto */ .ds.porto,
        contractAddress: {
            97: "",
            56: "0xdD52FAB121376432DBCBb47592742F9d86CF8952"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0578"
    },
    {
        sousId: 235,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dvi */ .ds.dvi,
        contractAddress: {
            97: "",
            56: "0x2b8751B7141Efa7a9917f9C6fea2CEA071af5eE7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.2516"
    },
    {
        sousId: 234,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.jgn */ .ds.jgn,
        contractAddress: {
            97: "",
            56: "0xfDFb4DbE94916F9f55dBC2c14Ea8B3e386eCD9F9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5233"
    },
    {
        sousId: 232,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xwg */ .ds.xwg,
        contractAddress: {
            97: "",
            56: "0x79f5f7DDADeFa0A9e850DFFC4fBa77e5172Fe701"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.3379"
    },
    {
        sousId: 231,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dar */ .ds.dar,
        contractAddress: {
            97: "",
            56: "0x9b861A078B2583373A7a3EEf815bE1A39125Ae08"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.3148"
    },
    {
        sousId: 230,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.fina */ .ds.fina,
        contractAddress: {
            97: "",
            56: "0xa35caA9509a2337E22C54C929146D5F7f6515794"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.06944"
    },
    {
        sousId: 229,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bmon */ .ds.bmon,
        contractAddress: {
            97: "",
            56: "0x6e63B2B96c77532ea7ec2B3D3BFA9C8e1d383f3C"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.0254"
    },
    {
        sousId: 228,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dkt */ .ds.dkt,
        contractAddress: {
            97: "",
            56: "0xFef4B7a0194159d89717Efa592384d42B28D3926"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.09838"
    },
    {
        sousId: 227,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ramp */ .ds.ramp,
        contractAddress: {
            97: "",
            56: "0x2D26e4b9a5F19eD5BB7AF221DC02432D31DEB4dA"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.2152"
    },
    {
        sousId: 226,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lazio */ .ds.lazio,
        contractAddress: {
            97: "",
            56: "0xd008416c2c9cf23843bd179aa3cefedb4c8d1607"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0694"
    },
    {
        sousId: 225,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sps */ .ds.sps,
        contractAddress: {
            97: "",
            56: "0xd9b63bb6c62fe2e9a641699a91e680994b8b0081"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.40046"
    },
    {
        sousId: 224,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mcb */ .ds.mcb,
        contractAddress: {
            97: "",
            56: "0xCc2D359c3a99d9cfe8e6F31230142efF1C828e6D"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00706"
    },
    {
        sousId: 223,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.rpg */ .ds.rpg,
        contractAddress: {
            97: "",
            56: "0x65C0940C50A3C98AEEc95a115Ae62E9804588713"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01863"
    },
    {
        sousId: 222,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.beta */ .ds.beta,
        contractAddress: {
            97: "",
            56: "0x6f660c58723922c6f866a058199ff4881019b4b5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.7361"
    },
    {
        sousId: 233,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.eternal */ .ds.eternal,
        contractAddress: {
            97: "",
            56: "0xc28c400F2B675b25894FA632205ddec71E432288"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.002893"
    },
    {
        sousId: 221,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nft */ .ds.nft,
        contractAddress: {
            97: "",
            56: "0x8d018823d13c56d62ffb795151a9e629c21e047b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "173727"
    },
    {
        sousId: 220,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.chess */ .ds.chess,
        contractAddress: {
            97: "",
            56: "0x4D1Ec426d0d7fb6bF344Dd372d0502EDD71c8d88"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0861"
    },
    {
        sousId: 219,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tlos */ .ds.tlos,
        contractAddress: {
            97: "",
            56: "0xCB41a72067c227D6Ed7bc7CFAcd13eCe47Dfe5E9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3616"
    },
    {
        sousId: 218,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.stephero */ .ds.stephero,
        contractAddress: {
            97: "",
            56: "0xcecba456fefe5b18d43df23419e7ab755b436655"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1851"
    },
    {
        sousId: 217,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bp */ .ds.bp,
        contractAddress: {
            97: "",
            56: "0x8ed7acf12b08274d5cdaf03d43d0e54bcbdd487e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.217"
    },
    {
        sousId: 216,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cvp */ .ds.cvp,
        contractAddress: {
            97: "",
            56: "0xC4b15117BC0be030c20754FF36197641477af5d1"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.14"
    },
    {
        sousId: 215,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.qbt */ .ds.qbt,
        contractAddress: {
            97: "",
            56: "0xB72dEf58D0832f747d6B7197471Fe20AeA7EB463"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.412"
    },
    {
        sousId: 214,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.naos */ .ds.naos,
        contractAddress: {
            97: "",
            56: "0xb38b78529bCc895dA16CE2978D6cD6C56e8CfFC3"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1736"
    },
    {
        sousId: 213,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pha */ .ds.pha,
        contractAddress: {
            97: "",
            56: "0x2E101b5F7f910F2609e5AcE5f43bD274b1DE09AA"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.28"
    },
    {
        sousId: 212,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bel */ .ds.bel,
        contractAddress: {
            97: "",
            56: "0x52733Ad7b4D09BF613b0389045e33E2F287afa04"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.101"
    },
    {
        sousId: 211,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ramp */ .ds.ramp,
        contractAddress: {
            97: "",
            56: "0x401b9b97bdbc3197c1adfab9652dc78040bd1e13"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.9837"
    },
    {
        sousId: 210,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pots */ .ds.pots,
        contractAddress: {
            97: "",
            56: "0xBeDb490970204cb3CC7B0fea94463BeD67d5364D"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0868"
    },
    {
        sousId: 209,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tusd */ .ds.tusd,
        contractAddress: {
            97: "",
            56: "0xb6e510ae2da1ab4e350f837c70823ab75091780e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5787"
    },
    {
        sousId: 208,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.revv */ .ds.revv,
        contractAddress: {
            97: "",
            56: "0x8aa5b2c67852ed5334c8a7f0b5eb0ef975106793"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.331"
    },
    {
        sousId: 207,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bttold */ .ds.bttold,
        contractAddress: {
            97: "",
            56: "0x3b804460c3c62f0f565af593984159f13b1ac976"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "263"
    },
    {
        sousId: 206,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.skill */ .ds.skill,
        contractAddress: {
            97: "",
            56: "0x455f4d4cc4d6ca15441a93c631e82aaf338ad843"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00289"
    },
    {
        sousId: 205,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.win */ .ds.win,
        contractAddress: {
            97: "",
            56: "0xde4aef42bb27a2cb45c746acde4e4d8ab711d27c"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1815.39"
    },
    {
        sousId: 204,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens["if"] */ .ds["if"],
        contractAddress: {
            97: "",
            56: "0x57d3524888ded4085d9124a422f13b27c8a43de7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02835"
    },
    {
        sousId: 203,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sps */ .ds.sps,
        contractAddress: {
            97: "",
            56: "0xb56299d8fbf46c509014b103a164ad1fc65ea222"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "12.86"
    },
    {
        sousId: 202,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.c98 */ .ds.c98,
        contractAddress: {
            97: "",
            56: "0x5e49531BA07bE577323e55666D46C6217164119E"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.7361"
    },
    {
        sousId: 201,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.axs */ .ds.axs,
        contractAddress: {
            97: "",
            56: "0xBB472601B3CB32723d0755094BA80B73F67f2AF3"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00744"
    },
    {
        sousId: 200,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.axs */ .ds.axs,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0x583A36816F3b8401C4fdf682203E0caDA6997740"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00992"
    },
    {
        sousId: 199,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pmon */ .ds.pmon,
        contractAddress: {
            97: "",
            56: "0x28050e8f024e05f9ddbef5f60dd49f536dba0cf0"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02696"
    },
    {
        sousId: 198,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.trx */ .ds.trx,
        contractAddress: {
            97: "",
            56: "0xb2b62f88ab82ed0bb4ab4da60d9dc9acf9e816e5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "9.6643"
    },
    {
        sousId: 197,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.chess */ .ds.chess,
        contractAddress: {
            97: "",
            56: "0xd1812e7e28c39e78727592de030fc0e7c366d61a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4286"
    },
    {
        sousId: 196,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.titan */ .ds.titan,
        contractAddress: {
            97: "",
            56: "0x97058cf9b36c9ef1622485cef22e72d6fea32a36"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.08912"
    },
    {
        sousId: 195,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.harmony */ .ds.harmony,
        contractAddress: {
            97: "",
            56: "0xe595456846155e23b24cc9cbee910ee97027db6d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.0092"
    },
    {
        sousId: 194,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mask */ .ds.mask,
        contractAddress: {
            97: "",
            56: "0xae611c6d4d3ca2cee44cd34eb7aac29d5a387fcf"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.06423"
    },
    {
        sousId: 193,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dvi */ .ds.dvi,
        contractAddress: {
            97: "",
            56: "0x135827eaf9746573c0b013f18ee12f138b9b0384"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.7233"
    },
    {
        sousId: 192,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gum */ .ds.gum,
        contractAddress: {
            97: "",
            56: "0x09b8a5f51c9e245402057851ada274174fa00e2a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.67129"
    },
    {
        sousId: 191,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.adx */ .ds.adx,
        contractAddress: {
            97: "",
            56: "0x53a2d1db049b5271c6b6db020dba0e8a7c4eb90d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.7523"
    },
    {
        sousId: 190,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.suter */ .ds.suter,
        contractAddress: {
            97: "",
            56: "0x4da8da81647ee0aa7350e9959f3e4771eb753da0"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "69.9074"
    },
    {
        sousId: 189,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bscpad */ .ds.bscpad,
        contractAddress: {
            97: "",
            56: "0x0446b8f8474c590d2249a4acdd6eedbc2e004bca"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3877"
    },
    {
        sousId: 188,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.rabbit */ .ds.rabbit,
        contractAddress: {
            97: "",
            56: "0x391240A007Bfd8A59bA74978D691219a76c64c5C"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.993"
    },
    {
        sousId: 187,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.waultx */ .ds.waultx,
        contractAddress: {
            97: "",
            56: "0x017DEa5C58c2Bcf57FA73945073dF7AD4052a71C"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "7.9108"
    },
    {
        sousId: 186,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.wex */ .ds.wex,
        contractAddress: {
            97: "",
            56: "0x6Bd94783caCef3fb7eAa9284f1631c464479829f"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "11.574"
    },
    {
        sousId: 185,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.form */ .ds.form,
        contractAddress: {
            97: "",
            56: "0x7c71723fB1F9Cfb250B702cfc4eBd5D9Ab2E83d9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.4467"
    },
    {
        sousId: 184,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.orbs */ .ds.orbs,
        contractAddress: {
            97: "",
            56: "0x9C8813d7D0A61d30610a7A5FdEF9109e196a3D77"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.8946"
    },
    {
        sousId: 183,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.$dg */ .ds.$dg,
        contractAddress: {
            97: "",
            56: "0xa07a91da6d10173f33c294803684bceede325957"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00135"
    },
    {
        sousId: 182,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.woo */ .ds.woo,
        contractAddress: {
            97: "",
            56: "0x88c321d444c88acf3e747dc90f20421b97648903"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3854"
    },
    {
        sousId: 181,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.woo */ .ds.woo,
        contractAddress: {
            97: "",
            56: "0x3c7234c496d76133b48bd6a342e7aea4f8d87fc8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0003854"
    },
    {
        sousId: 180,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.htb */ .ds.htb,
        contractAddress: {
            97: "",
            56: "0x64473c33c360f315cab38674f1633505d1d8dcb2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "5.2083"
    },
    {
        sousId: 179,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.jgn */ .ds.jgn,
        contractAddress: {
            97: "",
            56: "0x5cc7a19a50be2a6b2540ebcd55bd728e732e59c3"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1001"
    },
    {
        sousId: 178,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dft */ .ds.dft,
        contractAddress: {
            97: "",
            56: "0x2666e2494e742301ffc8026e476acc1710a775ed"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.7361"
    },
    {
        sousId: 177,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hai */ .ds.hai,
        contractAddress: {
            97: "",
            56: "0x6ac2213F09A404c86AFf506Aa51B6a5BF1F6e24E"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.3078"
    },
    {
        sousId: 176,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.o3 */ .ds.o3,
        contractAddress: {
            97: "",
            56: "0x35BD47263f7E57368Df76339903C53bAa99076e1"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.107638"
    },
    {
        sousId: 175,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ampl */ .ds.ampl,
        contractAddress: {
            97: "",
            56: "0x62dEc3A560D2e8A84D30752bA454f97b26757877"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.398"
    },
    {
        sousId: 174,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.oddz */ .ds.oddz,
        contractAddress: {
            97: "",
            56: "0x44d1f81e80e43e935d66d65874354ef91e5e49f6"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4843"
    },
    {
        sousId: 173,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bondly */ .ds.bondly,
        contractAddress: {
            97: "",
            56: "0x4ea43fce546975aae120c9eeceb172500be4a02b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6741"
    },
    {
        sousId: 172,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.marsh */ .ds.marsh,
        contractAddress: {
            97: "",
            56: "0x567fd708e788e51b68666b9310ee9df163d60fae"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1108"
    },
    {
        sousId: 171,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mbox */ .ds.mbox,
        contractAddress: {
            97: "",
            56: "0x36f9452083fc9bc469a31e7966b873f402292433"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4803"
    },
    {
        sousId: 170,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ata */ .ds.ata,
        contractAddress: {
            97: "",
            56: "0xc612680457751d0d01b5d901ad08132a3b001900"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.7361"
    },
    {
        sousId: 169,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mx */ .ds.mx,
        contractAddress: {
            97: "",
            56: "0x336bcd59f2b6eb7221a99f7a50fd03c6bf9a306b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.27777"
    },
    {
        sousId: 168,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bcfx */ .ds.bcfx,
        contractAddress: {
            97: "",
            56: "0x2b3974dda76b2d408b7d680a27fbb0393e3cf0e1"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6944"
    },
    {
        sousId: 167,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.qkc */ .ds.qkc,
        contractAddress: {
            97: "",
            56: "0xfa67f97eeee6de55d179ecabbfe701f27d9a1ed9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "15.9143"
    },
    {
        sousId: 166,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ktn */ .ds.ktn,
        contractAddress: {
            97: "",
            56: "0x48852322a185dc5fc733ff8c8d7c6dcbd2b3b2a2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01215"
    },
    {
        sousId: 165,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mtrg */ .ds.mtrg,
        contractAddress: {
            97: "",
            56: "0xf4d0f71698f58f221911515781b05e808a8635cb"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.05613"
    },
    {
        sousId: 164,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tusd */ .ds.tusd,
        contractAddress: {
            97: "",
            56: "0x9dceb1d92f7e0361d0766f3d98482424df857654"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5787"
    },
    {
        sousId: 163,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.vrt */ .ds.vrt,
        contractAddress: {
            97: "",
            56: "0xb77f1425ec3a7c78b1a1e892f72332c8b5e8ffcb"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "40.5092"
    },
    {
        sousId: 162,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.kalm */ .ds.kalm,
        contractAddress: {
            97: "",
            56: "0xb9ff4da0954b300542e722097671ead8cf337c17"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0868"
    },
    {
        sousId: 161,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ez */ .ds.ez,
        contractAddress: {
            97: "",
            56: "0xb19395702460261e51edf7a7b130109c64f13af9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01736"
    },
    {
        sousId: 160,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.kalm */ .ds.kalm,
        contractAddress: {
            97: "",
            56: "0x6e113ecb9ff2d271140f124c2cc5b5e4b5700c9f"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00868"
    },
    {
        sousId: 159,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.popen */ .ds.popen,
        contractAddress: {
            97: "",
            56: "0x7baf1763ce5d0da8c9d85927f08a8be9c481ce50"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.19097"
    },
    {
        sousId: 158,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lien */ .ds.lien,
        contractAddress: {
            97: "",
            56: "0x2b8d6c9c62bfc1bed84724165d3000e61d332cab"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.023148"
    },
    {
        sousId: 157,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.well */ .ds.well,
        contractAddress: {
            97: "",
            56: "0x8a06ff2748edcba3fb4e44a6bfda4e46769e557b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.2025"
    },
    {
        sousId: 156,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.deri */ .ds.deri,
        contractAddress: {
            97: "",
            56: "0x3eba95f5493349bbe0cad33eaae05dc6a7e26b90"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.6087"
    },
    {
        sousId: 155,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.chr */ .ds.chr,
        contractAddress: {
            97: "",
            56: "0x593edbd14a5b7eec828336accca9c16cc12f04be"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.655"
    },
    {
        sousId: 154,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cyc */ .ds.cyc,
        contractAddress: {
            97: "",
            56: "0xD714738837944C3c592477249E8edB724A76e068"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00015914"
    },
    {
        sousId: 153,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xend */ .ds.xend,
        contractAddress: {
            97: "",
            56: "0x8ea9f2482b2f7b12744a831f81f8d08714adc093"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.31828"
    },
    {
        sousId: 152,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hget */ .ds.hget,
        contractAddress: {
            97: "",
            56: "0x8e8125f871eb5ba9d55361365f5391ab437f9acc"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.03553"
    },
    {
        sousId: 151,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hotcross */ .ds.hotcross,
        contractAddress: {
            97: "",
            56: "0x0e09205e993f78cd5b3a5df355ae98ee7d0b5834"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.4722"
    },
    {
        sousId: 150,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.rfox */ .ds.rfox,
        contractAddress: {
            97: "",
            56: "0xf9f00d41b1f4b3c531ff750a9b986c1a530f33d9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.7361"
    },
    {
        sousId: 149,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.wmass */ .ds.wmass,
        contractAddress: {
            97: "",
            56: "0x4Af531EcD50167a9402Ce921ee6436dd4cFC04FD"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.24942"
    },
    {
        sousId: 148,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ubxt */ .ds.ubxt,
        contractAddress: {
            97: "",
            56: "0x9b4bac2d8f69853aa29cb45478c77fc54532ac22"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.4074"
    },
    {
        sousId: 147,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.btr */ .ds.btr,
        contractAddress: {
            97: "",
            56: "0x20ee70a07ae1b475cb150dec27930d97915726ea"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.8935"
    },
    {
        sousId: 146,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens["τdoge"] */ .ds["τdoge"],
        contractAddress: {
            97: "",
            56: "0x017556dffb8c6a52fd7f4788adf6fb339309c81b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.868"
    },
    {
        sousId: 145,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pmon */ .ds.pmon,
        contractAddress: {
            97: "",
            56: "0xdaa711ecf2ac0bff5c82fceeae96d0008791cc49"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01261"
    },
    {
        sousId: 144,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.one */ .ds.one,
        contractAddress: {
            97: "",
            56: "0x74af842ecd0b6588add455a47aa21ed9ba794108"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "57.87"
    },
    {
        sousId: 143,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.fine */ .ds.fine,
        contractAddress: {
            97: "",
            56: "0x42d41749d6e9a1c5b47e27f690d4531f181b2159"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1342"
    },
    {
        sousId: 142,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.doge */ .ds.doge,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0xbebd44824631b55991fa5f2bf5c7a4ec96ff805b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01388"
    },
    {
        sousId: 141,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bmxx */ .ds.bmxx,
        contractAddress: {
            97: "",
            56: "0x55131f330c886e3f0cae389cedb23766ac9aa3ed"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01331"
    },
    {
        sousId: 140,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.oin */ .ds.oin,
        contractAddress: {
            97: "",
            56: "0x01453a74a94687fa3f99b80762435855a13664f4"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3472"
    },
    {
        sousId: 139,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hyfi */ .ds.hyfi,
        contractAddress: {
            97: "",
            56: "0x0032ceb978fe5fc8a5d5d6f5adfc005e76397e29"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.8935"
    },
    {
        sousId: 138,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.kun */ .ds.kun,
        contractAddress: {
            97: "",
            56: "0x439b46d467402cebc1a2fa05038b5b696b1f4417"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.23148"
    },
    {
        sousId: 137,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.math */ .ds.math,
        contractAddress: {
            97: "",
            56: "0x377ae5f933aa4cfa41fa03e2cae8a2befccf53b2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.15798"
    },
    {
        sousId: 136,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ust */ .ds.ust,
        contractAddress: {
            97: "",
            56: "0xce3ebac3f549ebf1a174a6ac3b390c179422b5f6"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.17361"
    },
    {
        sousId: 135,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.win */ .ds.win,
        contractAddress: {
            97: "",
            56: "0xd26dec254c699935c286cd90e9841dcabf1af72d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "462.96"
    },
    {
        sousId: 134,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.trx */ .ds.trx,
        contractAddress: {
            97: "",
            56: "0x93e2867d9b74341c2d19101b7fbb81d6063cca4d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "4.0509"
    },
    {
        sousId: 133,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bttold */ .ds.bttold,
        contractAddress: {
            97: "",
            56: "0x3b644e44033cff70bd6b771904225f3dd69dfb6d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "79.86"
    },
    {
        sousId: 132,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lmt */ .ds.lmt,
        contractAddress: {
            97: "",
            56: "0x0a687d7b951348d681f7ed5eea84c0ba7b9566dc"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.66145"
    },
    {
        sousId: 131,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pnt */ .ds.pnt,
        contractAddress: {
            97: "",
            56: "0x417df1c0e6a498eb1f2247f99032a01d4fafe922"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.09548"
    },
    {
        sousId: 130,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xmark */ .ds.xmark,
        contractAddress: {
            97: "",
            56: "0xdc8943d806f9dd64312d155284abf780455fd345"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0298"
    },
    {
        sousId: 129,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ramp */ .ds.ramp,
        contractAddress: {
            97: "",
            56: "0xa90a894e5bc20ab2be46c7e033a38f8b8eaa771a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4861",
        isFinished: true
    },
    {
        sousId: 128,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hakka */ .ds.hakka,
        contractAddress: {
            97: "",
            56: "0x34ac807e34e534fe426da1e11f816422774aae1c"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.4722"
    },
    {
        sousId: 127,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pbtc */ .ds.pbtc,
        contractAddress: {
            97: "",
            56: "0x31fa2f516b77c4273168b284ac6d9def5aa6dafb"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0000031"
    },
    {
        sousId: 126,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lien */ .ds.lien,
        contractAddress: {
            97: "",
            56: "0x7112f8988f075c7784666ab071927ae4109a8076"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.003472"
    },
    {
        sousId: 125,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bbadger */ .ds.bbadger,
        contractAddress: {
            97: "",
            56: "0x126dfbcef85c5bf335f8be99ca4006037f417892"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00265278"
    },
    {
        sousId: 124,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bdigg */ .ds.bdigg,
        contractAddress: {
            97: "",
            56: "0x4f0ad2332b1f9983e8f63cbee617523bb7de5031"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00000403"
    },
    {
        sousId: 123,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bondly */ .ds.bondly,
        contractAddress: {
            97: "",
            56: "0x9483ca44324de06802576866b9d296f7614f45ac"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4629"
    },
    {
        sousId: 122,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xed */ .ds.xed,
        contractAddress: {
            97: "",
            56: "0x72ceec6e2a142678e703ab0710de78bc819f4ce0"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3472"
    },
    {
        sousId: 121,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cgg */ .ds.cgg,
        contractAddress: {
            97: "",
            56: "0x1c6ed21d3313822ae73ed0d94811ffbbe543f341"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.10918"
    },
    {
        sousId: 120,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.perl */ .ds.perl,
        contractAddress: {
            97: "",
            56: "0x1ac0d0333640f57327c83053c581340ebc829e30"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.1574"
    },
    {
        sousId: 119,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.arpa */ .ds.arpa,
        contractAddress: {
            97: "",
            56: "0xc707e5589aeb1dc117b0bb5a3622362f1812d4fc"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.949"
    },
    {
        sousId: 118,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.oddz */ .ds.oddz,
        contractAddress: {
            97: "",
            56: "0x22106cdcf9787969e1672d8e6a9c03a889cda9c5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.11284"
    },
    {
        sousId: 117,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dexe */ .ds.dexe,
        contractAddress: {
            97: "",
            56: "0x999b86e8bba3d4f05afb8155963999db70afa97f"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.009837",
        isFinished: true
    },
    {
        sousId: 116,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dfd */ .ds.dfd,
        contractAddress: {
            97: "",
            56: "0xAF3EfE5fCEeBc603Eada6A2b0172be11f7405102"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.46296"
    },
    {
        sousId: 115,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.alpaca */ .ds.alpaca,
        contractAddress: {
            97: "",
            56: "0xf73fdeb26a8c7a4abf3809d3db11a06ba5c13d0e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.22743"
    },
    {
        sousId: 114,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens["τbtc"] */ .ds["τbtc"],
        contractAddress: {
            97: "",
            56: "0xaac7171afc93f4b75e1268d208040b152ac65e32"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00000608"
    },
    {
        sousId: 113,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens["τbtc"] */ .ds["τbtc"],
        contractAddress: {
            97: "",
            56: "0x2c6017269b4324d016ca5d8e3267368652c18905"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00000608",
        isFinished: true
    },
    {
        sousId: 112,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.swingby */ .ds.swingby,
        contractAddress: {
            97: "",
            56: "0x675434c68f2672c983e36cf10ed13a4014720b79"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.21527"
    },
    {
        sousId: 111,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xed */ .ds.xed,
        contractAddress: {
            97: "",
            56: "0x05d6c2d1d687eacfb5e6440d5a3511e91f2201a8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3472",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 110,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hakka */ .ds.hakka,
        contractAddress: {
            97: "",
            56: "0xd623a32da4a632ce01766c317d07cb2cad56949b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.4722",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 109,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cgg */ .ds.cgg,
        contractAddress: {
            97: "",
            56: "0xdf75f38dbc98f9f26377414e567abcb8d57cca33"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.10918",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 108,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mix */ .ds.mix,
        contractAddress: {
            97: "",
            56: "0xce64a930884b2c68cd93fc1c7c7cdc221d427692"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3721"
    },
    {
        sousId: 107,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.suter */ .ds.suter,
        contractAddress: {
            97: "",
            56: "0xc1E70edd0141c454b834Deac7ddDeA413424aEf9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "15.3356"
    },
    {
        sousId: 106,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.broobee */ .ds.broobee,
        contractAddress: {
            97: "",
            56: "0x189d8228CdfDc404Bd9e5bD65ff958cb5fd8855c"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "14.4675"
    },
    {
        sousId: 105,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hzn */ .ds.hzn,
        contractAddress: {
            97: "",
            56: "0x0196c582216e2463f052E2B07Ef8667Bec9Fb17a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6944"
    },
    {
        sousId: 104,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.alpa */ .ds.alpa,
        contractAddress: {
            97: "",
            56: "0x8f84106286c9c8A42bc3555C835E6e2090684ab7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.23495"
    },
    {
        sousId: 103,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.perl */ .ds.perl,
        contractAddress: {
            97: "",
            56: "0xa8d32b31ECB5142f067548Bf0424389eE98FaF26"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.1574",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 102,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tlm */ .ds.tlm,
        contractAddress: {
            97: "",
            56: "0xC59aa49aE508050c2dF653E77bE13822fFf02E9A"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "17.361"
    },
    {
        sousId: 101,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.jgn */ .ds.jgn,
        contractAddress: {
            97: "",
            56: "0x14AeA62384789EDA98f444cCb970F6730877d3F9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.08796"
    },
    {
        sousId: 100,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.eps */ .ds.eps,
        contractAddress: {
            97: "",
            56: "0xebb87dF24D65977cbe62538E4B3cFBD5d0308642"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.07716"
    },
    {
        sousId: 99,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.arpa */ .ds.arpa,
        contractAddress: {
            97: "",
            56: "0x40918EF8efFF4aA061656013a81E0e5A8A702eA7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.949",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 98,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.itam */ .ds.itam,
        contractAddress: {
            97: "",
            56: "0x44eC1B26035865D9A7C130fD872670CD7Ebac2bC"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.096"
    },
    {
        sousId: 97,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bondly */ .ds.bondly,
        contractAddress: {
            97: "",
            56: "0x1329ad151dE6C441184E32E108401126AE850937"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4629",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 96,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tko */ .ds.tko,
        contractAddress: {
            97: "",
            56: "0x9bbDc92474a7e7321B78dcDA5EF35f4981438760"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.1574"
    },
    {
        sousId: 95,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.apys */ .ds.apys,
        contractAddress: {
            97: "",
            56: "0x46530d79b238f809e80313e73715b160c66677aF"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.09953"
    },
    {
        sousId: 94,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hoo */ .ds.hoo,
        contractAddress: {
            97: "",
            56: "0x47fD853D5baD391899172892F91FAa6d0cd8A2Aa"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.489"
    },
    {
        sousId: 93,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.oddz */ .ds.oddz,
        contractAddress: {
            97: "",
            56: "0xe25aB6F05BBF6C1be953BF2d7df15B3e01b8e5a5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.11284",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 92,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.easy */ .ds.easy,
        contractAddress: {
            97: "",
            56: "0xEB8Fd597921E3Dd37B0F103a2625F855e2C9b9B5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0072338"
    },
    {
        sousId: 91,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nrv */ .ds.nrv,
        contractAddress: {
            97: "",
            56: "0xABFd8d1942628124aB971937154f826Bce86DcbC"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.15046"
    },
    {
        sousId: 90,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dego */ .ds.dego,
        contractAddress: {
            97: "",
            56: "0x526d3c204255f807C95a99b69596f2f9f72345e5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00405"
    },
    {
        sousId: 89,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.gum */ .ds.gum,
        contractAddress: {
            97: "",
            56: "0xAa2082BeE04fc518300ec673F9497ffa6F669dB8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.08912"
    },
    {
        sousId: 88,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pbtc */ .ds.pbtc,
        contractAddress: {
            97: "",
            56: "0x9096625Bc0d36F5EDa6d44e511641667d89C28f4"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0000031",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 87,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dft */ .ds.dft,
        contractAddress: {
            97: "",
            56: "0x78BD4dB48F8983c3C36C8EAFbEF38f6aC7B55285"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6811"
    },
    {
        sousId: 86,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.swth */ .ds.swth,
        contractAddress: {
            97: "",
            56: "0x35418e14F5aA615C4f020eFBa6e01C5DbF15AdD2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.3148"
    },
    {
        sousId: 85,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lien */ .ds.lien,
        contractAddress: {
            97: "",
            56: "0x3c7cC49a35942fbD3C2ad428a6c22490cd709d03"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.003472",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 84,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.zil */ .ds.zil,
        contractAddress: {
            97: "",
            56: "0xF795739737ABcFE0273f4Dced076460fdD024Dd9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "1.0995"
    },
    {
        sousId: 83,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.pcws */ .ds.pcws,
        contractAddress: {
            97: "",
            56: "0x06FF8960F7F4aE572A3f57FAe77B2882BE94Bf90"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00434"
    },
    {
        sousId: 82,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bbadger */ .ds.bbadger,
        contractAddress: {
            97: "",
            56: "0xe4dD0C50fb314A8B2e84D211546F5B57eDd7c2b9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00265278",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 81,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bdigg */ .ds.bdigg,
        contractAddress: {
            97: "",
            56: "0xb627A7e33Db571bE792B0b69c5C2f5a8160d5500"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00000403",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 80,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lto */ .ds.lto,
        contractAddress: {
            97: "",
            56: "0xadBfFA25594AF8Bc421ecaDF54D057236a99781e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.2893"
    },
    {
        sousId: 79,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mir */ .ds.mir,
        contractAddress: {
            97: "",
            56: "0x3e31488f08EBcE6F2D8a2AA512aeFa49a3C7dFa7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01273"
    },
    {
        sousId: 78,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.mir */ .ds.mir,
        contractAddress: {
            97: "",
            56: "0x453a75908fb5a36d482d5f8fe88eca836f32ead5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01273",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 77,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.trade */ .ds.trade,
        contractAddress: {
            97: "",
            56: "0x509C99D73FB54b2c20689708b3F824147292D38e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4484"
    },
    {
        sousId: 76,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dusk */ .ds.dusk,
        contractAddress: {
            97: "",
            56: "0xF1bd5673Ea4a1C415ec84fa3E402F2F7788E7717"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4629"
    },
    {
        sousId: 75,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bifi */ .ds.bifi,
        contractAddress: {
            97: "",
            56: "0xB4C68A1C565298834360BbFF1652284275120D47"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00007234"
    },
    {
        sousId: 74,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.txl */ .ds.txl,
        contractAddress: {
            97: "",
            56: "0x153e62257F1AAe05d5d253a670Ca7585c8D3F94F"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.434027"
    },
    {
        sousId: 73,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cos */ .ds.cos,
        contractAddress: {
            97: "",
            56: "0xF682D186168b4114ffDbF1291F19429310727151"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "5.787"
    },
    {
        sousId: 72,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bunny */ .ds.bunny,
        contractAddress: {
            97: "",
            56: "0xaDdAE5f4dB84847ac9d947AED1304A8e7D19f7cA"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00289"
    },
    {
        sousId: 71,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.alice */ .ds.alice,
        contractAddress: {
            97: "",
            56: "0x4C32048628D0d32d4D6c52662FB4A92747782B56"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.14467"
    },
    {
        sousId: 70,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens["for"] */ .ds["for"],
        contractAddress: {
            97: "",
            56: "0x47642101e8D8578C42765d7AbcFd0bA31868c523"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "2.8935"
    },
    {
        sousId: 69,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bux */ .ds.bux,
        contractAddress: {
            97: "",
            56: "0x07F8217c68ed9b838b0b8B58C19c79bACE746e9A"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5787"
    },
    {
        sousId: 68,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nuls */ .ds.nuls,
        contractAddress: {
            97: "",
            56: "0x580DC9bB9260A922E3A4355b9119dB990F09410d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0868"
    },
    {
        sousId: 67,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.belt */ .ds.belt,
        contractAddress: {
            97: "",
            56: "0x6f0037d158eD1AeE395e1c12d21aE8583842F472"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00868",
        isFinished: true
    },
    {
        sousId: 66,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ramp */ .ds.ramp,
        contractAddress: {
            97: "",
            56: "0x423382f989C6C289c8D441000e1045e231bd7d90"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4861",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 65,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bfi */ .ds.bfi,
        contractAddress: {
            97: "",
            56: "0x0A595623b58dFDe6eB468b613C11A7A8E84F09b9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0001157"
    },
    {
        sousId: 64,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dexe */ .ds.dexe,
        contractAddress: {
            97: "",
            56: "0x9E6dA246d369a41DC44673ce658966cAf487f7b2"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.009837",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 63,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bel */ .ds.bel,
        contractAddress: {
            97: "",
            56: "0x2C0f449387b15793B9da27c2d945dBed83ab1B07"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0549"
    },
    {
        sousId: 62,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tpt */ .ds.tpt,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0x0c3D6892aa3b23811Af3bd1bbeA8b0740E8e4528"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0462",
        isFinished: true
    },
    {
        sousId: 61,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.tpt */ .ds.tpt,
        contractAddress: {
            97: "",
            56: "0x75C91844c5383A68b7d3A427A44C32E3ba66Fe45"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "3.616",
        isFinished: true
    },
    {
        sousId: 60,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.watch */ .ds.watch,
        contractAddress: {
            97: "",
            56: "0xC58954199E268505fa3D3Cb0A00b7207af8C2D1d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.3472",
        isFinished: true
    },
    {
        sousId: 59,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.xmark */ .ds.xmark,
        contractAddress: {
            97: "",
            56: "0xA5137e08C48167E363Be8Ec42A68f4F54330964E"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0413",
        isFinished: true
    },
    {
        sousId: 58,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bmxx */ .ds.bmxx,
        contractAddress: {
            97: "",
            56: "0x6F31B87f51654424Ce57E9F8243E27ed13846CDB"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.00248",
        isFinished: true
    },
    {
        sousId: 57,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.iotx */ .ds.iotx,
        contractAddress: {
            97: "",
            56: "0xCE54BA909d23B9d4BE0Ff0d84e5aE83F0ADD8D9a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "6.365",
        isFinished: true
    },
    {
        sousId: 56,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bor */ .ds.bor,
        contractAddress: {
            97: "",
            56: "0x3e677dC00668d69c2A7724b9AFA7363e8A56994e"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.000395",
        isFinished: true
    },
    {
        sousId: 55,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bopen */ .ds.bopen,
        contractAddress: {
            97: "",
            56: "0x5Ac8406498dC1921735d559CeC271bEd23B294A7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0723",
        isFinished: true
    },
    {
        sousId: 54,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sushi */ .ds.sushi,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0xb69b6e390cba1F68442A886bC89E955048DAe7E3"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0367",
        isFinished: true
    },
    {
        sousId: 53,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.dodo */ .ds.dodo,
        contractAddress: {
            97: "",
            56: "0xae3001ddb18A6A57BEC2C19D71680437CA87bA1D"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0578",
        isFinished: true
    },
    {
        sousId: 52,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.swingby */ .ds.swingby,
        contractAddress: {
            97: "",
            56: "0x02aa767e855b8e80506fb47176202aA58A95315a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.13",
        isFinished: true
    },
    {
        sousId: 51,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bry */ .ds.bry,
        contractAddress: {
            97: "",
            56: "0x1c736F4FB20C7742Ee83a4099fE92abA61dFca41"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1157",
        isFinished: true
    },
    {
        sousId: 50,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.zee */ .ds.zee,
        contractAddress: {
            97: "",
            56: "0x02861B607a5E87daf3FD6ec19DFB715F1b371379"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1736",
        isFinished: true
    },
    {
        sousId: 49,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.swgb */ .ds.swgb,
        contractAddress: {
            97: "",
            56: "0x73e4E8d010289267dEe3d1Fc48974B60363963CE"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.899",
        isFinished: true
    },
    {
        sousId: 48,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.comp */ .ds.comp,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0xE0565fBb109A3f3f8097D8A9D931277bfd795072"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.055",
        isFinished: true
    },
    {
        sousId: 47,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.comp */ .ds.comp,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0xc3693e3cbc3514d5d07EA5b27A721F184F617900"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.55",
        isFinished: true
    },
    {
        sousId: 46,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.sfp */ .ds.sfp,
        contractAddress: {
            97: "",
            56: "0x2B02d43967765b18E31a9621da640588f3550EFD"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6",
        isFinished: true
    },
    {
        sousId: 45,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lina */ .ds.lina,
        contractAddress: {
            97: "",
            56: "0x212bb602418C399c29D52C55100fD6bBa12bea05"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.983",
        isFinished: true
    },
    {
        sousId: 44,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lina */ .ds.lina,
        contractAddress: {
            97: "",
            56: "0x04aE8ca68A116278026fB721c06dCe709eD7013C"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0983",
        isFinished: true
    },
    {
        sousId: 43,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.lit */ .ds.lit,
        contractAddress: {
            97: "",
            56: "0x1714bAAE9DD4738CDEA07756427FA8d4F08D9479"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.231",
        isFinished: true
    },
    {
        sousId: 42,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hget */ .ds.hget,
        contractAddress: {
            97: "",
            56: "0xcCD0b93cC6ce3dC6dFaA9DB68f70e5C8455aC5bd"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0138",
        isFinished: true
    },
    {
        sousId: 41,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bdo */ .ds.bdo,
        contractAddress: {
            97: "",
            56: "0x9cB24e9460351bC51d4066BC6AEd1F3809b02B78"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.075",
        isFinished: true
    },
    {
        sousId: 40,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.egld */ .ds.egld,
        contractAddress: {
            97: "",
            56: "0x2dcf4cDFf4Dd954683Fe0a6123077f8a025b66cF"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.001215",
        isFinished: true
    },
    {
        sousId: 39,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ust */ .ds.ust,
        contractAddress: {
            97: "",
            56: "0x6EFa207ACdE6e1caB77c1322CbdE9628929ba88F"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.1157",
        isFinished: true
    },
    {
        sousId: 38,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.wsote */ .ds.wsote,
        contractAddress: {
            97: "",
            56: "0xD0b738eC507571176D40f28bd56a0120E375f73a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.23",
        isFinished: true
    },
    {
        sousId: 37,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.front */ .ds.front,
        contractAddress: {
            97: "",
            56: "0xf7a31366732F08E8e6B88519dC3E827e04616Fc9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.2546",
        isFinished: true
    },
    {
        sousId: 36,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.helmet */ .ds.helmet,
        contractAddress: {
            97: "",
            56: "0x9F23658D5f4CEd69282395089B0f8E4dB85C6e79"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.81",
        isFinished: true
    },
    {
        sousId: 35,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.btcst */ .ds.btcst,
        contractAddress: {
            97: "",
            56: "0xB6fd2724cc9c90DD31DA35DbDf0300009dceF97d"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.011574",
        isFinished: true
    },
    {
        sousId: 34,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bscx */ .ds.bscx,
        contractAddress: {
            97: "",
            56: "0x108BFE84Ca8BCe0741998cb0F60d313823cEC143"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.17361",
        isFinished: true
    },
    {
        sousId: 33,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ten */ .ds.ten,
        contractAddress: {
            97: "",
            56: "0x4A26b082B432B060B1b00A84eE4E823F04a6f69a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.05787",
        isFinished: true
    },
    {
        sousId: 32,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.balbt */ .ds.balbt,
        contractAddress: {
            97: "",
            56: "0x3cc08B7C6A31739CfEd9d8d38b484FDb245C79c8"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.4166",
        isFinished: true
    },
    {
        sousId: 31,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.asr */ .ds.asr,
        contractAddress: {
            97: "",
            56: "0xd18E1AEb349ef0a6727eCe54597D98D263e05CAB"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01",
        isFinished: true
    },
    {
        sousId: 30,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.atm */ .ds.atm,
        contractAddress: {
            97: "",
            56: "0x68C7d180bD8F7086D91E65A422c59514e4aFD638"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01",
        isFinished: true
    },
    {
        sousId: 29,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.og */ .ds.og,
        contractAddress: {
            97: "",
            56: "0xbE65d7e42E05aD2c4ad28769dc9c5b4b6EAff2C7"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01",
        isFinished: true
    },
    {
        sousId: 28,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.reef */ .ds.reef,
        contractAddress: {
            97: "",
            56: "0x1500fa1afbfe4f4277ed0345cdf12b2c9ca7e139"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "115.74",
        isFinished: true
    },
    {
        sousId: 27,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ditto */ .ds.ditto,
        contractAddress: {
            97: "",
            56: "0x624ef5C2C6080Af188AF96ee5B3160Bb28bb3E02"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.01157"
    },
    {
        sousId: 26,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.twt */ .ds.twt,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0x0554a5D083Abf2f056ae3F6029e1714B9A655174"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.248",
        isFinished: true
    },
    {
        sousId: 24,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.juv */ .ds.juv,
        contractAddress: {
            97: "",
            56: "0x543467B17cA5De50c8BF7285107A36785Ab57E56"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02",
        isFinished: true
    },
    {
        sousId: 25,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.psg */ .ds.psg,
        contractAddress: {
            97: "",
            56: "0x65aFEAFaec49F23159e897EFBDCe19D94A86A1B6"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02",
        isFinished: true
    },
    {
        sousId: 21,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.vai */ .ds.vai,
        contractAddress: {
            97: "",
            56: "0x1AD34D8d4D79ddE88c9B6b8490F8fC67831f2CAe"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.104",
        isFinished: true
    },
    {
        sousId: 20,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bnb */ .ds.bnb,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        contractAddress: {
            97: "",
            56: "0x555Ea72d7347E82C614C16f005fA91cAf06DCB5a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.BINANCE */ .jh.BINANCE,
        tokenPerBlock: "0.5",
        isFinished: true
    },
    {
        sousId: 19,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.bnb */ .ds.bnb,
        contractAddress: {
            97: "",
            56: "0x326D754c64329aD7cb35744770D56D0E1f3B3124"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.0041",
        isFinished: true
    },
    {
        sousId: 18,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.blink */ .ds.blink,
        contractAddress: {
            97: "",
            56: "0x42Afc29b2dEa792974d1e9420696870f1Ca6d18b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "23.14",
        isFinished: true
    },
    {
        sousId: 17,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.blink */ .ds.blink,
        contractAddress: {
            97: "",
            56: "0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "23.14",
        isFinished: true,
        enableEmergencyWithdraw: true
    },
    {
        sousId: 16,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.unfi */ .ds.unfi,
        contractAddress: {
            97: "",
            56: "0xFb1088Dae0f03C5123587d2babb3F307831E6367"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.02893",
        isFinished: true
    },
    {
        sousId: 15,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.twt */ .ds.twt,
        contractAddress: {
            97: "",
            56: "0x9c4EBADa591FFeC4124A7785CAbCfb7068fED2fb"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "5",
        isFinished: true
    },
    {
        sousId: 14,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.hard */ .ds.hard,
        contractAddress: {
            97: "",
            56: "0x90F995b9d46b32c4a1908A8c6D0122e392B3Be97"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.346",
        isFinished: true
    },
    {
        sousId: 13,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.broobee */ .ds.broobee,
        contractAddress: {
            97: "",
            56: "0xdc8c45b7F3747Ca9CaAEB3fa5e0b5FCE9430646b"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.COMMUNITY */ .jh.COMMUNITY,
        tokenPerBlock: "12.5",
        isFinished: true
    },
    {
        sousId: 12,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.stax */ .ds.stax,
        contractAddress: {
            97: "",
            56: "0xFF02241a2A1d2a7088A344309400E9fE74772815"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.COMMUNITY */ .jh.COMMUNITY,
        tokenPerBlock: "0.2",
        isFinished: true
    },
    {
        sousId: 11,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nar */ .ds.nar,
        contractAddress: {
            97: "",
            56: "0xDc938BA1967b06d666dA79A7B1E31a8697D1565E"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.COMMUNITY */ .jh.COMMUNITY,
        tokenPerBlock: "1",
        isFinished: true
    },
    {
        sousId: 10,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.nya */ .ds.nya,
        contractAddress: {
            97: "",
            56: "0x07a0A5B67136d40F4d7d95Bc8e0583bafD7A81b9"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.COMMUNITY */ .jh.COMMUNITY,
        tokenPerBlock: "10",
        isFinished: true
    },
    {
        sousId: 9,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ctk */ .ds.ctk,
        contractAddress: {
            97: "",
            56: "0x21A9A53936E812Da06B7623802DEc9A1f94ED23a"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.5",
        isFinished: true
    },
    {
        sousId: 8,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.twt */ .ds.twt,
        contractAddress: {
            97: "",
            56: "0xe7f9A439Aa7292719aC817798DDd1c4D35934aAF"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "20",
        isFinished: true
    },
    {
        sousId: 7,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.inj */ .ds.inj,
        contractAddress: {
            97: "",
            56: "0xcec2671C81a0Ecf7F8Ee796EFa6DBDc5Cb062693"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.25",
        isFinished: true
    },
    {
        sousId: 248,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ccar */ .ds.ccar,
        contractAddress: {
            97: "",
            56: "0x9e31aef040941E67356519f44bcA07c5f82215e5"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        tokenPerBlock: "0.6093"
    },
    {
        sousId: 262,
        stakingToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.cake */ .ds.cake,
        earningToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_4__/* .bscTokens.ach */ .ds.ach,
        contractAddress: {
            97: "",
            56: "0xD5668e936B951292Ddf8c84553CC58F85948F816"
        },
        poolCategory: _types__WEBPACK_IMPORTED_MODULE_5__/* .PoolCategory.CORE */ .jh.CORE,
        enableEmergencyWithdraw: true,
        tokenPerBlock: "7.502"
    }, 
].map((p)=>({
        ...p,
        isFinished: true,
        stakingToken: p.stakingToken.serialize,
        earningToken: p.earningToken.serialize
    }));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([
    ...livePools,
    ...finishedPools
]);


/***/ }),

/***/ 81068:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "W": () => (/* reexport */ getFarmsPriceHelperLpFiles.getFarmsPriceHelperLpFiles),
  "u": () => (/* binding */ getPoolsPriceHelperLpFiles)
});

// EXTERNAL MODULE: ../../packages/farms/constants/priceHelperLps/getFarmsPriceHelperLpFiles.ts
var getFarmsPriceHelperLpFiles = __webpack_require__(17970);
// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
;// CONCATENATED MODULE: ./src/config/constants/priceHelperLps/pools/1.ts
// import { serializeTokens } from 'utils/serializeTokens'
// import { ethereumTokens } from '../tokens'
// const serializedTokens = serializeTokens(ethereumTokens)
const priceHelperLps = [];
/* harmony default export */ const _1 = (priceHelperLps);

;// CONCATENATED MODULE: ./src/config/constants/priceHelperLps/pools/5.ts
const _5_priceHelperLps = [];
/* harmony default export */ const _5 = (_5_priceHelperLps);

// EXTERNAL MODULE: ../../packages/tokens/src/index.ts + 6 modules
var src = __webpack_require__(72502);
;// CONCATENATED MODULE: ./src/config/constants/priceHelperLps/pools/56.ts

const _56_priceHelperLps = [
    /**
   * These LPs are just used to help with price calculation for MasterChef LPs (farms.ts).
   * This list is added to the MasterChefLps and passed to fetchFarm. The calls to get contract information about the token/quoteToken in the LP are still made.
   * The absence of a PID means the masterchef contract calls are skipped for this farm.
   * Prices are then fetched for all farms (masterchef + priceHelperLps).
   * Before storing to redux, farms without a PID are filtered out.
   */ {
        pid: null,
        lpSymbol: "ANKR-BNB LP",
        lpAddress: "0x3147F98B8f9C53Acdf8F16332eaD12B592a1a4ae",
        token: src/* bscTokens.ankr */.ds.ankr,
        quoteToken: src/* bscTokens.wbnb */.ds.wbnb
    }, 
].map((p)=>({
        ...p,
        token: p.token.serialize,
        quoteToken: p.quoteToken.serialize
    }));
/* harmony default export */ const _56 = (_56_priceHelperLps);

;// CONCATENATED MODULE: ./src/config/constants/priceHelperLps/pools/97.ts
// import { bscTestnetTokens } from '../tokens'
const _97_priceHelperLps = [];
/* harmony default export */ const _97 = (_97_priceHelperLps);

;// CONCATENATED MODULE: ./src/config/constants/priceHelperLps/index.ts







const getPoolsPriceHelperLpFiles = (chainId)=>{
    switch(chainId){
        case dist.ChainId.BSC:
            return _56;
        case dist.ChainId.BSC_TESTNET:
            return _97;
        case dist.ChainId.ETHEREUM:
            return _1;
        case dist.ChainId.GOERLI:
            return _5;
        default:
            return [];
    }
};


/***/ }),

/***/ 6429:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iF": () => (/* binding */ FetchStatus),
/* harmony export */   "jh": () => (/* binding */ PoolCategory),
/* harmony export */   "p3": () => (/* binding */ LotteryStatus),
/* harmony export */   "vr": () => (/* binding */ PoolIds),
/* harmony export */   "wo": () => (/* binding */ AuctionStatus)
/* harmony export */ });
var PoolIds;
(function(PoolIds) {
    PoolIds["poolBasic"] = "poolBasic";
    PoolIds["poolUnlimited"] = "poolUnlimited";
})(PoolIds || (PoolIds = {}));
var PoolCategory;
(function(PoolCategory) {
    PoolCategory["COMMUNITY"] = "Community";
    PoolCategory["CORE"] = "Core";
    PoolCategory["BINANCE"] = "Binance";
    PoolCategory["AUTO"] = "Auto";
})(PoolCategory || (PoolCategory = {}));
var LotteryStatus;
(function(LotteryStatus) {
    LotteryStatus["PENDING"] = "pending";
    LotteryStatus["OPEN"] = "open";
    LotteryStatus["CLOSE"] = "close";
    LotteryStatus["CLAIMABLE"] = "claimable";
})(LotteryStatus || (LotteryStatus = {}));
var AuctionStatus;
(function(AuctionStatus) {
    AuctionStatus[AuctionStatus["ToBeAnnounced"] = 0] = "ToBeAnnounced";
    AuctionStatus[AuctionStatus["Pending"] = 1] = "Pending";
    AuctionStatus[AuctionStatus["Open"] = 2] = "Open";
    AuctionStatus[AuctionStatus["Finished"] = 3] = "Finished";
    AuctionStatus[AuctionStatus["Closed"] = 4] = "Closed";
})(AuctionStatus || (AuctionStatus = {}));
var FetchStatus;
(function(FetchStatus) {
    FetchStatus["Idle"] = "IDLE";
    FetchStatus["Fetching"] = "FETCHING";
    FetchStatus["Fetched"] = "FETCHED";
    FetchStatus["Failed"] = "FAILED";
})(FetchStatus || (FetchStatus = {}));


/***/ }),

/***/ 7599:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bi": () => (/* binding */ BLOCKS_PER_YEAR),
/* harmony export */   "Gs": () => (/* binding */ IPFS_GATEWAY),
/* harmony export */   "Kk": () => (/* binding */ CAKE_PER_YEAR),
/* harmony export */   "QL": () => (/* binding */ DEFAULT_GAS_LIMIT),
/* harmony export */   "S_": () => (/* binding */ RECLAIM_AUCTIONS_TO_FETCH),
/* harmony export */   "St": () => (/* binding */ AUCTION_WHITELISTED_BIDDERS_TO_FETCH),
/* harmony export */   "ZM": () => (/* binding */ BOOSTED_FARM_GAS_LIMIT),
/* harmony export */   "hJ": () => (/* binding */ BSC_BLOCK_TIME),
/* harmony export */   "o3": () => (/* binding */ DEFAULT_TOKEN_DECIMAL),
/* harmony export */   "wI": () => (/* binding */ BASE_ADD_LIQUIDITY_URL),
/* harmony export */   "xG": () => (/* binding */ AUCTION_BIDDERS_TO_FETCH)
/* harmony export */ });
/* unused harmony exports CAKE_PER_BLOCK, BLOCKS_PER_DAY, BASE_URL */
/* harmony import */ var _pancakeswap_utils_getFullDecimalMultiplier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38766);

const BSC_BLOCK_TIME = 3;
// CAKE_PER_BLOCK details
// 40 CAKE is minted per block
// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)
// 10 CAKE per block goes to CAKE syrup pool
// 9 CAKE per block goes to Yield farms and lottery
// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.
// CAKE/Block in src/views/Home/components/CakeDataRow.tsx = 15 (40 - Amount sent to burn pool)
const CAKE_PER_BLOCK = 40;
const BLOCKS_PER_DAY = 60 / BSC_BLOCK_TIME * 60 * 24;
const BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365 // 10512000
;
const CAKE_PER_YEAR = CAKE_PER_BLOCK * BLOCKS_PER_YEAR;
const BASE_URL = "https://pancakeswap.finance";
const BASE_ADD_LIQUIDITY_URL = `${BASE_URL}/add`;
const DEFAULT_TOKEN_DECIMAL = (0,_pancakeswap_utils_getFullDecimalMultiplier__WEBPACK_IMPORTED_MODULE_0__/* .getFullDecimalMultiplier */ .t)(18);
const DEFAULT_GAS_LIMIT = 250000;
const BOOSTED_FARM_GAS_LIMIT = 500000;
const AUCTION_BIDDERS_TO_FETCH = 500;
const RECLAIM_AUCTIONS_TO_FETCH = 500;
const AUCTION_WHITELISTED_BIDDERS_TO_FETCH = 500;
const IPFS_GATEWAY = "https://ipfs.io/ipfs";


/***/ }),

/***/ 76166:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ useLocalNetworkChain),
/* harmony export */   "g": () => (/* binding */ useActiveChainId)
/* harmony export */ });
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82451);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71853);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40495);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8906);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(wagmi__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _useSessionChainId__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30914);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jotai__WEBPACK_IMPORTED_MODULE_1__, _useSessionChainId__WEBPACK_IMPORTED_MODULE_6__]);
([jotai__WEBPACK_IMPORTED_MODULE_1__, _useSessionChainId__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);







const queryChainIdAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_1__.atom)(-1) // -1 unload, 0 no chainId on query
;
queryChainIdAtom.onMount = (set)=>{
    const params = new URL(window.location.href).searchParams;
    const c = params.get("chainId");
    if ((0,utils_wagmi__WEBPACK_IMPORTED_MODULE_4__/* .isChainSupported */ .MR)(+c)) {
        set(+c);
    } else {
        set(0);
    }
};
function useLocalNetworkChain() {
    const [sessionChainId] = (0,_useSessionChainId__WEBPACK_IMPORTED_MODULE_6__/* .useSessionChainId */ .o)();
    // useRouter is kind of slow, we only get this query chainId once
    const queryChainId = (0,jotai__WEBPACK_IMPORTED_MODULE_1__.useAtomValue)(queryChainIdAtom);
    const { query  } = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();
    const chainId = +(sessionChainId || query.chainId || queryChainId);
    if ((0,utils_wagmi__WEBPACK_IMPORTED_MODULE_4__/* .isChainSupported */ .MR)(chainId)) {
        return chainId;
    }
    return undefined;
}
const useActiveChainId = ()=>{
    const localChainId = useLocalNetworkChain();
    const queryChainId = (0,jotai__WEBPACK_IMPORTED_MODULE_1__.useAtomValue)(queryChainIdAtom);
    const { chain  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_5__.useNetwork)();
    const chainId = localChainId ?? chain?.id ?? (queryChainId >= 0 ? _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC : undefined);
    const isNotMatched = (0,react__WEBPACK_IMPORTED_MODULE_3__.useDeferredValue)(chain && localChainId && chain.id !== localChainId);
    return {
        chainId,
        isWrongNetwork: (chain?.unsupported ?? false) || isNotMatched,
        isNotMatched
    };
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 65342:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": () => (/* binding */ useNetworkConnectorUpdater),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pancakeswap_wagmi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9270);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(71853);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _pancakeswap_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(65726);
/* harmony import */ var config_constants_exchange__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(92794);
/* harmony import */ var utils_wagmi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40495);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8906);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(wagmi__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _useActiveChainId__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(76166);
/* harmony import */ var _useSwitchNetworkLoading__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(41774);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pancakeswap_wagmi__WEBPACK_IMPORTED_MODULE_0__, _useActiveChainId__WEBPACK_IMPORTED_MODULE_8__, _useSwitchNetworkLoading__WEBPACK_IMPORTED_MODULE_9__]);
([_pancakeswap_wagmi__WEBPACK_IMPORTED_MODULE_0__, _useActiveChainId__WEBPACK_IMPORTED_MODULE_8__, _useSwitchNetworkLoading__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);










const getHashFromRouter = (router)=>{
    return router.asPath.match(/#([a-z0-9]+)/gi);
};
function useNetworkConnectorUpdater() {
    const { chainId  } = useActiveWeb3React();
    const previousChainId = (0,_pancakeswap_hooks__WEBPACK_IMPORTED_MODULE_3__/* .usePreviousValue */ .zP)(chainId);
    const [loading] = (0,_useSwitchNetworkLoading__WEBPACK_IMPORTED_MODULE_9__/* .useSwitchNetworkLoading */ .c)();
    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_1__.useRouter)();
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (loading || !router.isReady) return;
        const parsedQueryChainId = Number(router.query.chainId);
        if (!parsedQueryChainId && chainId === _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__.ChainId.BSC) return;
        if (parsedQueryChainId !== chainId && (0,utils_wagmi__WEBPACK_IMPORTED_MODULE_5__/* .isChainSupported */ .MR)(chainId)) {
            const removeQueriesFromPath = previousChainId !== chainId && config_constants_exchange__WEBPACK_IMPORTED_MODULE_4__/* .EXCHANGE_PAGE_PATHS.some */ .rU.some((item)=>{
                return router.pathname.startsWith(item);
            });
            const uriHash = getHashFromRouter(router)?.[0];
            router.replace({
                query: {
                    ...!removeQueriesFromPath && router.query,
                    chainId
                },
                ...uriHash && {
                    hash: uriHash
                }
            }, undefined);
        }
    }, [
        previousChainId,
        chainId,
        loading,
        router
    ]);
}
/**
 * Provides a web3 provider with or without user's signer
 * Recreate web3 instance only if the provider change
 */ const useActiveWeb3React = ()=>{
    const web3React = (0,_pancakeswap_wagmi__WEBPACK_IMPORTED_MODULE_0__/* .useWeb3React */ .Ge)();
    const { chainId , isWrongNetwork  } = (0,_useActiveChainId__WEBPACK_IMPORTED_MODULE_8__/* .useActiveChainId */ .g)();
    const provider = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useProvider)({
        chainId
    });
    return {
        provider,
        ...web3React,
        chainId,
        isWrongNetwork
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useActiveWeb3React);

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 74860:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AP": () => (/* binding */ useSousChef),
/* harmony export */   "Ak": () => (/* binding */ useVaultPoolContract),
/* harmony export */   "DE": () => (/* binding */ useBCakeProxyContract),
/* harmony export */   "DU": () => (/* binding */ useNftMarketContract),
/* harmony export */   "Dm": () => (/* binding */ useIfoV3Contract),
/* harmony export */   "GT": () => (/* binding */ useCrossFarmingProxy),
/* harmony export */   "Gj": () => (/* binding */ useNftSaleContract),
/* harmony export */   "HQ": () => (/* binding */ useErc721CollectionContract),
/* harmony export */   "Hn": () => (/* binding */ useChainlinkOracleContract),
/* harmony export */   "Ib": () => (/* binding */ useTokenContract),
/* harmony export */   "LN": () => (/* binding */ useBunnyFactory),
/* harmony export */   "LZ": () => (/* binding */ useNonBscVault),
/* harmony export */   "O1": () => (/* binding */ useTradingCompetitionContractMobox),
/* harmony export */   "Tu": () => (/* binding */ usePredictionsContract),
/* harmony export */   "VR": () => (/* binding */ usePointCenterIfoContract),
/* harmony export */   "X0": () => (/* binding */ useLotteryV2Contract),
/* harmony export */   "X_": () => (/* binding */ useERC20),
/* harmony export */   "Yv": () => (/* binding */ useTradingCompetitionContractEaster),
/* harmony export */   "aV": () => (/* binding */ useTradingCompetitionContractFanToken),
/* harmony export */   "bb": () => (/* binding */ useAnniversaryAchievementContract),
/* harmony export */   "cq": () => (/* binding */ useContract),
/* harmony export */   "gh": () => (/* binding */ useBCakeFarmBoosterContract),
/* harmony export */   "gq": () => (/* binding */ useMulticallContract),
/* harmony export */   "gs": () => (/* binding */ useBytes32TokenContract),
/* harmony export */   "gx": () => (/* binding */ useIfoV2Contract),
/* harmony export */   "h": () => (/* binding */ useMasterchefV1),
/* harmony export */   "jw": () => (/* binding */ usePotterytDrawContract),
/* harmony export */   "kL": () => (/* binding */ useCake),
/* harmony export */   "lZ": () => (/* binding */ useBCakeFarmBoosterProxyFactoryContract),
/* harmony export */   "n9": () => (/* binding */ useZapContract),
/* harmony export */   "nc": () => (/* binding */ useIfoV1Contract),
/* harmony export */   "nl": () => (/* binding */ usePotterytVaultContract),
/* harmony export */   "o$": () => (/* binding */ useTradingCompetitionContractMoD),
/* harmony export */   "t0": () => (/* binding */ usePairContract),
/* harmony export */   "vR": () => (/* binding */ useWNativeContract),
/* harmony export */   "wl": () => (/* binding */ useFarmAuctionContract),
/* harmony export */   "wr": () => (/* binding */ useProfileContract),
/* harmony export */   "y8": () => (/* binding */ useMasterchef)
/* harmony export */ });
/* unused harmony exports useERC721, usePancakeBunnies, useBunnySpecialContract, useClaimRefundContract, useEasterNftContract, useCakeVaultContract, useSpecialBunnyCakeVaultContract, useSpecialBunnyPredictionContract, useBunnySpecialLotteryContract, useBunnySpecialXmasContract, usePancakeSquadContract */
/* harmony import */ var config_abi_zap_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5534);
/* harmony import */ var hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65342);
/* harmony import */ var hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40395);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(70627);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12895);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8906);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(wagmi__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var config_abi_erc20__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71691);
/* harmony import */ var config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(93324);
/* harmony import */ var config_abi_IPancakePair_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(93725);
/* harmony import */ var config_abi_Multicall_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(33373);
/* harmony import */ var config_abi_weth_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(69253);
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(5305);
/* harmony import */ var state_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(93638);
/* harmony import */ var _useActiveChainId__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(76166);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__, hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__, _useActiveChainId__WEBPACK_IMPORTED_MODULE_15__]);
([hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__, hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__, _useActiveChainId__WEBPACK_IMPORTED_MODULE_15__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
















/**
 * Helper hooks to get specific contracts (by ABI)
 */ const useIfoV1Contract = (address)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getIfoV1Contract */ .rc)(address, signer), [
        address,
        signer
    ]);
};
const useIfoV2Contract = (address)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getIfoV2Contract */ .Ci)(address, signer), [
        address,
        signer
    ]);
};
const useIfoV3Contract = (address)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getIfoV3Contract */ .Bu)(address, signer), [
        address,
        signer
    ]);
};
const useERC20 = (address, withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getBep20Contract */ .jS)(address, providerOrSigner), [
        address,
        providerOrSigner
    ]);
};
/**
 * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721
 */ const useERC721 = (address, withSignerIfPossible = true)=>{
    const providerOrSigner = useProviderOrSigner(withSignerIfPossible);
    return useMemo(()=>getErc721Contract(address, providerOrSigner), [
        address,
        providerOrSigner
    ]);
};
const useCake = ()=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({
            reader: (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakeContract */ .XT)(null),
            signer: (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakeContract */ .XT)(providerOrSigner)
        }), [
        providerOrSigner
    ]);
};
const useBunnyFactory = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getBunnyFactoryContract */ .mU)(signer), [
        signer
    ]);
};
const usePancakeBunnies = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getPancakeBunniesContract(signer), [
        signer
    ]);
};
const useProfileContract = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getProfileContract */ .Y4)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useLotteryV2Contract = ()=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getLotteryV2Contract */ .yd)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useMasterchef = (withSignerIfPossible = true)=>{
    const { chainId  } = (0,_useActiveChainId__WEBPACK_IMPORTED_MODULE_15__/* .useActiveChainId */ .g)();
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getMasterchefContract */ .aE)(providerOrSigner, chainId), [
        providerOrSigner,
        chainId
    ]);
};
const useMasterchefV1 = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getMasterchefV1Contract */ .QH)(signer), [
        signer
    ]);
};
const useSousChef = (id)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getSouschefContract */ .KV)(id, signer), [
        id,
        signer
    ]);
};
const usePointCenterIfoContract = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getPointCenterIfoContract */ .RJ)(signer), [
        signer
    ]);
};
const useBunnySpecialContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getBunnySpecialContract(signer), [
        signer
    ]);
};
const useClaimRefundContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getClaimRefundContract(signer), [
        signer
    ]);
};
const useTradingCompetitionContractEaster = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getTradingCompetitionContractEaster */ .v7)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useTradingCompetitionContractFanToken = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getTradingCompetitionContractFanToken */ .dY)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useTradingCompetitionContractMobox = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getTradingCompetitionContractMobox */ .n7)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useTradingCompetitionContractMoD = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getTradingCompetitionContractMoD */ .gf)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useEasterNftContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getEasterNftContract(signer), [
        signer
    ]);
};
const useVaultPoolContract = (vaultKey)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{
        if (vaultKey === state_types__WEBPACK_IMPORTED_MODULE_14__/* .VaultKey.CakeVault */ .om.CakeVault) {
            return (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakeVaultV2Contract */ .OJ)(signer);
        }
        if (vaultKey === state_types__WEBPACK_IMPORTED_MODULE_14__/* .VaultKey.CakeFlexibleSideVault */ .om.CakeFlexibleSideVault) {
            return (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakeFlexibleSideVaultV2Contract */ .J7)(signer);
        }
        return null;
    }, [
        signer,
        vaultKey
    ]);
};
const useCakeVaultContract = (withSignerIfPossible = true)=>{
    const providerOrSigner = useProviderOrSigner(withSignerIfPossible);
    return useMemo(()=>getCakeVaultV2Contract(providerOrSigner), [
        providerOrSigner
    ]);
};
const usePredictionsContract = (address, tokenSymbol)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{
        if (address === (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getPredictionsV1Address */ .wA)()) {
            return (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getPredictionsV1Contract */ .xq)(signer);
        }
        const getPredContract = tokenSymbol === "CAKE" ? utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakePredictionsContract */ .Gn : utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getPredictionsContract */ .qi;
        return getPredContract(address, signer);
    }, [
        address,
        tokenSymbol,
        signer
    ]);
};
const useChainlinkOracleContract = (address, withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getChainlinkOracleContract */ .Qr)(address, providerOrSigner), [
        providerOrSigner,
        address
    ]);
};
const useSpecialBunnyCakeVaultContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getBunnySpecialCakeVaultContract(signer), [
        signer
    ]);
};
const useSpecialBunnyPredictionContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getBunnySpecialPredictionContract(signer), [
        signer
    ]);
};
const useBunnySpecialLotteryContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getBunnySpecialLotteryContract(signer), [
        signer
    ]);
};
const useBunnySpecialXmasContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getBunnySpecialXmasContract(signer), [
        signer
    ]);
};
const useAnniversaryAchievementContract = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getAnniversaryAchievementContract */ .f$)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useNftSaleContract = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getNftSaleContract */ .vT)(signer), [
        signer
    ]);
};
const usePancakeSquadContract = ()=>{
    const { data: signer  } = useSigner();
    return useMemo(()=>getPancakeSquadContract(signer), [
        signer
    ]);
};
const useFarmAuctionContract = (withSignerIfPossible = true)=>{
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getFarmAuctionContract */ .hb)(providerOrSigner), [
        providerOrSigner
    ]);
};
const useNftMarketContract = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getNftMarketContract */ .X$)(signer), [
        signer
    ]);
};
const useErc721CollectionContract = (collectionAddress)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({
            reader: (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getErc721CollectionContract */ .pF)(null, collectionAddress),
            signer: (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getErc721CollectionContract */ .pF)(signer, collectionAddress)
        }), [
        signer,
        collectionAddress
    ]);
};
// Code below migrated from Exchange useContract.ts
// returns null on errors
function useContract(address, ABI, withSignerIfPossible = true) {
    const { provider  } = (0,hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)();
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible) ?? provider;
    const canReturnContract = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>address && ABI && providerOrSigner, [
        address,
        ABI,
        providerOrSigner
    ]);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{
        if (!canReturnContract) return null;
        try {
            return (0,utils__WEBPACK_IMPORTED_MODULE_13__/* .getContract */ .uN)(address, ABI, providerOrSigner);
        } catch (error) {
            console.error("Failed to get contract", error);
            return null;
        }
    }, [
        address,
        ABI,
        providerOrSigner,
        canReturnContract
    ]);
}
function useTokenContract(tokenAddress, withSignerIfPossible) {
    return useContract(tokenAddress, config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_9__, withSignerIfPossible);
}
function useWNativeContract(withSignerIfPossible) {
    const { chainId  } = (0,hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)();
    return useContract(chainId ? _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_7__.WNATIVE[chainId]?.address : undefined, config_abi_weth_json__WEBPACK_IMPORTED_MODULE_12__, withSignerIfPossible);
}
function useBytes32TokenContract(tokenAddress, withSignerIfPossible) {
    return useContract(tokenAddress, config_abi_erc20__WEBPACK_IMPORTED_MODULE_8__/* .ERC20_BYTES32_ABI */ .Jz, withSignerIfPossible);
}
function usePairContract(pairAddress, withSignerIfPossible) {
    return useContract(pairAddress, config_abi_IPancakePair_json__WEBPACK_IMPORTED_MODULE_10__, withSignerIfPossible);
}
function useMulticallContract() {
    const { chainId  } = (0,hooks_useActiveWeb3React__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)();
    return useContract((0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getMulticallAddress */ .I8)(chainId), config_abi_Multicall_json__WEBPACK_IMPORTED_MODULE_11__, false);
}
const usePotterytVaultContract = (address)=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getPotteryVaultContract */ .s4)(address, signer), [
        address,
        signer
    ]);
};
const usePotterytDrawContract = ()=>{
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_6__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getPotteryDrawContract */ .ty)(signer), [
        signer
    ]);
};
function useZapContract(withSignerIfPossible = true) {
    return useContract((0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getZapAddress */ ._M)(), config_abi_zap_json__WEBPACK_IMPORTED_MODULE_0__, withSignerIfPossible);
}
function useBCakeFarmBoosterContract(withSignerIfPossible = true) {
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getBCakeFarmBoosterContract */ .Bj)(providerOrSigner), [
        providerOrSigner
    ]);
}
function useBCakeFarmBoosterProxyFactoryContract(withSignerIfPossible = true) {
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getBCakeFarmBoosterProxyFactoryContract */ .Ve)(providerOrSigner), [
        providerOrSigner
    ]);
}
function useBCakeProxyContract(proxyContractAddress, withSignerIfPossible = true) {
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>proxyContractAddress && (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getBCakeProxyContract */ .Ux)(proxyContractAddress, providerOrSigner), [
        providerOrSigner,
        proxyContractAddress
    ]);
}
const useNonBscVault = (withSignerIfPossible = true)=>{
    const { chainId  } = (0,_useActiveChainId__WEBPACK_IMPORTED_MODULE_15__/* .useActiveChainId */ .g)();
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getNonBscVaultContract */ .aM)(providerOrSigner, chainId), [
        providerOrSigner,
        chainId
    ]);
};
const useCrossFarmingProxy = (proxyContractAddress, withSignerIfPossible = true)=>{
    const { chainId  } = (0,_useActiveChainId__WEBPACK_IMPORTED_MODULE_15__/* .useActiveChainId */ .g)();
    const providerOrSigner = (0,hooks_useProviderOrSigner__WEBPACK_IMPORTED_MODULE_2__/* .useProviderOrSigner */ .J)(withSignerIfPossible);
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>proxyContractAddress && (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCrossFarmingProxyContract */ .vr)(proxyContractAddress, providerOrSigner, chainId), [
        proxyContractAddress,
        providerOrSigner,
        chainId
    ]);
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 40395:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => (/* binding */ useProviderOrSigner)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8906);
/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(wagmi__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _useActiveChainId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76166);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_useActiveChainId__WEBPACK_IMPORTED_MODULE_2__]);
_useActiveChainId__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];



const useProviderOrSigner = (withSignerIfPossible = true)=>{
    const { chainId  } = (0,_useActiveChainId__WEBPACK_IMPORTED_MODULE_2__/* .useActiveChainId */ .g)();
    const provider = (0,wagmi__WEBPACK_IMPORTED_MODULE_1__.useProvider)({
        chainId
    });
    const { address , isConnected  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_1__.useAccount)();
    const { data: signer  } = (0,wagmi__WEBPACK_IMPORTED_MODULE_1__.useSigner)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>withSignerIfPossible && address && isConnected && signer ? signer : provider, [
        address,
        isConnected,
        provider,
        signer,
        withSignerIfPossible
    ]);
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 30914:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o": () => (/* binding */ useSessionChainId)
/* harmony export */ });
/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82451);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jotai__WEBPACK_IMPORTED_MODULE_0__]);
jotai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];

const sessionChainIdAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(0);
const useSessionChainId = ()=>{
    return (0,jotai__WEBPACK_IMPORTED_MODULE_0__.useAtom)(sessionChainIdAtom);
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 41774:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ useSwitchNetworkLoading)
/* harmony export */ });
/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82451);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jotai__WEBPACK_IMPORTED_MODULE_0__]);
jotai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];

const switchNetworkLoadingAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(false);
const useSwitchNetworkLoading = ()=>{
    return (0,jotai__WEBPACK_IMPORTED_MODULE_0__.useAtom)(switchNetworkLoadingAtom);
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 80194:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => (/* binding */ typeInput),
/* harmony export */   "g": () => (/* binding */ Field)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

var Field;
(function(Field) {
    Field["LIQUIDITY_PERCENT"] = "LIQUIDITY_PERCENT";
    Field["LIQUIDITY"] = "LIQUIDITY";
    Field["CURRENCY_A"] = "CURRENCY_A";
    Field["CURRENCY_B"] = "CURRENCY_B";
})(Field || (Field = {}));
const typeInput = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("burn/typeInputBurn");


/***/ }),

/***/ 18994:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80194);


const initialState = {
    independentField: _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.LIQUIDITY_PERCENT */ .g.LIQUIDITY_PERCENT,
    typedValue: "0"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .typeInput */ .L, (state, { payload: { field , typedValue  }  })=>{
        return {
            ...state,
            independentField: field,
            typedValue
        };
    })));


/***/ }),

/***/ 91367:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ck": () => (/* binding */ fetchFarmUserStakedBalances),
/* harmony export */   "Rn": () => (/* binding */ fetchFarmUserTokenBalances),
/* harmony export */   "gs": () => (/* binding */ fetchCProxyAddress),
/* harmony export */   "m5": () => (/* binding */ fetchFarmUserAllowances),
/* harmony export */   "z1": () => (/* binding */ fetchFarmUserEarnings)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93324);
/* harmony import */ var config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84951);
/* harmony import */ var config_abi_nonBscVault_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(31534);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25152);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(70627);
/* harmony import */ var utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(30375);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12895);
/* harmony import */ var state_farms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(44868);










const fetchFarmUserAllowances = async (account, farmsToFetch, chainId, proxyAddress)=>{
    const isBscNetwork = (0,utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_7__/* .verifyBscNetwork */ .H)(chainId);
    const masterChefAddress = isBscNetwork ? (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__/* .getMasterChefAddress */ .Oc)(chainId) : (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__/* .getNonBscVaultAddress */ .$N)(chainId);
    const calls = farmsToFetch.map((farm)=>{
        const lpContractAddress = farm.lpAddress;
        return {
            address: lpContractAddress,
            name: "allowance",
            params: [
                account,
                proxyAddress || masterChefAddress
            ]
        };
    });
    const rawLpAllowances = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__, calls, chainId);
    const parsedLpAllowances = rawLpAllowances.map((lpBalance)=>{
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(lpBalance).toJSON();
    });
    return parsedLpAllowances;
};
const fetchFarmUserTokenBalances = async (account, farmsToFetch, chainId)=>{
    const calls = farmsToFetch.map((farm)=>{
        const lpContractAddress = farm.lpAddress;
        return {
            address: lpContractAddress,
            name: "balanceOf",
            params: [
                account
            ]
        };
    });
    const rawTokenBalances = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__, calls, chainId);
    const parsedTokenBalances = rawTokenBalances.map((tokenBalance)=>{
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(tokenBalance).toJSON();
    });
    return parsedTokenBalances;
};
const fetchFarmUserStakedBalances = async (account, farmsToFetch, chainId)=>{
    const isBscNetwork = (0,utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_7__/* .verifyBscNetwork */ .H)(chainId);
    const masterChefAddress = isBscNetwork ? (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__/* .getMasterChefAddress */ .Oc)(chainId) : (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__/* .getNonBscVaultAddress */ .$N)(chainId);
    const calls = farmsToFetch.map((farm)=>{
        return {
            address: masterChefAddress,
            name: "userInfo",
            params: [
                farm.vaultPid ?? farm.pid,
                account
            ]
        };
    });
    const rawStakedBalances = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_5__/* .multicallv2 */ .v)({
        abi: isBscNetwork ? config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_3__ : config_abi_nonBscVault_json__WEBPACK_IMPORTED_MODULE_4__,
        calls,
        chainId,
        options: {
            requireSuccess: false
        }
    });
    const parsedStakedBalances = rawStakedBalances.map((stakedBalance)=>{
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(stakedBalance[0]._hex).toJSON();
    });
    return parsedStakedBalances;
};
const fetchFarmUserEarnings = async (account, farmsToFetch, chainId)=>{
    const isBscNetwork = (0,utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_7__/* .verifyBscNetwork */ .H)(chainId);
    const multiCallChainId = state_farms__WEBPACK_IMPORTED_MODULE_9__/* .farmFetcher.isTestnet */ .H.isTestnet(chainId) ? _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BSC_TESTNET : _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BSC;
    const userAddress = isBscNetwork ? account : await fetchCProxyAddress(account, multiCallChainId);
    const masterChefAddress = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_6__/* .getMasterChefAddress */ .Oc)(multiCallChainId);
    const calls = farmsToFetch.map((farm)=>{
        return {
            address: masterChefAddress,
            name: "pendingCake",
            params: [
                farm.pid,
                userAddress
            ]
        };
    });
    const rawEarnings = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_5__/* .multicallv2 */ .v)({
        abi: config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_3__,
        calls,
        chainId: multiCallChainId
    });
    const parsedEarnings = rawEarnings.map((earnings)=>{
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(earnings).toJSON();
    });
    return parsedEarnings;
};
const fetchCProxyAddress = async (address, chainId)=>{
    try {
        const crossFarmingAddress = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_8__/* .getCrossFarmingReceiverContract */ .x7)(null, chainId);
        const cProxyAddress = await crossFarmingAddress.cProxy(address);
        return cProxyAddress.toString();
    } catch (error) {
        console.error("Failed Fetch CProxy Address", error);
        return address;
    }
};


/***/ }),

/***/ 98200:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ farms_fetchFarms)
});

// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(34215);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);
// EXTERNAL MODULE: ../../packages/utils/getFullDecimalMultiplier.ts
var getFullDecimalMultiplier = __webpack_require__(38766);
// EXTERNAL MODULE: ../../packages/utils/bigNumber.ts
var bigNumber = __webpack_require__(85576);
// EXTERNAL MODULE: ./src/state/farms/fetchMasterChefData.ts
var fetchMasterChefData = __webpack_require__(6818);
// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
// EXTERNAL MODULE: ./src/config/abi/erc20.json
var erc20 = __webpack_require__(93324);
// EXTERNAL MODULE: external "lodash/chunk"
var chunk_ = __webpack_require__(90221);
var chunk_default = /*#__PURE__*/__webpack_require__.n(chunk_);
// EXTERNAL MODULE: ./src/utils/addressHelpers.ts
var addressHelpers = __webpack_require__(70627);
// EXTERNAL MODULE: ./src/utils/multicall.ts
var multicall = __webpack_require__(25152);
;// CONCATENATED MODULE: ./src/state/farms/fetchPublicFarmData.ts





const fetchFarmCalls = (farm, chainId)=>{
    const { lpAddress , token , quoteToken  } = farm;
    return [
        // Balance of token in the LP contract
        {
            address: token.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of quote token on LP contract
        {
            address: quoteToken.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of LP tokens in the master chef contract
        {
            address: lpAddress,
            name: "balanceOf",
            params: [
                (0,addressHelpers/* getMasterChefAddress */.Oc)(chainId)
            ]
        },
        // Total supply of LP tokens
        {
            address: lpAddress,
            name: "totalSupply"
        },
        // Token decimals
        {
            address: token.address,
            name: "decimals"
        },
        // Quote token decimals
        {
            address: quoteToken.address,
            name: "decimals"
        }, 
    ];
};
const fetchPublicFarmsData = async (farms, chainId = dist.ChainId.BSC)=>{
    const farmCalls = farms.flatMap((farm)=>fetchFarmCalls(farm, chainId));
    const chunkSize = farmCalls.length / farms.length;
    const farmMultiCallResult = await (0,multicall/* multicallv2 */.v)({
        abi: erc20,
        calls: farmCalls,
        chainId
    });
    return chunk_default()(farmMultiCallResult, chunkSize);
};

;// CONCATENATED MODULE: ./src/state/farms/fetchFarms.ts





function getLpInfo({ tokenBalanceLP , quoteTokenBalanceLP , lpTokenBalanceMC , lpTotalSupply , tokenDecimals , quoteTokenDecimals ,  }) {
    const lpTotalSupplyBN = new (external_bignumber_js_default())(lpTotalSupply);
    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation
    const lpTokenRatio = new (external_bignumber_js_default())(lpTokenBalanceMC).div(new (external_bignumber_js_default())(lpTotalSupplyBN));
    // Raw amount of token in the LP, including those not staked
    const tokenAmountTotal = new (external_bignumber_js_default())(tokenBalanceLP).div((0,getFullDecimalMultiplier/* getFullDecimalMultiplier */.t)(tokenDecimals));
    const quoteTokenAmountTotal = new (external_bignumber_js_default())(quoteTokenBalanceLP).div((0,getFullDecimalMultiplier/* getFullDecimalMultiplier */.t)(quoteTokenDecimals));
    // Amount of quoteToken in the LP that are staked in the MC
    const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio);
    // Total staked in LP, in quote token value
    const lpTotalInQuoteToken = quoteTokenAmountMc.times(bigNumber/* BIG_TWO */.ju);
    return {
        tokenAmountTotal: tokenAmountTotal.toJSON(),
        quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),
        lpTotalSupply: lpTotalSupplyBN.toJSON(),
        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),
        tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON()
    };
}
function farmLpTransformer(farmResult, masterChefResult) {
    return (farm, index)=>{
        const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, [tokenDecimals], [quoteTokenDecimals], ] = farmResult[index];
        const [info, totalRegularAllocPoint] = masterChefResult[index];
        const allocPoint = info ? new (external_bignumber_js_default())(info.allocPoint?._hex) : bigNumber/* BIG_ZERO */.HW;
        const poolWeight = totalRegularAllocPoint ? allocPoint.div(new (external_bignumber_js_default())(totalRegularAllocPoint)) : bigNumber/* BIG_ZERO */.HW;
        return {
            ...farm,
            token: farm.token,
            quoteToken: farm.quoteToken,
            poolWeight: poolWeight.toJSON(),
            multiplier: `${allocPoint.div(100).toString()}X`,
            ...getLpInfo({
                tokenBalanceLP,
                quoteTokenBalanceLP,
                lpTokenBalanceMC,
                lpTotalSupply,
                tokenDecimals,
                quoteTokenDecimals
            })
        };
    };
}
const fetchFarms = async (farmsToFetch, chainId)=>{
    const [farmResult, masterChefResult] = await Promise.all([
        fetchPublicFarmsData(farmsToFetch, chainId),
        (0,fetchMasterChefData/* fetchMasterChefData */.D)(farmsToFetch, chainId), 
    ]);
    return farmsToFetch.map(farmLpTransformer(farmResult, masterChefResult));
};
/* harmony default export */ const farms_fetchFarms = (fetchFarms);


/***/ }),

/***/ 6818:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ fetchMasterChefData),
/* harmony export */   "b": () => (/* binding */ fetchMasterChefFarmPoolLength)
/* harmony export */ });
/* harmony import */ var config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84951);
/* harmony import */ var lodash_chunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90221);
/* harmony import */ var lodash_chunk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_chunk__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(25152);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85576);
/* harmony import */ var state_farms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(44868);
/* harmony import */ var _utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(70627);








const fetchMasterChefFarmPoolLength = async (chainId)=>{
    try {
        const [poolLength] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_4__/* .multicallv2 */ .v)({
            abi: config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_0__,
            calls: [
                {
                    name: "poolLength",
                    address: (0,_utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getMasterChefAddress */ .Oc)(chainId)
                }, 
            ],
            chainId
        });
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_3___default())(poolLength).toNumber();
    } catch (error) {
        console.error("Fetch MasterChef Farm Pool Length Error: ", error);
        return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .BIG_ZERO.toNumber */ .HW.toNumber();
    }
};
const masterChefFarmCalls = async (farm)=>{
    const { pid , quoteToken  } = farm;
    const multiCallChainId = state_farms__WEBPACK_IMPORTED_MODULE_6__/* .farmFetcher.isTestnet */ .H.isTestnet(quoteToken.chainId) ? _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BSC_TESTNET : _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BSC;
    const masterChefAddress = (0,_utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getMasterChefAddress */ .Oc)(multiCallChainId);
    const masterChefPid = pid;
    return masterChefPid || masterChefPid === 0 ? [
        {
            address: masterChefAddress,
            name: "poolInfo",
            params: [
                masterChefPid
            ]
        },
        {
            address: masterChefAddress,
            name: "totalRegularAllocPoint"
        }, 
    ] : [
        null,
        null
    ];
};
const fetchMasterChefData = async (farms, chainId)=>{
    const masterChefCalls = await Promise.all(farms.map((farm)=>masterChefFarmCalls(farm)));
    const chunkSize = masterChefCalls.flat().length / farms.length;
    const masterChefAggregatedCalls = masterChefCalls.filter((masterChefCall)=>masterChefCall[0] !== null && masterChefCall[1] !== null).flat();
    const multiCallChainId = state_farms__WEBPACK_IMPORTED_MODULE_6__/* .farmFetcher.isTestnet */ .H.isTestnet(chainId) ? _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BSC_TESTNET : _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BSC;
    const masterChefMultiCallResult = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_4__/* .multicallv2 */ .v)({
        abi: config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_0__,
        calls: masterChefAggregatedCalls,
        chainId: multiCallChainId
    });
    const masterChefChunkedResultRaw = lodash_chunk__WEBPACK_IMPORTED_MODULE_1___default()(masterChefMultiCallResult, chunkSize);
    let masterChefChunkedResultCounter = 0;
    return masterChefCalls.map((masterChefCall)=>{
        if (masterChefCall[0] === null && masterChefCall[1] === null) {
            return [
                null,
                null
            ];
        }
        const data = masterChefChunkedResultRaw[masterChefChunkedResultCounter];
        masterChefChunkedResultCounter++;
        return data;
    });
};


/***/ }),

/***/ 76876:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85576);
/* harmony import */ var _pancakeswap_farms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(74086);



const getFarmFromTokenSymbol = (farms, tokenSymbol, preferredQuoteTokens)=>{
    const farmsWithTokenSymbol = farms.filter((farm)=>farm.token.symbol === tokenSymbol);
    const filteredFarm = (0,_pancakeswap_farms__WEBPACK_IMPORTED_MODULE_2__/* .filterFarmsByQuoteToken */ .t)(farmsWithTokenSymbol, preferredQuoteTokens);
    return filteredFarm;
};
const getFarmBaseTokenPrice = (farm, quoteTokenFarm, nativePriceUSD, wNative, stable)=>{
    const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote);
    if (farm.quoteToken.symbol === stable) {
        return hasTokenPriceVsQuote ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(farm.tokenPriceVsQuote) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    if (farm.quoteToken.symbol === wNative) {
        return hasTokenPriceVsQuote ? nativePriceUSD.times(farm.tokenPriceVsQuote) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms
    if (!quoteTokenFarm) {
        return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    // Possible alternative farm quoteTokens:
    // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)
    // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token
    // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)
    // from the BNB - pBTC price, we can calculate the PNT - BUSD price
    if (quoteTokenFarm.quoteToken.symbol === wNative) {
        const quoteTokenInBusd = nativePriceUSD.times(quoteTokenFarm.tokenPriceVsQuote);
        return hasTokenPriceVsQuote && quoteTokenInBusd ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === stable) {
        const quoteTokenInBusd1 = quoteTokenFarm.tokenPriceVsQuote;
        return hasTokenPriceVsQuote && quoteTokenInBusd1 ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(farm.tokenPriceVsQuote).times(quoteTokenInBusd1) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken
    return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
};
const getFarmQuoteTokenPrice = (farm, quoteTokenFarm, nativePriceUSD, wNative, stable)=>{
    if (farm.quoteToken.symbol === stable) {
        return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ONE */ .cQ;
    }
    if (farm.quoteToken.symbol === wNative) {
        return nativePriceUSD;
    }
    if (!quoteTokenFarm) {
        return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === wNative) {
        return quoteTokenFarm.tokenPriceVsQuote ? nativePriceUSD.times(quoteTokenFarm.tokenPriceVsQuote) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === stable) {
        return quoteTokenFarm.tokenPriceVsQuote ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(quoteTokenFarm.tokenPriceVsQuote) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    }
    return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
};
const getFarmsPrices = (farms, chainId)=>{
    if (!nativeStableLpMap[chainId]) {
        throw new Error(`chainId ${chainId} not supported`);
    }
    const nativeStableFarm = farms.find((farm)=>farm.lpAddress.toLowerCase() === nativeStableLpMap[chainId].address.toLowerCase());
    const nativePriceUSD = nativeStableFarm.tokenPriceVsQuote ? _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ONE.div */ .cQ.div(nativeStableFarm.tokenPriceVsQuote) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO */ .HW;
    const farmsWithPrices = farms.map((farm)=>{
        const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol, [
            nativeStableLpMap[chainId].wNative,
            nativeStableLpMap[chainId].stable, 
        ]);
        const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, nativePriceUSD, nativeStableLpMap[chainId].wNative, nativeStableLpMap[chainId].stable);
        const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, nativePriceUSD, nativeStableLpMap[chainId].wNative, nativeStableLpMap[chainId].stable);
        return {
            ...farm,
            tokenPriceBusd: tokenPriceBusd.toJSON(),
            quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON()
        };
    });
    return farmsWithPrices;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getFarmsPrices);
const nativeStableLpMap = {
    5: {
        address: "0xf5bf0C34d3c428A74Ceb98d27d38d0036C587200",
        wNative: "WETH",
        stable: "USDC"
    },
    56: {
        address: "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16",
        wNative: "WBNB",
        stable: "BUSD"
    },
    97: {
        address: "0x4E96D2e92680Ca65D58A0e2eB5bd1c0f44cAB897",
        wNative: "WBNB",
        stable: "BUSD"
    }
};


/***/ }),

/***/ 44868:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => (/* binding */ farmFetcher),
/* harmony export */   "IV": () => (/* binding */ fetchFarmUserDataAsync),
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "eG": () => (/* binding */ fetchFarmsPublicDataAsync)
/* harmony export */ });
/* unused harmony exports fetchInitialFarmsData, farmsSlice */
/* harmony import */ var _pancakeswap_farms_constants__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(65498);
/* harmony import */ var _pancakeswap_farms__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(65267);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84951);
/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10494);
/* harmony import */ var config_constants_priceHelperLps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81068);
/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(64175);
/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(57626);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_fromPairs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(70627);
/* harmony import */ var _pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(24671);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(25152);
/* harmony import */ var utils_wagmi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(40495);
/* harmony import */ var views_Farms_components_YieldBooster_helpers_splitProxyFarms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72465);
/* harmony import */ var utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(30375);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(18770);
/* harmony import */ var _fetchFarms__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(98200);
/* harmony import */ var _fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(91367);
/* harmony import */ var _fetchMasterChefData__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(6818);
/* harmony import */ var _getFarmsPrices__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(76876);





















/**
 * @deprecated
 */ const fetchFetchPublicDataOld = async ({ pids , chainId  })=>{
    const [poolLength, [cakePerBlockRaw]] = await Promise.all([
        (0,_fetchMasterChefData__WEBPACK_IMPORTED_MODULE_17__/* .fetchMasterChefFarmPoolLength */ .b)(chainId),
        (0,utils_multicall__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(config_abi_masterchef_json__WEBPACK_IMPORTED_MODULE_3__, [
            {
                // BSC only
                address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_8__/* .getMasterChefAddress */ .Oc)(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC),
                name: "cakePerBlock",
                params: [
                    true
                ]
            }, 
        ]), 
    ]);
    const poolLengthAsBigNumber = new (bignumber_js__WEBPACK_IMPORTED_MODULE_2___default())(poolLength);
    const regularCakePerBlock = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_9__/* .getBalanceAmount */ .U4)(new (bignumber_js__WEBPACK_IMPORTED_MODULE_2___default())(cakePerBlockRaw));
    const farmsConfig = await (0,_pancakeswap_farms_constants__WEBPACK_IMPORTED_MODULE_19__.getFarmConfig)(chainId);
    const farmsCanFetch = farmsConfig.filter((farmConfig)=>pids.includes(farmConfig.pid) && poolLengthAsBigNumber.gt(farmConfig.pid));
    const priceHelperLpsConfig = (0,config_constants_priceHelperLps__WEBPACK_IMPORTED_MODULE_5__/* .getFarmsPriceHelperLpFiles */ .W)(chainId);
    const farms = await (0,_fetchFarms__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(farmsCanFetch.concat(priceHelperLpsConfig), chainId);
    const farmsWithPrices = farms.length > 0 ? (0,_getFarmsPrices__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(farms, chainId) : [];
    return [
        farmsWithPrices,
        poolLengthAsBigNumber.toNumber(),
        regularCakePerBlock.toNumber()
    ];
};
const fetchFarmPublicDataPkg = async ({ pids , chainId , chain  })=>{
    const farmsConfig = await (0,_pancakeswap_farms_constants__WEBPACK_IMPORTED_MODULE_19__.getFarmConfig)(chainId);
    const farmsCanFetch = farmsConfig.filter((farmConfig)=>pids.includes(farmConfig.pid));
    const priceHelperLpsConfig = (0,config_constants_priceHelperLps__WEBPACK_IMPORTED_MODULE_5__/* .getFarmsPriceHelperLpFiles */ .W)(chainId);
    const { farmsWithPrice , poolLength , regularCakePerBlock  } = await farmFetcher.fetchFarms({
        chainId,
        isTestnet: chain.testnet,
        farms: farmsCanFetch.concat(priceHelperLpsConfig)
    });
    return [
        farmsWithPrice,
        poolLength,
        regularCakePerBlock
    ];
};
const farmFetcher = (0,_pancakeswap_farms__WEBPACK_IMPORTED_MODULE_20__/* .createFarmFetcher */ .PG)(utils_multicall__WEBPACK_IMPORTED_MODULE_10__/* .multicallv2 */ .v);
const farmApiFetch = (chainId)=>fetch(`${config_constants_endpoints__WEBPACK_IMPORTED_MODULE_4__/* .FARM_API */ .gG}/${chainId}`).then((res)=>res.json());
const initialState = {
    data: [],
    chainId: null,
    loadArchivedFarmsData: false,
    userDataLoaded: false,
    loadingKeys: {}
};
// Async thunks
const fetchInitialFarmsData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)("farms/fetchInitialFarmsData", async ({ chainId  })=>{
    const farmDataList = await (0,_pancakeswap_farms_constants__WEBPACK_IMPORTED_MODULE_19__.getFarmConfig)(chainId);
    return {
        data: farmDataList.map((farm)=>({
                ...farm,
                userData: {
                    allowance: "0",
                    tokenBalance: "0",
                    stakedBalance: "0",
                    earnings: "0"
                }
            })),
        chainId
    };
});
let fallback = false;
const fetchFarmsPublicDataAsync = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)("farms/fetchFarmsPublicDataAsync", async ({ pids , chainId , flag ="pkg"  }, { dispatch , getState  })=>{
    const state = getState();
    if (state.farms.chainId !== chainId) {
        await dispatch(fetchInitialFarmsData({
            chainId
        }));
    }
    const chain = utils_wagmi__WEBPACK_IMPORTED_MODULE_11__/* .chains.find */ .p5.find((c)=>c.id === chainId);
    if (!chain || !farmFetcher.isChainSupported(chain.id)) throw new Error("chain not supported");
    try {
        if (flag === "old") {
            return fetchFetchPublicDataOld({
                pids,
                chainId
            });
        }
        if (flag === "api" && !fallback) {
            try {
                const { updatedAt , data: farmsWithPrice , poolLength , regularCakePerBlock  } = await farmApiFetch(chainId);
                if (Date.now() - new Date(updatedAt).getTime() > 3 * 60 * 1000) {
                    fallback = true;
                    throw new Error("Farm Api out dated");
                }
                return [
                    farmsWithPrice,
                    poolLength,
                    regularCakePerBlock
                ];
            } catch (error) {
                console.error(error);
                return fetchFarmPublicDataPkg({
                    pids,
                    chainId,
                    chain
                });
            }
        }
        return fetchFarmPublicDataPkg({
            pids,
            chainId,
            chain
        });
    } catch (error1) {
        console.error(error1);
        throw error1;
    }
}, {
    condition: (arg, { getState  })=>{
        const { farms  } = getState();
        if (farms.loadingKeys[fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6___default()({
            type: fetchFarmsPublicDataAsync.typePrefix,
            arg
        })]) {
            console.debug("farms action is fetching, skipping here");
            return false;
        }
        return true;
    }
});
async function getBoostedFarmsStakeValue(farms, account, chainId, proxyAddress) {
    const [userFarmAllowances, userFarmTokenBalances, userStakedBalances, userFarmEarnings, proxyUserFarmAllowances, proxyUserStakedBalances, proxyUserFarmEarnings, ] = await Promise.all([
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserAllowances */ .m5)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserTokenBalances */ .Rn)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserStakedBalances */ .Ck)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserEarnings */ .z1)(account, farms, chainId),
        // Proxy call
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserAllowances */ .m5)(account, farms, chainId, proxyAddress),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserStakedBalances */ .Ck)(proxyAddress, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserEarnings */ .z1)(proxyAddress, farms, chainId), 
    ]);
    const farmAllowances = userFarmAllowances.map((farmAllowance, index)=>{
        return {
            pid: farms[index].pid,
            allowance: userFarmAllowances[index],
            tokenBalance: userFarmTokenBalances[index],
            stakedBalance: userStakedBalances[index],
            earnings: userFarmEarnings[index],
            proxy: {
                allowance: proxyUserFarmAllowances[index],
                // NOTE: Duplicate tokenBalance to maintain data structure consistence
                tokenBalance: userFarmTokenBalances[index],
                stakedBalance: proxyUserStakedBalances[index],
                earnings: proxyUserFarmEarnings[index]
            }
        };
    });
    return farmAllowances;
}
async function getNormalFarmsStakeValue(farms, account, chainId) {
    const [userFarmAllowances, userFarmTokenBalances, userStakedBalances, userFarmEarnings] = await Promise.all([
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserAllowances */ .m5)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserTokenBalances */ .Rn)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserStakedBalances */ .Ck)(account, farms, chainId),
        (0,_fetchFarmUser__WEBPACK_IMPORTED_MODULE_16__/* .fetchFarmUserEarnings */ .z1)(account, farms, chainId), 
    ]);
    const normalFarmAllowances = userFarmAllowances.map((_, index)=>{
        return {
            pid: farms[index].pid,
            allowance: userFarmAllowances[index],
            tokenBalance: userFarmTokenBalances[index],
            stakedBalance: userStakedBalances[index],
            earnings: userFarmEarnings[index]
        };
    });
    return normalFarmAllowances;
}
const fetchFarmUserDataAsync = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)("farms/fetchFarmUserDataAsync", async ({ account , pids , proxyAddress , chainId  }, { dispatch , getState  })=>{
    const state = getState();
    if (state.farms.chainId !== chainId) {
        await dispatch(fetchInitialFarmsData({
            chainId
        }));
    }
    const poolLength = state.farms.poolLength ?? await (0,_fetchMasterChefData__WEBPACK_IMPORTED_MODULE_17__/* .fetchMasterChefFarmPoolLength */ .b)(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC);
    const farmsConfig = await (0,_pancakeswap_farms_constants__WEBPACK_IMPORTED_MODULE_19__.getFarmConfig)(chainId);
    const farmsCanFetch = farmsConfig.filter((farmConfig)=>pids.includes(farmConfig.pid) && poolLength > farmConfig.pid);
    if (proxyAddress && farmsCanFetch?.length && (0,utils_verifyBscNetwork__WEBPACK_IMPORTED_MODULE_13__/* .verifyBscNetwork */ .H)(chainId)) {
        const { normalFarms , farmsWithProxy  } = (0,views_Farms_components_YieldBooster_helpers_splitProxyFarms__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(farmsCanFetch);
        const [proxyAllowances, normalAllowances] = await Promise.all([
            getBoostedFarmsStakeValue(farmsWithProxy, account, chainId, proxyAddress),
            getNormalFarmsStakeValue(normalFarms, account, chainId), 
        ]);
        return [
            ...proxyAllowances,
            ...normalAllowances
        ];
    }
    return getNormalFarmsStakeValue(farmsCanFetch, account, chainId);
}, {
    condition: (arg, { getState  })=>{
        const { farms  } = getState();
        if (farms.loadingKeys[fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6___default()({
            type: fetchFarmUserDataAsync.typePrefix,
            arg
        })]) {
            console.debug("farms user action is fetching, skipping here");
            return false;
        }
        return true;
    }
});
const serializeLoadingKey = (action, suffix)=>{
    const type = action.type.split(`/${suffix}`)[0];
    return fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_6___default()({
        arg: action.meta.arg,
        type
    });
};
const farmsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({
    name: "Farms",
    initialState,
    reducers: {},
    extraReducers: (builder)=>{
        builder.addCase(_global_actions__WEBPACK_IMPORTED_MODULE_14__/* .resetUserState */ .tZ, (state)=>{
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            state.data = state.data.map((farm)=>{
                return {
                    ...farm,
                    userData: {
                        allowance: "0",
                        tokenBalance: "0",
                        stakedBalance: "0",
                        earnings: "0"
                    }
                };
            });
            state.userDataLoaded = false;
        });
        // Init farm data
        builder.addCase(fetchInitialFarmsData.fulfilled, (state, action)=>{
            const { data , chainId  } = action.payload;
            state.data = data;
            state.chainId = chainId;
        });
        // Update farms with live data
        builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action)=>{
            const [farmPayload, poolLength, regularCakePerBlock] = action.payload;
            const farmPayloadPidMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_7___default()(farmPayload.map((farmData)=>[
                    farmData.pid,
                    farmData
                ]));
            state.data = state.data.map((farm)=>{
                const liveFarmData = farmPayloadPidMap[farm.pid];
                return {
                    ...farm,
                    ...liveFarmData
                };
            });
            state.poolLength = poolLength;
            state.regularCakePerBlock = regularCakePerBlock;
        });
        // Update farms with user data
        builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action)=>{
            const userDataMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_7___default()(action.payload.map((userDataEl)=>[
                    userDataEl.pid,
                    userDataEl
                ]));
            state.data = state.data.map((farm)=>{
                const userDataEl = userDataMap[farm.pid];
                if (userDataEl) {
                    return {
                        ...farm,
                        userData: userDataEl
                    };
                }
                return farm;
            });
            state.userDataLoaded = true;
        });
        builder.addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)(fetchFarmUserDataAsync.pending, fetchFarmsPublicDataAsync.pending), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "pending")] = true;
        });
        builder.addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)(fetchFarmUserDataAsync.fulfilled, fetchFarmsPublicDataAsync.fulfilled), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "fulfilled")] = false;
        });
        builder.addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)(fetchFarmsPublicDataAsync.rejected, fetchFarmUserDataAsync.rejected), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "rejected")] = false;
        });
    }
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (farmsSlice.reducer);


/***/ }),

/***/ 64961:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => (/* binding */ farmsV1),
  "IV": () => (/* binding */ fetchFarmUserDataAsync),
  "eG": () => (/* binding */ fetchFarmsPublicDataAsync)
});

// UNUSED EXPORTS: farmsSlice

// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
// EXTERNAL MODULE: external "@reduxjs/toolkit"
var toolkit_ = __webpack_require__(75184);
// EXTERNAL MODULE: external "fast-json-stable-stringify"
var external_fast_json_stable_stringify_ = __webpack_require__(64175);
var external_fast_json_stable_stringify_default = /*#__PURE__*/__webpack_require__.n(external_fast_json_stable_stringify_);
// EXTERNAL MODULE: ../../packages/farms/constants/index.ts
var constants = __webpack_require__(65498);
// EXTERNAL MODULE: ./src/config/constants/priceHelperLps/index.ts + 4 modules
var priceHelperLps = __webpack_require__(81068);
// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(34215);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);
// EXTERNAL MODULE: ../../packages/utils/getFullDecimalMultiplier.ts
var getFullDecimalMultiplier = __webpack_require__(38766);
// EXTERNAL MODULE: ../../packages/utils/bigNumber.ts
var bigNumber = __webpack_require__(85576);
// EXTERNAL MODULE: ./src/config/abi/erc20.json
var erc20 = __webpack_require__(93324);
// EXTERNAL MODULE: external "lodash/chunk"
var chunk_ = __webpack_require__(90221);
var chunk_default = /*#__PURE__*/__webpack_require__.n(chunk_);
// EXTERNAL MODULE: ./src/utils/addressHelpers.ts
var addressHelpers = __webpack_require__(70627);
// EXTERNAL MODULE: ./src/utils/multicall.ts
var multicall = __webpack_require__(25152);
;// CONCATENATED MODULE: ./src/state/farmsV1/fetchPublicFarmData.ts




const fetchFarmCalls = (farm)=>{
    const { lpAddress , token , quoteToken  } = farm;
    return [
        // Balance of token in the LP contract
        {
            address: token.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of quote token on LP contract
        {
            address: quoteToken.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of LP tokens in the master chef contract
        {
            address: lpAddress,
            name: "balanceOf",
            params: [
                (0,addressHelpers/* getMasterChefV1Address */.G1)()
            ]
        },
        // Total supply of LP tokens
        {
            address: lpAddress,
            name: "totalSupply"
        },
        // Token decimals
        {
            address: token.address,
            name: "decimals"
        },
        // Quote token decimals
        {
            address: quoteToken.address,
            name: "decimals"
        }, 
    ];
};
const fetchPublicFarmsData = async (farms)=>{
    const farmCalls = farms.flatMap((farm)=>fetchFarmCalls(farm));
    const chunkSize = farmCalls.length / farms.length;
    const farmMultiCallResult = await (0,multicall/* multicallv2 */.v)({
        abi: erc20,
        calls: farmCalls
    });
    return chunk_default()(farmMultiCallResult, chunkSize);
};

// EXTERNAL MODULE: ./src/config/abi/masterchefV1.json
var masterchefV1 = __webpack_require__(8028);
// EXTERNAL MODULE: ./src/utils/contractHelpers.ts + 29 modules
var contractHelpers = __webpack_require__(12895);
;// CONCATENATED MODULE: ./src/state/farmsV1/fetchMasterChefData.ts





const masterChefAddress = (0,addressHelpers/* getMasterChefV1Address */.G1)();
const masterChefContract = (0,contractHelpers/* getMasterchefV1Contract */.QH)();
const fetchMasterChefFarmPoolLength = async ()=>{
    const poolLength = await masterChefContract.poolLength();
    return poolLength;
};
const masterChefFarmCalls = (farm)=>{
    const { v1pid  } = farm;
    return v1pid || v1pid === 0 ? [
        {
            address: masterChefAddress,
            name: "poolInfo",
            params: [
                v1pid
            ]
        },
        {
            address: masterChefAddress,
            name: "totalAllocPoint"
        }, 
    ] : [
        null,
        null
    ];
};
const fetchMasterChefData = async (farms)=>{
    const masterChefCalls = farms.map((farm)=>masterChefFarmCalls(farm));
    const chunkSize = masterChefCalls.flat().length / farms.length;
    const masterChefAggregatedCalls = masterChefCalls.filter((masterChefCall)=>masterChefCall[0] !== null && masterChefCall[1] !== null).flat();
    const masterChefMultiCallResult = await (0,multicall/* multicallv2 */.v)({
        abi: masterchefV1,
        calls: masterChefAggregatedCalls
    });
    const masterChefChunkedResultRaw = chunk_default()(masterChefMultiCallResult, chunkSize);
    let masterChefChunkedResultCounter = 0;
    return masterChefCalls.map((masterChefCall)=>{
        if (masterChefCall[0] === null && masterChefCall[1] === null) {
            return [
                null,
                null
            ];
        }
        const data = masterChefChunkedResultRaw[masterChefChunkedResultCounter];
        masterChefChunkedResultCounter++;
        return data;
    });
};

;// CONCATENATED MODULE: ./src/state/farmsV1/fetchFarms.ts





const fetchFarms = async (farmsToFetch)=>{
    const farmResult = await fetchPublicFarmsData(farmsToFetch);
    const masterChefResult = await fetchMasterChefData(farmsToFetch);
    return farmsToFetch.map((farm, index)=>{
        const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = farmResult[index];
        const [info, totalAllocPoint] = masterChefResult[index];
        const lpTotalSupplyBN = new (external_bignumber_js_default())(lpTotalSupply);
        // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation
        const lpTokenRatio = new (external_bignumber_js_default())(lpTokenBalanceMC).div(lpTotalSupplyBN);
        // Raw amount of token in the LP, including those not staked
        const tokenAmountTotal = new (external_bignumber_js_default())(tokenBalanceLP).div((0,getFullDecimalMultiplier/* getFullDecimalMultiplier */.t)(tokenDecimals));
        const quoteTokenAmountTotal = new (external_bignumber_js_default())(quoteTokenBalanceLP).div((0,getFullDecimalMultiplier/* getFullDecimalMultiplier */.t)(quoteTokenDecimals));
        // Amount of quoteToken in the LP that are staked in the MC
        const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio);
        // Total staked in LP, in quote token value
        const lpTotalInQuoteToken = quoteTokenAmountMc.times(bigNumber/* BIG_TWO */.ju);
        const allocPoint = info ? new (external_bignumber_js_default())(info.allocPoint?._hex) : bigNumber/* BIG_ZERO */.HW;
        const poolWeight = totalAllocPoint ? allocPoint.div(new (external_bignumber_js_default())(totalAllocPoint)) : bigNumber/* BIG_ZERO */.HW;
        return {
            ...farm,
            token: farm.token,
            quoteToken: farm.quoteToken,
            tokenAmountTotal: tokenAmountTotal.toJSON(),
            lpTotalSupply: lpTotalSupplyBN.toJSON(),
            lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),
            tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),
            poolWeight: poolWeight.toJSON(),
            multiplier: `${allocPoint.div(100).toString()}X`
        };
    });
};
/* harmony default export */ const farmsV1_fetchFarms = (fetchFarms);

// EXTERNAL MODULE: ../../packages/farms/src/farmsPriceHelpers.ts
var farmsPriceHelpers = __webpack_require__(74086);
// EXTERNAL MODULE: ../../packages/tokens/src/index.ts + 6 modules
var src = __webpack_require__(72502);
;// CONCATENATED MODULE: ./src/state/farmsV1/getFarmsPrices.ts




const getFarmFromTokenSymbol = (farms, tokenSymbol, preferredQuoteTokens)=>{
    const farmsWithTokenSymbol = farms.filter((farm)=>farm.token.symbol === tokenSymbol);
    const filteredFarm = (0,farmsPriceHelpers/* filterFarmsByQuoteToken */.t)(farmsWithTokenSymbol, preferredQuoteTokens);
    return filteredFarm;
};
const getFarmBaseTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd)=>{
    const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote);
    if (farm.quoteToken.symbol === src/* bscTokens.busd.symbol */.ds.busd.symbol) {
        return hasTokenPriceVsQuote ? new (external_bignumber_js_default())(farm.tokenPriceVsQuote) : bigNumber/* BIG_ZERO */.HW;
    }
    if (farm.quoteToken.symbol === src/* bscTokens.wbnb.symbol */.ds.wbnb.symbol) {
        return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : bigNumber/* BIG_ZERO */.HW;
    }
    // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms
    if (!quoteTokenFarm) {
        return bigNumber/* BIG_ZERO */.HW;
    }
    // Possible alternative farm quoteTokens:
    // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)
    // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token
    // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)
    // from the BNB - pBTC price, we can calculate the PNT - BUSD price
    if (quoteTokenFarm.quoteToken.symbol === src/* bscTokens.wbnb.symbol */.ds.wbnb.symbol) {
        const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote);
        return hasTokenPriceVsQuote && quoteTokenInBusd ? new (external_bignumber_js_default())(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : bigNumber/* BIG_ZERO */.HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === src/* bscTokens.busd.symbol */.ds.busd.symbol) {
        const quoteTokenInBusd1 = quoteTokenFarm.tokenPriceVsQuote;
        return hasTokenPriceVsQuote && quoteTokenInBusd1 ? new (external_bignumber_js_default())(farm.tokenPriceVsQuote).times(quoteTokenInBusd1) : bigNumber/* BIG_ZERO */.HW;
    }
    // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken
    return bigNumber/* BIG_ZERO */.HW;
};
const getFarmQuoteTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd)=>{
    if (farm.quoteToken.symbol === "BUSD") {
        return bigNumber/* BIG_ONE */.cQ;
    }
    if (farm.quoteToken.symbol === "WBNB") {
        return bnbPriceBusd;
    }
    if (!quoteTokenFarm) {
        return bigNumber/* BIG_ZERO */.HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === "WBNB") {
        return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : bigNumber/* BIG_ZERO */.HW;
    }
    if (quoteTokenFarm.quoteToken.symbol === "BUSD") {
        return quoteTokenFarm.tokenPriceVsQuote ? new (external_bignumber_js_default())(quoteTokenFarm.tokenPriceVsQuote) : bigNumber/* BIG_ZERO */.HW;
    }
    return bigNumber/* BIG_ZERO */.HW;
};
const getFarmsPrices = (farms)=>{
    const bnbBusdFarm = farms.find((farm)=>farm.v1pid === 252);
    const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? bigNumber/* BIG_ONE.div */.cQ.div(bnbBusdFarm.tokenPriceVsQuote) : bigNumber/* BIG_ZERO */.HW;
    const farmsWithPrices = farms.map((farm)=>{
        const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol);
        const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);
        const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);
        return {
            ...farm,
            tokenPriceBusd: tokenPriceBusd.toJSON(),
            quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON()
        };
    });
    return farmsWithPrices;
};
/* harmony default export */ const farmsV1_getFarmsPrices = (getFarmsPrices);

;// CONCATENATED MODULE: ./src/state/farmsV1/fetchFarmUser.ts





const fetchFarmUserAllowances = async (account, farmsToFetch)=>{
    const masterChefAddress = (0,addressHelpers/* getMasterChefV1Address */.G1)();
    const calls = farmsToFetch.map((farm)=>{
        const lpContractAddress = farm.lpAddress;
        return {
            address: lpContractAddress,
            name: "allowance",
            params: [
                account,
                masterChefAddress
            ]
        };
    });
    const rawLpAllowances = await (0,multicall/* default */.Z)(erc20, calls);
    const parsedLpAllowances = rawLpAllowances.map((lpBalance)=>{
        return new (external_bignumber_js_default())(lpBalance).toJSON();
    });
    return parsedLpAllowances;
};
const fetchFarmUserTokenBalances = async (account, farmsToFetch)=>{
    const calls = farmsToFetch.map((farm)=>{
        const lpContractAddress = farm.lpAddress;
        return {
            address: lpContractAddress,
            name: "balanceOf",
            params: [
                account
            ]
        };
    });
    const rawTokenBalances = await (0,multicall/* default */.Z)(erc20, calls);
    const parsedTokenBalances = rawTokenBalances.map((tokenBalance)=>{
        return new (external_bignumber_js_default())(tokenBalance).toJSON();
    });
    return parsedTokenBalances;
};
const fetchFarmUserStakedBalances = async (account, farmsToFetch)=>{
    const masterChefAddress = (0,addressHelpers/* getMasterChefV1Address */.G1)();
    const calls = farmsToFetch.map((farm)=>{
        return {
            address: masterChefAddress,
            name: "userInfo",
            params: [
                farm.v1pid,
                account
            ]
        };
    });
    const rawStakedBalances = await (0,multicall/* default */.Z)(masterchefV1, calls);
    const parsedStakedBalances = rawStakedBalances.map((stakedBalance)=>{
        return new (external_bignumber_js_default())(stakedBalance[0]._hex).toJSON();
    });
    return parsedStakedBalances;
};
const fetchFarmUserEarnings = async (account, farmsToFetch)=>{
    const masterChefAddress = (0,addressHelpers/* getMasterChefV1Address */.G1)();
    const calls = farmsToFetch.map((farm)=>{
        return {
            address: masterChefAddress,
            name: "pendingCake",
            params: [
                farm.v1pid,
                account
            ]
        };
    });
    const rawEarnings = await (0,multicall/* default */.Z)(masterchefV1, calls);
    const parsedEarnings = rawEarnings.map((earnings)=>{
        return new (external_bignumber_js_default())(earnings).toJSON();
    });
    return parsedEarnings;
};

;// CONCATENATED MODULE: ./src/state/farmsV1/index.ts









const initialState = {
    data: [],
    loadArchivedFarmsData: false,
    userDataLoaded: false,
    loadingKeys: {}
};
// Async thunks
const fetchFarmsPublicDataAsync = (0,toolkit_.createAsyncThunk)("farmsV1/fetchFarmsPublicDataAsync", async (pids)=>{
    const farmsConfig = await (0,constants.getFarmConfig)(dist.ChainId.BSC);
    const poolLength = await fetchMasterChefFarmPoolLength();
    const farmsToFetch = farmsConfig.filter((farmConfig)=>pids.includes(farmConfig.v1pid));
    const farmsCanFetch = farmsToFetch.filter((f)=>poolLength.gt(f.v1pid));
    // Add price helper farms
    const priceHelperLpsConfig = (0,priceHelperLps/* getFarmsPriceHelperLpFiles */.W)(56);
    const farmsWithPriceHelpers = farmsCanFetch.concat(priceHelperLpsConfig);
    const farms = await farmsV1_fetchFarms(farmsWithPriceHelpers);
    const farmsWithPrices = farmsV1_getFarmsPrices(farms);
    // Filter out price helper LP config farms
    const farmsWithoutHelperLps = farmsWithPrices.filter((farm)=>{
        return farm.v1pid || farm.v1pid === 0;
    });
    return [
        farmsWithoutHelperLps,
        poolLength.toNumber()
    ];
}, {
    condition: (arg, { getState  })=>{
        const { farmsV1  } = getState();
        if (farmsV1.loadingKeys[external_fast_json_stable_stringify_default()({
            type: fetchFarmsPublicDataAsync.typePrefix,
            arg
        })]) {
            console.debug("farms action is fetching, skipping here");
            return false;
        }
        return true;
    }
});
const fetchFarmUserDataAsync = (0,toolkit_.createAsyncThunk)("farmsV1/fetchFarmUserDataAsync", async ({ account , pids  })=>{
    const farmsConfig = await (0,constants.getFarmConfig)(dist.ChainId.BSC);
    const poolLength = await fetchMasterChefFarmPoolLength();
    const farmsToFetch = farmsConfig.filter((farmConfig)=>pids.includes(farmConfig.v1pid));
    const farmsCanFetch = farmsToFetch.filter((f)=>poolLength.gt(f.v1pid));
    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsCanFetch);
    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsCanFetch);
    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsCanFetch);
    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsCanFetch);
    return userFarmAllowances.map((farmAllowance, index)=>{
        return {
            pid: farmsCanFetch[index].v1pid,
            allowance: userFarmAllowances[index],
            tokenBalance: userFarmTokenBalances[index],
            stakedBalance: userStakedBalances[index],
            earnings: userFarmEarnings[index]
        };
    });
}, {
    condition: (arg, { getState  })=>{
        const { farmsV1  } = getState();
        if (farmsV1.loadingKeys[external_fast_json_stable_stringify_default()({
            type: fetchFarmUserDataAsync.typePrefix,
            arg
        })]) {
            console.debug("farms user action is fetching, skipping here");
            return false;
        }
        return true;
    }
});
const serializeLoadingKey = (action, suffix)=>{
    const type = action.type.split(`/${suffix}`)[0];
    return external_fast_json_stable_stringify_default()({
        arg: action.meta.arg,
        type
    });
};
const farmsSlice = (0,toolkit_.createSlice)({
    name: "FarmsV1",
    initialState,
    reducers: {},
    extraReducers: (builder)=>{
        // Update farms with live data
        builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action)=>{
            const [farmPayload, poolLength] = action.payload;
            if (state.data.length > 0) {
                state.data = state.data.map((farm)=>{
                    const liveFarmData = farmPayload.find((farmData)=>farmData.v1pid === farm.v1pid);
                    return {
                        ...farm,
                        ...liveFarmData
                    };
                });
            } else {
                state.data = farmPayload;
            }
            state.poolLength = poolLength;
        });
        // Update farms with user data
        builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action)=>{
            action.payload.forEach((userDataEl)=>{
                const { pid  } = userDataEl;
                const index = state.data.findIndex((farm)=>farm.v1pid === pid);
                state.data[index] = {
                    ...state.data[index],
                    userData: userDataEl
                };
            });
            state.userDataLoaded = true;
        });
        builder.addMatcher((0,toolkit_.isAnyOf)(fetchFarmUserDataAsync.pending, fetchFarmsPublicDataAsync.pending), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "pending")] = true;
        });
        builder.addMatcher((0,toolkit_.isAnyOf)(fetchFarmUserDataAsync.fulfilled, fetchFarmsPublicDataAsync.fulfilled), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "fulfilled")] = false;
        });
        builder.addMatcher((0,toolkit_.isAnyOf)(fetchFarmsPublicDataAsync.rejected, fetchFarmUserDataAsync.rejected), (state, action)=>{
            state.loadingKeys[serializeLoadingKey(action, "rejected")] = false;
        });
    }
});
/* harmony default export */ const farmsV1 = (farmsSlice.reducer);


/***/ }),

/***/ 18770:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CF": () => (/* binding */ pickFarmTransactionTx),
/* harmony export */   "SL": () => (/* binding */ updateVersion),
/* harmony export */   "Xw": () => (/* binding */ toggleFarmTransactionModal),
/* harmony export */   "tZ": () => (/* binding */ resetUserState)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

// fired once when the app reloads but before the app renders
// allows any updates to be applied to store data loaded from localStorage
const updateVersion = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("global/updateVersion");
const resetUserState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("global/resetUserState");
const toggleFarmTransactionModal = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/toggleFarmTransactionModal");
const pickFarmTransactionTx = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/pickFarmTransactionTx");


/***/ }),

/***/ 92059:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export initialState */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18770);
/* eslint-disable no-param-reassign */ 


const initialState = {
    showFarmTransactionModal: false,
    pickedFarmTransactionModalTx: {
        tx: "",
        chainId: _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BSC
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .toggleFarmTransactionModal */ .Xw, (state, { payload: { showModal  }  })=>{
        state.showFarmTransactionModal = showModal;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .pickFarmTransactionTx */ .CF, (state, { payload: { tx , chainId  }  })=>{
        state.pickedFarmTransactionModalTx = {
            tx,
            chainId
        };
        state.showFarmTransactionModal = true;
    })));


/***/ }),

/***/ 36204:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dj": () => (/* binding */ persistor),
/* harmony export */   "TL": () => (/* binding */ useAppDispatch),
/* harmony export */   "oR": () => (/* binding */ useStore)
/* harmony export */ });
/* unused harmony exports makeStore, initializeStore */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6022);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14161);
/* harmony import */ var redux_persist__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(redux_persist__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(98936);
/* harmony import */ var redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _burn_reducer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18994);
/* harmony import */ var _farms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(44868);
/* harmony import */ var _farmsV1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(64961);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(18770);
/* harmony import */ var _info__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(74431);
/* harmony import */ var _lottery__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50924);
/* harmony import */ var _mint_reducer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(54233);
/* harmony import */ var _multicall_reducer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5191);
/* harmony import */ var _pools__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(34376);
/* harmony import */ var _swap_reducer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(13316);
/* harmony import */ var _transactions_reducer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(56611);
/* harmony import */ var _user_reducer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(42862);
/* harmony import */ var _limitOrders_reducer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(96046);
/* harmony import */ var _pottery__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(32169);
/* harmony import */ var _global_reducer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(92059);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pools__WEBPACK_IMPORTED_MODULE_13__]);
_pools__WEBPACK_IMPORTED_MODULE_13__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];




















const PERSISTED_KEYS = [
    "user",
    "transactions"
];
const persistConfig = {
    key: "primary",
    whitelist: PERSISTED_KEYS,
    blacklist: [
        "profile"
    ],
    storage: (redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_4___default()),
    version: 1
};
const persistedReducer = (0,redux_persist__WEBPACK_IMPORTED_MODULE_3__.persistReducer)(persistConfig, (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({
    global: _global_reducer__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z,
    farms: _farms__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .ZP,
    farmsV1: _farmsV1__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .ZP,
    pools: _pools__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .ZP,
    lottery: _lottery__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .ZP,
    info: _info__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,
    pottery: _pottery__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .ZP,
    limitOrders: _limitOrders_reducer__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z,
    // Exchange
    user: _user_reducer__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z,
    transactions: _transactions_reducer__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z,
    swap: _swap_reducer__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z,
    mint: _mint_reducer__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z,
    burn: _burn_reducer__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z,
    multicall: _multicall_reducer__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z
}));
// eslint-disable-next-line import/no-mutable-exports
let store;
function makeStore(preloadedState = undefined) {
    return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.configureStore)({
        reducer: persistedReducer,
        middleware: (getDefaultMiddleware)=>getDefaultMiddleware({
                thunk: true,
                serializableCheck: {
                    ignoredActions: [
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.FLUSH,
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.REHYDRATE,
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.PAUSE,
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.PERSIST,
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.PURGE,
                        redux_persist__WEBPACK_IMPORTED_MODULE_3__.REGISTER
                    ]
                }
            }),
        devTools: "production" === "development",
        preloadedState
    });
}
const initializeStore = (preloadedState = undefined)=>{
    let _store = store ?? makeStore(preloadedState);
    // After navigating to a page with an initial Redux state, merge that state
    // with the current state in the store, and create a new store
    if (preloadedState && store) {
        _store = makeStore({
            ...store.getState(),
            ...preloadedState
        });
        // Reset the current store
        store = undefined;
    }
    // For SSG and SSR always create a new store
    if (true) return _store;
    // Create the store once in the client
    if (!store) {
        store = _store;
    }
    return _store;
};
store = initializeStore();
const useAppDispatch = ()=>(0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (store)));
const persistor = (0,redux_persist__WEBPACK_IMPORTED_MODULE_3__.persistStore)(store, undefined, ()=>{
    store.dispatch((0,_global_actions__WEBPACK_IMPORTED_MODULE_8__/* .updateVersion */ .SL)());
});
function useStore(initialState) {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>initializeStore(initialState), [
        initialState
    ]);
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 74431:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ info)
});

// EXTERNAL MODULE: external "@reduxjs/toolkit"
var toolkit_ = __webpack_require__(75184);
;// CONCATENATED MODULE: ./src/state/info/actions.ts

const updateProtocolData = (0,toolkit_.createAction)("info/protocol/updateProtocolData");
const updateProtocolChartData = (0,toolkit_.createAction)("info/protocol/updateProtocolChartData");
const updateProtocolTransactions = (0,toolkit_.createAction)("info/protocol/updateProtocolTransactions");
const updatePoolData = (0,toolkit_.createAction)("info/pools/updatePoolData");
const addPoolKeys = (0,toolkit_.createAction)("info/pools/addPoolKeys");
const updatePoolChartData = (0,toolkit_.createAction)("info/pools/updatePoolChartData");
const updatePoolTransactions = (0,toolkit_.createAction)("info/pools/updatePoolTransactions");
const updateTokenData = (0,toolkit_.createAction)("info/tokens/updateTokenData");
const clearTokenData = (0,toolkit_.createAction)("info/tokens/clearTokenData");
const addTokenKeys = (0,toolkit_.createAction)("info/tokens/addTokenKeys");
const addTokenPoolAddresses = (0,toolkit_.createAction)("info/tokens/addTokenPoolAddresses");
const updateTokenChartData = (0,toolkit_.createAction)("info/tokens/updateTokenChartData");
const updateTokenTransactions = (0,toolkit_.createAction)("info/tokens/updateTokenTransactions");
const updateTokenPriceData = (0,toolkit_.createAction)("info/tokens/updateTokenPriceData");

;// CONCATENATED MODULE: ./src/state/info/index.ts
/* eslint-disable no-param-reassign */ 

const initialState = {
    protocol: {},
    pools: {
        byAddress: {}
    },
    tokens: {
        byAddress: {}
    }
};
/* harmony default export */ const info = ((0,toolkit_.createReducer)(initialState, (builder)=>builder// Protocol actions
    .addCase(updateProtocolData, (state, { payload: { protocolData  }  })=>{
        state.protocol.overview = protocolData;
    }).addCase(updateProtocolChartData, (state, { payload: { chartData  }  })=>{
        state.protocol.chartData = chartData;
    }).addCase(updateProtocolTransactions, (state, { payload: { transactions  }  })=>{
        state.protocol.transactions = transactions;
    })// Pools actions
    .addCase(updatePoolData, (state, { payload: { pools  }  })=>{
        pools.forEach((poolData)=>{
            state.pools.byAddress[poolData.address] = {
                ...state.pools.byAddress[poolData.address],
                data: poolData
            };
        });
    }).addCase(addPoolKeys, (state, { payload: { poolAddresses  }  })=>{
        poolAddresses.forEach((address)=>{
            if (!state.pools.byAddress[address]) {
                state.pools.byAddress[address] = {
                    data: undefined,
                    chartData: undefined,
                    transactions: undefined
                };
            }
        });
    }).addCase(updatePoolChartData, (state, { payload: { poolAddress , chartData  }  })=>{
        state.pools.byAddress[poolAddress] = {
            ...state.pools.byAddress[poolAddress],
            chartData
        };
    }).addCase(updatePoolTransactions, (state, { payload: { poolAddress , transactions  }  })=>{
        state.pools.byAddress[poolAddress] = {
            ...state.pools.byAddress[poolAddress],
            transactions
        };
    })// Tokens actions
    .addCase(updateTokenData, (state, { payload: { tokens  }  })=>{
        tokens.forEach((tokenData)=>{
            state.tokens.byAddress[tokenData.address] = {
                ...state.tokens.byAddress[tokenData.address],
                data: tokenData
            };
        });
    }).addCase(clearTokenData, (state)=>{
        state.tokens.byAddress = {};
    }).addCase(addTokenKeys, (state, { payload: { tokenAddresses  }  })=>{
        tokenAddresses.forEach((address)=>{
            if (!state.tokens.byAddress[address]) {
                state.tokens.byAddress[address] = {
                    poolAddresses: undefined,
                    data: undefined,
                    chartData: undefined,
                    priceData: {},
                    transactions: undefined
                };
            }
        });
    }).addCase(addTokenPoolAddresses, (state, { payload: { tokenAddress , poolAddresses  }  })=>{
        state.tokens.byAddress[tokenAddress] = {
            ...state.tokens.byAddress[tokenAddress],
            poolAddresses
        };
    }).addCase(updateTokenChartData, (state, { payload: { tokenAddress , chartData  }  })=>{
        state.tokens.byAddress[tokenAddress] = {
            ...state.tokens.byAddress[tokenAddress],
            chartData
        };
    }).addCase(updateTokenTransactions, (state, { payload: { tokenAddress , transactions  }  })=>{
        state.tokens.byAddress[tokenAddress] = {
            ...state.tokens.byAddress[tokenAddress],
            transactions
        };
    }).addCase(updateTokenPriceData, (state, { payload: { tokenAddress , secondsInterval , priceData , oldestFetchedTimestamp  }  })=>{
        state.tokens.byAddress[tokenAddress] = {
            ...state.tokens.byAddress[tokenAddress],
            priceData: {
                ...state.tokens.byAddress[tokenAddress]?.priceData,
                [secondsInterval]: priceData,
                oldestFetchedTimestamp
            }
        };
    })));


/***/ }),

/***/ 72055:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KS": () => (/* binding */ switchCurrencies),
/* harmony export */   "LC": () => (/* binding */ typeInput),
/* harmony export */   "j": () => (/* binding */ selectCurrency),
/* harmony export */   "sN": () => (/* binding */ setRateType),
/* harmony export */   "sQ": () => (/* binding */ replaceLimitOrdersState)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

const replaceLimitOrdersState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("limitOrders/replaceLimitOrdersState");
const selectCurrency = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("limitOrders/selectCurrency");
const switchCurrencies = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("limitOrders/switchCurrencies");
const typeInput = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("limitOrders/typeInput");
const setRateType = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("limitOrders/setRateType");


/***/ }),

/***/ 96046:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export initialState */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(72055);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41354);



const initialState = {
    independentField: _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT,
    basisField: _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT,
    typedValue: "",
    inputValue: "",
    outputValue: "",
    [_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT]: {
        currencyId: ""
    },
    [_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.OUTPUT */ .g.OUTPUT]: {
        currencyId: ""
    },
    rateType: _types__WEBPACK_IMPORTED_MODULE_2__/* .Rate.MUL */ .j.MUL
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .replaceLimitOrdersState */ .sQ, (state, { payload  })=>{
        return payload;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .selectCurrency */ .j, (state, { payload: { currencyId , field  }  })=>{
        const otherField = field === _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT ? _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.OUTPUT */ .g.OUTPUT : _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT;
        if (field === _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.PRICE */ .g.PRICE) return {
            ...state
        };
        if (currencyId === state[otherField].currencyId) {
            // the case where we have to swap the order
            return {
                ...state,
                independentField: state.independentField === _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT ? _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.OUTPUT */ .g.OUTPUT : _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT,
                [field]: {
                    currencyId
                },
                [otherField]: {
                    currencyId: state[field].currencyId
                }
            };
        }
        // the normal case
        return {
            ...state,
            // independentField and typedValue need to be reset to basis field
            // to show proper market price for new pair if user adjusted the price for the previous pair
            independentField: state.basisField,
            typedValue: state.basisField === _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT ? state.inputValue : state.outputValue,
            [field]: {
                currencyId
            }
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .switchCurrencies */ .KS, (state)=>{
        return {
            ...state,
            rateType: state.rateType,
            [_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT]: {
                currencyId: state[_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.OUTPUT */ .g.OUTPUT].currencyId
            },
            [_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.OUTPUT */ .g.OUTPUT]: {
                currencyId: state[_types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT].currencyId
            }
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .typeInput */ .LC, (state, { payload: { field , typedValue  }  })=>{
        return field === _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.INPUT */ .g.INPUT ? {
            ...state,
            inputValue: typedValue,
            independentField: field,
            basisField: field,
            typedValue
        } : {
            ...state,
            independentField: field,
            basisField: field !== _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.PRICE */ .g.PRICE ? field : state.basisField,
            outputValue: field !== _types__WEBPACK_IMPORTED_MODULE_2__/* .Field.PRICE */ .g.PRICE ? typedValue : state.outputValue,
            typedValue
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .setRateType */ .sN, (state, { payload: { rateType  }  })=>{
        state.rateType = rateType;
    })));


/***/ }),

/***/ 41354:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "g": () => (/* binding */ Field),
/* harmony export */   "j": () => (/* binding */ Rate)
/* harmony export */ });
var Field;
(function(Field) {
    Field["INPUT"] = "INPUT";
    Field["OUTPUT"] = "OUTPUT";
    Field["PRICE"] = "PRICE";
})(Field || (Field = {}));
var Rate;
(function(Rate) {
    Rate["MUL"] = "MUL";
    Rate["DIV"] = "DIV";
})(Rate || (Rate = {}));


/***/ }),

/***/ 2523:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BC": () => (/* binding */ MAX_LOTTERIES_REQUEST_SIZE),
/* harmony export */   "GP": () => (/* binding */ getGraphLotteries),
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5805);
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10494);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61374);



const MAX_LOTTERIES_REQUEST_SIZE = 100;
const applyNodeDataToLotteriesGraphResponse = (nodeData, graphResponse)=>{
    //   If no graph response - return node data
    if (graphResponse.length === 0) {
        return nodeData.map((nodeRound)=>{
            return {
                endTime: nodeRound.endTime,
                finalNumber: nodeRound.finalNumber.toString(),
                startTime: nodeRound.startTime,
                status: nodeRound.status,
                id: nodeRound.lotteryId.toString(),
                ticketPrice: nodeRound.priceTicketInCake,
                totalTickets: "",
                totalUsers: "",
                winningTickets: ""
            };
        });
    }
    // Populate all nodeRound data with supplementary graphResponse round data when available
    const nodeRoundsWithGraphData = nodeData.map((nodeRoundData)=>{
        const graphRoundData = graphResponse.find((graphResponseRound)=>graphResponseRound.id === nodeRoundData.lotteryId);
        return {
            endTime: nodeRoundData.endTime,
            finalNumber: nodeRoundData.finalNumber.toString(),
            startTime: nodeRoundData.startTime,
            status: nodeRoundData.status,
            id: nodeRoundData.lotteryId,
            ticketPrice: graphRoundData?.ticketPrice,
            totalTickets: graphRoundData?.totalTickets,
            totalUsers: graphRoundData?.totalUsers,
            winningTickets: graphRoundData?.winningTickets
        };
    });
    // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.
    const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1);
    const lastCombinedDataRoundIndex = graphResponse.map((graphRound)=>graphRound?.id).indexOf(lastCombinedDataRound?.id);
    const remainingSubgraphRounds = graphResponse ? graphResponse.splice(lastCombinedDataRoundIndex + 1) : [];
    const mergedResponse = [
        ...nodeRoundsWithGraphData,
        ...remainingSubgraphRounds
    ];
    return mergedResponse;
};
const getGraphLotteries = async (first = MAX_LOTTERIES_REQUEST_SIZE, skip = 0, where = {})=>{
    try {
        const response = await (0,graphql_request__WEBPACK_IMPORTED_MODULE_0__.request)(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .GRAPH_API_LOTTERY */ .Xr, graphql_request__WEBPACK_IMPORTED_MODULE_0__.gql`
        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {
          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {
            id
            totalUsers
            totalTickets
            winningTickets
            status
            finalNumber
            startTime
            endTime
            ticketPrice
          }
        }
      `, {
            skip,
            first,
            where
        });
        return response.lotteries;
    } catch (error) {
        console.error(error);
        return [];
    }
};
const getLotteriesData = async (currentLotteryId)=>{
    const idsForNodesCall = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .getRoundIdsArray */ .Db)(currentLotteryId);
    const [nodeData, graphResponse] = await Promise.all([
        (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .fetchMultipleLotteries */ .Tf)(idsForNodesCall),
        getGraphLotteries()
    ]);
    const mergedData = applyNodeDataToLotteriesGraphResponse(nodeData, graphResponse);
    return mergedData;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getLotteriesData);


/***/ }),

/***/ 50578:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "c7": () => (/* binding */ getGraphLotteryUser),
/* harmony export */   "n5": () => (/* binding */ MAX_USER_LOTTERIES_REQUEST_SIZE)
/* harmony export */ });
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5805);
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10494);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61374);
/* harmony import */ var _getUserTicketsData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(64792);




const MAX_USER_LOTTERIES_REQUEST_SIZE = 100;
const applyNodeDataToUserGraphResponse = (userNodeData, userGraphData, lotteryNodeData)=>{
    //   If no graph rounds response - return node data
    if (userGraphData.length === 0) {
        return lotteryNodeData.map((nodeRound)=>{
            const ticketDataForRound = userNodeData.find((roundTickets)=>roundTickets.roundId === nodeRound.lotteryId);
            return {
                endTime: nodeRound.endTime,
                status: nodeRound.status,
                lotteryId: nodeRound.lotteryId.toString(),
                claimed: (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .hasRoundBeenClaimed */ .SN)(ticketDataForRound.userTickets),
                totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,
                tickets: ticketDataForRound.userTickets
            };
        });
    }
    // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.
    const nodeRoundsWithGraphData = userNodeData.map((userNodeRound)=>{
        const userGraphRound = userGraphData.find((graphResponseRound)=>graphResponseRound.lotteryId === userNodeRound.roundId);
        const nodeRoundData = lotteryNodeData.find((nodeRound)=>nodeRound.lotteryId === userNodeRound.roundId);
        return {
            endTime: nodeRoundData.endTime,
            status: nodeRoundData.status,
            lotteryId: nodeRoundData.lotteryId.toString(),
            claimed: (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .hasRoundBeenClaimed */ .SN)(userNodeRound.userTickets),
            totalTickets: userGraphRound?.totalTickets || userNodeRound.userTickets.length.toString(),
            tickets: userNodeRound.userTickets
        };
    });
    // Return the rounds with combined data, plus all remaining subgraph rounds.
    const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1);
    const lastCombinedDataRoundIndex = userGraphData.map((graphRound)=>graphRound?.lotteryId).indexOf(lastCombinedDataRound?.lotteryId);
    const remainingSubgraphRounds = userGraphData ? userGraphData.splice(lastCombinedDataRoundIndex + 1) : [];
    const mergedResponse = [
        ...nodeRoundsWithGraphData,
        ...remainingSubgraphRounds
    ];
    return mergedResponse;
};
const getGraphLotteryUser = async (account, first = MAX_USER_LOTTERIES_REQUEST_SIZE, skip = 0, where = {})=>{
    let user;
    const blankUser = {
        account,
        totalCake: "",
        totalTickets: "",
        rounds: []
    };
    try {
        const response = await (0,graphql_request__WEBPACK_IMPORTED_MODULE_0__.request)(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .GRAPH_API_LOTTERY */ .Xr, graphql_request__WEBPACK_IMPORTED_MODULE_0__.gql`
        query getUserLotteries($account: ID!, $first: Int!, $skip: Int!, $where: Round_filter) {
          user(id: $account) {
            id
            totalTickets
            totalCake
            rounds(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {
              id
              lottery {
                id
                endTime
                status
              }
              claimed
              totalTickets
            }
          }
        }
      `, {
            account: account.toLowerCase(),
            first,
            skip,
            where
        });
        const userRes = response.user;
        // If no user returned - return blank user
        if (!userRes) {
            user = blankUser;
        } else {
            user = {
                account: userRes.id,
                totalCake: userRes.totalCake,
                totalTickets: userRes.totalTickets,
                rounds: userRes.rounds.map((round)=>{
                    return {
                        lotteryId: round?.lottery?.id,
                        endTime: round?.lottery?.endTime,
                        claimed: round?.claimed,
                        totalTickets: round?.totalTickets,
                        status: round?.lottery?.status.toLowerCase()
                    };
                })
            };
        }
    } catch (error) {
        console.error(error);
        user = blankUser;
    }
    return user;
};
const getUserLotteryData = async (account, currentLotteryId)=>{
    const idsForTicketsNodeCall = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .getRoundIdsArray */ .Db)(currentLotteryId);
    const roundDataAndUserTickets = await (0,_getUserTicketsData__WEBPACK_IMPORTED_MODULE_3__/* .fetchUserTicketsForMultipleRounds */ ["if"])(idsForTicketsNodeCall, account);
    const userRoundsNodeData = roundDataAndUserTickets.filter((round)=>round.userTickets.length > 0);
    const idsForLotteriesNodeCall = userRoundsNodeData.map((round)=>round.roundId);
    const [lotteriesNodeData, graphResponse] = await Promise.all([
        (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .fetchMultipleLotteries */ .Tf)(idsForLotteriesNodeCall),
        getGraphLotteryUser(account), 
    ]);
    const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData);
    const graphResponseWithNodeRounds = {
        ...graphResponse,
        rounds: mergedRoundData
    };
    return graphResponseWithNodeRounds;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getUserLotteryData);


/***/ }),

/***/ 64792:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "if": () => (/* binding */ fetchUserTicketsForMultipleRounds),
/* harmony export */   "sh": () => (/* binding */ fetchUserTicketsForOneRound)
/* harmony export */ });
/* unused harmony exports processRawTicketsResponse, viewUserInfoForLotteryId */
/* harmony import */ var config_constants_lottery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29762);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12895);


const lotteryContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_0__/* .getLotteryV2Contract */ .yd)();
const processRawTicketsResponse = (ticketsResponse)=>{
    const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse;
    if (ticketIds?.length > 0) {
        return ticketIds.map((ticketId, index)=>{
            return {
                id: ticketId.toString(),
                number: ticketNumbers[index].toString(),
                status: ticketStatuses[index]
            };
        });
    }
    return [];
};
const viewUserInfoForLotteryId = async (account, lotteryId, cursor, perRequestLimit)=>{
    try {
        const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit);
        return processRawTicketsResponse(data);
    } catch (error) {
        console.error("viewUserInfoForLotteryId", error);
        return null;
    }
};
const fetchUserTicketsForOneRound = async (account, lotteryId)=>{
    let cursor = 0;
    let numReturned = config_constants_lottery__WEBPACK_IMPORTED_MODULE_1__/* .TICKET_LIMIT_PER_REQUEST */ .r;
    const ticketData = [];
    while(numReturned === config_constants_lottery__WEBPACK_IMPORTED_MODULE_1__/* .TICKET_LIMIT_PER_REQUEST */ .r){
        // eslint-disable-next-line no-await-in-loop
        const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, config_constants_lottery__WEBPACK_IMPORTED_MODULE_1__/* .TICKET_LIMIT_PER_REQUEST */ .r);
        cursor += config_constants_lottery__WEBPACK_IMPORTED_MODULE_1__/* .TICKET_LIMIT_PER_REQUEST */ .r;
        numReturned = response.length;
        ticketData.push(...response);
    }
    return ticketData;
};
const fetchUserTicketsForMultipleRounds = async (idsToCheck, account)=>{
    const results = await Promise.all(idsToCheck.map((roundId)=>Promise.all([
            Promise.resolve(roundId),
            fetchUserTicketsForOneRound(account, roundId)
        ])));
    return results.map((result)=>{
        const [roundId, ticketsForRound] = result;
        return {
            roundId,
            userTickets: ticketsForRound
        };
    });
};


/***/ }),

/***/ 61374:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Db": () => (/* binding */ getRoundIdsArray),
/* harmony export */   "JE": () => (/* binding */ fetchLottery),
/* harmony export */   "SN": () => (/* binding */ hasRoundBeenClaimed),
/* harmony export */   "Tf": () => (/* binding */ fetchMultipleLotteries),
/* harmony export */   "kC": () => (/* binding */ fetchCurrentLotteryId),
/* harmony export */   "xT": () => (/* binding */ fetchCurrentLotteryIdAndMaxBuy)
/* harmony export */ });
/* harmony import */ var config_constants_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6429);
/* harmony import */ var config_abi_lotteryV2_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48592);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(70627);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25152);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12895);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85576);
/* harmony import */ var config_constants_lottery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29762);







const lotteryContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getLotteryV2Contract */ .yd)();
const processViewLotterySuccessResponse = (response, lotteryId)=>{
    const { status , startTime , endTime , priceTicketInCake , discountDivisor , treasuryFee , firstTicketId , lastTicketId , amountCollectedInCake , finalNumber , cakePerBracket , countWinnersPerBracket , rewardsBreakdown ,  } = response;
    const statusKey = Object.keys(config_constants_types__WEBPACK_IMPORTED_MODULE_0__/* .LotteryStatus */ .p3)[status];
    const serializedCakePerBracket = cakePerBracket.map((cakeInBracket)=>(0,_pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .ethersToSerializedBigNumber */ .L8)(cakeInBracket));
    const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket)=>(0,_pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .ethersToSerializedBigNumber */ .L8)(winnersInBracket));
    const serializedRewardsBreakdown = rewardsBreakdown.map((reward)=>(0,_pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .ethersToSerializedBigNumber */ .L8)(reward));
    return {
        isLoading: false,
        lotteryId,
        status: config_constants_types__WEBPACK_IMPORTED_MODULE_0__/* .LotteryStatus */ .p3[statusKey],
        startTime: startTime?.toString(),
        endTime: endTime?.toString(),
        priceTicketInCake: (0,_pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .ethersToSerializedBigNumber */ .L8)(priceTicketInCake),
        discountDivisor: discountDivisor?.toString(),
        treasuryFee: treasuryFee?.toString(),
        firstTicketId: firstTicketId?.toString(),
        lastTicketId: lastTicketId?.toString(),
        amountCollectedInCake: (0,_pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .ethersToSerializedBigNumber */ .L8)(amountCollectedInCake),
        finalNumber,
        cakePerBracket: serializedCakePerBracket,
        countWinnersPerBracket: serializedCountWinnersPerBracket,
        rewardsBreakdown: serializedRewardsBreakdown
    };
};
const processViewLotteryErrorResponse = (lotteryId)=>{
    return {
        isLoading: true,
        lotteryId,
        status: config_constants_types__WEBPACK_IMPORTED_MODULE_0__/* .LotteryStatus.PENDING */ .p3.PENDING,
        startTime: "",
        endTime: "",
        priceTicketInCake: "",
        discountDivisor: "",
        treasuryFee: "",
        firstTicketId: "",
        lastTicketId: "",
        amountCollectedInCake: "",
        finalNumber: null,
        cakePerBracket: [],
        countWinnersPerBracket: [],
        rewardsBreakdown: []
    };
};
const fetchLottery = async (lotteryId)=>{
    try {
        const lotteryData = await lotteryContract.viewLottery(lotteryId);
        return processViewLotterySuccessResponse(lotteryData, lotteryId);
    } catch (error) {
        return processViewLotteryErrorResponse(lotteryId);
    }
};
const fetchMultipleLotteries = async (lotteryIds)=>{
    const calls = lotteryIds.map((id)=>({
            name: "viewLottery",
            address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_2__/* .getLotteryV2Address */ .kN)(),
            params: [
                id
            ]
        }));
    try {
        const multicallRes = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* .multicallv2 */ .v)({
            abi: config_abi_lotteryV2_json__WEBPACK_IMPORTED_MODULE_1__,
            calls,
            options: {
                requireSuccess: false
            }
        });
        const processedResponses = multicallRes.map((res, index)=>processViewLotterySuccessResponse(res[0], lotteryIds[index]));
        return processedResponses;
    } catch (error) {
        console.error(error);
        return calls.map((call, index)=>processViewLotteryErrorResponse(lotteryIds[index]));
    }
};
const fetchCurrentLotteryId = async ()=>{
    return lotteryContract.currentLotteryId();
};
const fetchCurrentLotteryIdAndMaxBuy = async ()=>{
    try {
        const calls = [
            "currentLotteryId",
            "maxNumberTicketsPerBuyOrClaim"
        ].map((method)=>({
                address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_2__/* .getLotteryV2Address */ .kN)(),
                name: method
            }));
        const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* .multicallv2 */ .v)({
            abi: config_abi_lotteryV2_json__WEBPACK_IMPORTED_MODULE_1__,
            calls
        });
        return {
            currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,
            maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null
        };
    } catch (error) {
        return {
            currentLotteryId: null,
            maxNumberTicketsPerBuyOrClaim: null
        };
    }
};
const getRoundIdsArray = (currentLotteryId)=>{
    const currentIdAsInt = parseInt(currentLotteryId, 10);
    const roundIds = [];
    for(let i = 0; i < config_constants_lottery__WEBPACK_IMPORTED_MODULE_6__/* .NUM_ROUNDS_TO_FETCH_FROM_NODES */ .AN; i++){
        roundIds.push(currentIdAsInt - i);
    }
    return roundIds.map((roundId)=>roundId.toString());
};
const hasRoundBeenClaimed = (tickets)=>{
    const claimedTickets = tickets.filter((ticket)=>ticket.status);
    return claimedTickets.length > 0;
};


/***/ }),

/***/ 50924:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Mz": () => (/* binding */ fetchAdditionalUserLotteries),
/* harmony export */   "PU": () => (/* binding */ fetchCurrentLottery),
/* harmony export */   "S5": () => (/* binding */ fetchPublicLotteries),
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "kC": () => (/* binding */ fetchCurrentLotteryId),
/* harmony export */   "og": () => (/* binding */ setLotteryIsTransitioning),
/* harmony export */   "w5": () => (/* binding */ fetchUserTicketsAndLotteries),
/* harmony export */   "wV": () => (/* binding */ fetchUserLotteries)
/* harmony export */ });
/* unused harmony export LotterySlice */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var config_constants_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6429);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61374);
/* harmony import */ var _getLotteriesData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2523);
/* harmony import */ var _getUserLotteryData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50578);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18770);
/* eslint-disable no-param-reassign */ 





const initialState = {
    currentLotteryId: null,
    isTransitioning: false,
    maxNumberTicketsPerBuyOrClaim: null,
    currentRound: {
        isLoading: true,
        lotteryId: null,
        status: config_constants_types__WEBPACK_IMPORTED_MODULE_1__/* .LotteryStatus.PENDING */ .p3.PENDING,
        startTime: "",
        endTime: "",
        priceTicketInCake: "",
        discountDivisor: "",
        treasuryFee: "",
        firstTicketId: "",
        lastTicketId: "",
        amountCollectedInCake: "",
        finalNumber: null,
        cakePerBracket: [],
        countWinnersPerBracket: [],
        rewardsBreakdown: [],
        userTickets: {
            isLoading: true,
            tickets: []
        }
    },
    lotteriesData: null,
    userLotteryData: {
        account: "",
        totalCake: "",
        totalTickets: "",
        rounds: []
    }
};
const fetchCurrentLottery = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchCurrentLottery", async ({ currentLotteryId  })=>{
    const lotteryInfo = await (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .fetchLottery */ .JE)(currentLotteryId);
    return lotteryInfo;
});
const fetchCurrentLotteryId = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchCurrentLotteryId", async ()=>{
    const currentIdAndMaxBuy = await (0,_helpers__WEBPACK_IMPORTED_MODULE_2__/* .fetchCurrentLotteryIdAndMaxBuy */ .xT)();
    return currentIdAndMaxBuy;
});
const fetchUserTicketsAndLotteries = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchUserTicketsAndLotteries", async ({ account , currentLotteryId  })=>{
    const userLotteriesRes = await (0,_getUserLotteryData__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .ZP)(account, currentLotteryId);
    const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round)=>round.lotteryId === currentLotteryId);
    const userTickets = userParticipationInCurrentRound?.tickets;
    // User has not bought tickets for the current lottery, or there has been an error
    if (!userTickets || userTickets.length === 0) {
        return {
            userTickets: [],
            userLotteries: userLotteriesRes
        };
    }
    return {
        userTickets,
        userLotteries: userLotteriesRes
    };
});
const fetchPublicLotteries = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchPublicLotteries", async ({ currentLotteryId  })=>{
    const lotteries = await (0,_getLotteriesData__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP)(currentLotteryId);
    return lotteries;
});
const fetchUserLotteries = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchUserLotteries", async ({ account , currentLotteryId  })=>{
    const userLotteries = await (0,_getUserLotteryData__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .ZP)(account, currentLotteryId);
    return userLotteries;
});
const fetchAdditionalUserLotteries = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("lottery/fetchAdditionalUserLotteries", async ({ account , skip  })=>{
    const additionalUserLotteries = await (0,_getUserLotteryData__WEBPACK_IMPORTED_MODULE_4__/* .getGraphLotteryUser */ .c7)(account, undefined, skip);
    return additionalUserLotteries;
});
const setLotteryIsTransitioning = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)(`lottery/setIsTransitioning`, async ({ isTransitioning  })=>{
    return {
        isTransitioning
    };
});
const LotterySlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({
    name: "Lottery",
    initialState,
    reducers: {},
    extraReducers: (builder)=>{
        builder.addCase(_global_actions__WEBPACK_IMPORTED_MODULE_5__/* .resetUserState */ .tZ, (state)=>{
            state.userLotteryData = {
                ...initialState.userLotteryData
            };
            state.currentRound = {
                ...state.currentRound,
                userTickets: {
                    ...initialState.currentRound.userTickets
                }
            };
        });
        builder.addCase(fetchCurrentLottery.fulfilled, (state, action)=>{
            state.currentRound = {
                ...state.currentRound,
                ...action.payload
            };
        });
        builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action)=>{
            state.currentLotteryId = action.payload.currentLotteryId;
            state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim;
        });
        builder.addCase(fetchUserTicketsAndLotteries.fulfilled, (state, action)=>{
            state.currentRound = {
                ...state.currentRound,
                userTickets: {
                    isLoading: false,
                    tickets: action.payload.userTickets
                }
            };
            state.userLotteryData = action.payload.userLotteries;
        });
        builder.addCase(fetchPublicLotteries.fulfilled, (state, action)=>{
            state.lotteriesData = action.payload;
        });
        builder.addCase(fetchUserLotteries.fulfilled, (state, action)=>{
            state.userLotteryData = action.payload;
        });
        builder.addCase(fetchAdditionalUserLotteries.fulfilled, (state, action)=>{
            const mergedRounds = [
                ...state.userLotteryData.rounds,
                ...action.payload.rounds
            ];
            state.userLotteryData = {
                ...state.userLotteryData,
                rounds: mergedRounds
            };
        });
        builder.addCase(setLotteryIsTransitioning.fulfilled, (state, action)=>{
            state.isTransitioning = action.payload.isTransitioning;
        });
    }
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LotterySlice.reducer);


/***/ }),

/***/ 84709:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LC": () => (/* binding */ typeInput),
/* harmony export */   "dA": () => (/* binding */ resetMintState),
/* harmony export */   "gN": () => (/* binding */ Field)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

var Field;
(function(Field) {
    Field["CURRENCY_A"] = "CURRENCY_A";
    Field["CURRENCY_B"] = "CURRENCY_B";
})(Field || (Field = {}));
const typeInput = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("mint/typeInputMint");
const resetMintState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("mint/resetMintState");


/***/ }),

/***/ 54233:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84709);


const initialState = {
    independentField: _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.CURRENCY_A */ .gN.CURRENCY_A,
    typedValue: "",
    otherTypedValue: ""
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .resetMintState */ .dA, ()=>initialState).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .typeInput */ .LC, (state, { payload: { field , typedValue , noLiquidity  }  })=>{
        if (noLiquidity) {
            // they're typing into the field they've last typed in
            if (field === state.independentField) {
                return {
                    ...state,
                    independentField: field,
                    typedValue
                };
            }
            // they're typing into a new field, store the other value
            return {
                ...state,
                independentField: field,
                typedValue,
                otherTypedValue: state.typedValue
            };
        }
        return {
            ...state,
            independentField: field,
            typedValue,
            otherTypedValue: ""
        };
    })));


/***/ }),

/***/ 22284:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$x": () => (/* binding */ removeMulticallListeners),
/* harmony export */   "Dd": () => (/* binding */ addMulticallListeners),
/* harmony export */   "gl": () => (/* binding */ parseCallKey),
/* harmony export */   "kG": () => (/* binding */ toCallKey),
/* harmony export */   "nu": () => (/* binding */ fetchingMulticallResults),
/* harmony export */   "wC": () => (/* binding */ errorFetchingMulticallResults),
/* harmony export */   "zT": () => (/* binding */ updateMulticallResults)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

const ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;
const LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;
function toCallKey(call) {
    if (!ADDRESS_REGEX.test(call.address)) {
        throw new Error(`Invalid address: ${call.address}`);
    }
    if (!LOWER_HEX_REGEX.test(call.callData)) {
        throw new Error(`Invalid hex: ${call.callData}`);
    }
    return `${call.address}-${call.callData}`;
}
function parseCallKey(callKey) {
    const pcs = callKey.split("-");
    if (pcs.length !== 2) {
        throw new Error(`Invalid call key: ${callKey}`);
    }
    return {
        address: pcs[0],
        callData: pcs[1]
    };
}
const addMulticallListeners = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("multicall/addMulticallListeners");
const removeMulticallListeners = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("multicall/removeMulticallListeners");
const fetchingMulticallResults = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("multicall/fetchingMulticallResults");
const errorFetchingMulticallResults = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("multicall/errorFetchingMulticallResults");
const updateMulticallResults = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("multicall/updateMulticallResults");


/***/ }),

/***/ 5191:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22284);


const initialState = {
    callResults: {}
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .addMulticallListeners */ .Dd, (state, { payload: { calls , chainId , options: { blocksPerFetch =1  } = {}  }  })=>{
        const listeners = state.callListeners ? state.callListeners : state.callListeners = {};
        listeners[chainId] = listeners[chainId] ?? {};
        calls.forEach((call)=>{
            const callKey = (0,_actions__WEBPACK_IMPORTED_MODULE_1__/* .toCallKey */ .kG)(call);
            listeners[chainId][callKey] = listeners[chainId][callKey] ?? {};
            listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1;
        });
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .removeMulticallListeners */ .$x, (state, { payload: { chainId , calls , options: { blocksPerFetch =1  } = {}  }  })=>{
        const listeners = state.callListeners ? state.callListeners : state.callListeners = {};
        if (!listeners[chainId]) return;
        calls.forEach((call)=>{
            const callKey = (0,_actions__WEBPACK_IMPORTED_MODULE_1__/* .toCallKey */ .kG)(call);
            if (!listeners[chainId][callKey]) return;
            if (!listeners[chainId][callKey][blocksPerFetch]) return;
            if (listeners[chainId][callKey][blocksPerFetch] === 1) {
                delete listeners[chainId][callKey][blocksPerFetch];
            } else {
                listeners[chainId][callKey][blocksPerFetch]--;
            }
        });
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .fetchingMulticallResults */ .nu, (state, { payload: { chainId , fetchingBlockNumber , calls  }  })=>{
        state.callResults[chainId] = state.callResults[chainId] ?? {};
        calls.forEach((call)=>{
            const callKey = (0,_actions__WEBPACK_IMPORTED_MODULE_1__/* .toCallKey */ .kG)(call);
            const current = state.callResults[chainId][callKey];
            if (!current) {
                state.callResults[chainId][callKey] = {
                    fetchingBlockNumber
                };
            } else {
                if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return;
                state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;
            }
        });
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .errorFetchingMulticallResults */ .wC, (state, { payload: { fetchingBlockNumber , chainId , calls  }  })=>{
        state.callResults[chainId] = state.callResults[chainId] ?? {};
        calls.forEach((call)=>{
            const callKey = (0,_actions__WEBPACK_IMPORTED_MODULE_1__/* .toCallKey */ .kG)(call);
            const current = state.callResults[chainId][callKey];
            if (!current) return; // only should be dispatched if we are already fetching
            if (current.fetchingBlockNumber === fetchingBlockNumber) {
                delete current.fetchingBlockNumber;
                current.data = null;
                current.blockNumber = fetchingBlockNumber;
            }
        });
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .updateMulticallResults */ .zT, (state, { payload: { chainId , results , blockNumber  }  })=>{
        state.callResults[chainId] = state.callResults[chainId] ?? {};
        Object.keys(results).forEach((callKey)=>{
            const current = state.callResults[chainId][callKey];
            if ((current?.blockNumber ?? 0) > blockNumber) return;
            state.callResults[chainId][callKey] = {
                data: results[callKey],
                blockNumber
            };
        });
    })));


/***/ }),

/***/ 45320:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "YV": () => (/* binding */ fetchPoolsBlockLimits),
  "ps": () => (/* binding */ fetchPoolsProfileRequirement),
  "R0": () => (/* binding */ fetchPoolsStakingLimits),
  "oK": () => (/* binding */ fetchPoolsTotalStaking)
});

// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(34215);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);
// EXTERNAL MODULE: external "lodash/fromPairs"
var fromPairs_ = __webpack_require__(57626);
var fromPairs_default = /*#__PURE__*/__webpack_require__.n(fromPairs_);
// EXTERNAL MODULE: ./src/config/constants/pools.tsx
var pools = __webpack_require__(73486);
// EXTERNAL MODULE: ./src/config/abi/sousChef.json
var sousChef = __webpack_require__(86477);
// EXTERNAL MODULE: ./src/config/abi/erc20.json
var erc20 = __webpack_require__(93324);
// EXTERNAL MODULE: ./src/utils/multicall.ts
var multicall = __webpack_require__(25152);
// EXTERNAL MODULE: ./src/utils/addressHelpers.ts
var addressHelpers = __webpack_require__(70627);
// EXTERNAL MODULE: ../../packages/utils/bigNumber.ts
var bigNumber = __webpack_require__(85576);
// EXTERNAL MODULE: external "lodash/chunk"
var chunk_ = __webpack_require__(90221);
var chunk_default = /*#__PURE__*/__webpack_require__.n(chunk_);
// EXTERNAL MODULE: ./src/config/abi/sousChefV2.json
var sousChefV2 = __webpack_require__(9022);
;// CONCATENATED MODULE: ./src/config/abi/sousChefV3.json
const sousChefV3_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfile","type":"address"},{"internalType":"bool","name":"_pancakeProfileIsRequested","type":"bool"},{"internalType":"uint256","name":"_pancakeProfileThresholdPoints","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"poolLimitPerUser","type":"uint256"}],"name":"NewPoolLimit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPerBlock","type":"uint256"}],"name":"NewRewardPerBlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"startBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endBlock","type":"uint256"}],"name":"NewStartAndEndBlocks","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"RewardsStop","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isProfileRequested","type":"bool"},{"indexed":false,"internalType":"uint256","name":"thresholdPoints","type":"uint256"}],"name":"UpdateProfileAndThresholdPointsRequirement","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"PRECISION_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SMART_CHEF_FACTORY","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"accTokenPerShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bonusEndBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyRewardWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hasUserLimit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20Metadata","name":"_stakedToken","type":"address"},{"internalType":"contract IERC20Metadata","name":"_rewardToken","type":"address"},{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"},{"internalType":"uint256","name":"_poolLimitPerUser","type":"uint256"},{"internalType":"uint256","name":"_numberBlocksForUserLimit","type":"uint256"},{"internalType":"address","name":"_admin","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastRewardBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberBlocksForUserLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfileIsRequested","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfileThresholdPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"pendingReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLimitPerUser","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardToken","outputs":[{"internalType":"contract IERC20Metadata","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakedToken","outputs":[{"internalType":"contract IERC20Metadata","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stopReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_userLimit","type":"bool"},{"internalType":"uint256","name":"_poolLimitPerUser","type":"uint256"}],"name":"updatePoolLimitPerUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isRequested","type":"bool"},{"internalType":"uint256","name":"_thresholdPoints","type":"uint256"}],"name":"updateProfileAndThresholdPointsRequirement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"}],"name":"updateRewardPerBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"}],"name":"updateStartAndEndBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"userLimit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
;// CONCATENATED MODULE: ./src/state/pools/fetchPools.ts











const livePoolsWithEnd = pools/* default.filter */.ZP.filter((p)=>p.sousId !== 0 && !p.isFinished);
const startEndBlockCalls = livePoolsWithEnd.flatMap((poolConfig)=>{
    return [
        {
            address: (0,addressHelpers/* getAddress */.Kn)(poolConfig.contractAddress),
            name: "startBlock"
        },
        {
            address: (0,addressHelpers/* getAddress */.Kn)(poolConfig.contractAddress),
            name: "bonusEndBlock"
        }, 
    ];
});
const fetchPoolsBlockLimits = async ()=>{
    const startEndBlockRaw = await (0,multicall/* default */.Z)(sousChef, startEndBlockCalls);
    const startEndBlockResult = startEndBlockRaw.reduce((resultArray, item, index)=>{
        const chunkIndex = Math.floor(index / 2);
        if (!resultArray[chunkIndex]) {
            // eslint-disable-next-line no-param-reassign
            resultArray[chunkIndex] = [] // start a new chunk
            ;
        }
        resultArray[chunkIndex].push(item);
        return resultArray;
    }, []);
    return livePoolsWithEnd.map((cakePoolConfig, index)=>{
        const [[startBlock], [endBlock]] = startEndBlockResult[index];
        return {
            sousId: cakePoolConfig.sousId,
            startBlock: startBlock.toNumber(),
            endBlock: endBlock.toNumber()
        };
    });
};
const poolsBalanceOf = pools/* default.map */.ZP.map((poolConfig)=>{
    return {
        address: poolConfig.stakingToken.address,
        name: "balanceOf",
        params: [
            (0,addressHelpers/* getAddress */.Kn)(poolConfig.contractAddress)
        ]
    };
});
const fetchPoolsTotalStaking = async ()=>{
    const poolsTotalStaked = await (0,multicall/* default */.Z)(erc20, poolsBalanceOf);
    return pools/* default.map */.ZP.map((p, index)=>({
            sousId: p.sousId,
            totalStaked: new (external_bignumber_js_default())(poolsTotalStaked[index]).toJSON()
        }));
};
const fetchPoolsStakingLimits = async (poolsWithStakingLimit)=>{
    const validPools = pools/* default.filter */.ZP.filter((p)=>p.stakingToken.symbol !== "BNB" && !p.isFinished).filter((p)=>!poolsWithStakingLimit.includes(p.sousId));
    // Get the staking limit for each valid pool
    const poolStakingCalls = validPools.map((validPool)=>{
        const contractAddress = (0,addressHelpers/* getAddress */.Kn)(validPool.contractAddress);
        return [
            "hasUserLimit",
            "poolLimitPerUser",
            "numberBlocksForUserLimit"
        ].map((method)=>({
                address: contractAddress,
                name: method
            }));
    }).flat();
    const poolStakingResultRaw = await (0,multicall/* multicallv2 */.v)({
        abi: sousChefV2,
        calls: poolStakingCalls,
        options: {
            requireSuccess: false
        }
    });
    const chunkSize = poolStakingCalls.length / validPools.length;
    const poolStakingChunkedResultRaw = chunk_default()(poolStakingResultRaw.flat(), chunkSize);
    return fromPairs_default()(poolStakingChunkedResultRaw.map((stakingLimitRaw, index)=>{
        const hasUserLimit = stakingLimitRaw[0];
        const stakingLimit = hasUserLimit && stakingLimitRaw[1] ? new (external_bignumber_js_default())(stakingLimitRaw[1].toString()) : bigNumber/* BIG_ZERO */.HW;
        const numberBlocksForUserLimit = stakingLimitRaw[2] ? stakingLimitRaw[2].toNumber() : 0;
        return [
            validPools[index].sousId,
            {
                stakingLimit,
                numberBlocksForUserLimit
            }
        ];
    }));
};
const livePoolsWithV3 = pools/* default.filter */.ZP.filter((pool)=>pool?.version === 3 && pool?.isFinished === false);
const fetchPoolsProfileRequirement = async ()=>{
    const poolProfileRequireCalls = livePoolsWithV3.map((validPool)=>{
        const contractAddress = (0,addressHelpers/* getAddress */.Kn)(validPool.contractAddress);
        return [
            "pancakeProfileIsRequested",
            "pancakeProfileThresholdPoints"
        ].map((method)=>({
                address: contractAddress,
                name: method
            }));
    }).flat();
    const poolProfileRequireResultRaw = await (0,multicall/* multicallv2 */.v)({
        abi: sousChefV3_namespaceObject,
        calls: poolProfileRequireCalls,
        options: {
            requireSuccess: false
        }
    });
    const chunkSize = poolProfileRequireCalls.length / livePoolsWithV3.length;
    const poolStakingChunkedResultRaw = chunk_default()(poolProfileRequireResultRaw.flat(), chunkSize);
    return fromPairs_default()(poolStakingChunkedResultRaw.map((poolProfileRequireRaw, index)=>{
        const hasProfileRequired = poolProfileRequireRaw[0];
        const profileThresholdPoints = poolProfileRequireRaw[1] ? new (external_bignumber_js_default())(poolProfileRequireRaw[1].toString()) : bigNumber/* BIG_ZERO */.HW;
        return [
            livePoolsWithV3[index].sousId,
            {
                required: !!hasProfileRequired,
                thresholdPoints: profileThresholdPoints.toJSON()
            }, 
        ];
    }));
};


/***/ }),

/***/ 6172:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K_": () => (/* binding */ fetchPoolsAllowance),
/* harmony export */   "gR": () => (/* binding */ fetchUserStakeBalances),
/* harmony export */   "h6": () => (/* binding */ fetchUserBalances),
/* harmony export */   "xS": () => (/* binding */ fetchUserPendingRewards)
/* harmony export */ });
/* harmony import */ var config_constants_pools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73486);
/* harmony import */ var config_abi_sousChef_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86477);
/* harmony import */ var config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93324);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25152);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(70627);
/* harmony import */ var utils_providers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11536);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(18459);
/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_uniq__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57626);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8__);









// Pool 0, Cake / Cake is a different kind of contract (master chef)
// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)
const nonBnbPools = config_constants_pools__WEBPACK_IMPORTED_MODULE_0__/* ["default"].filter */ .ZP.filter((pool)=>pool.stakingToken.symbol !== "BNB");
const bnbPools = config_constants_pools__WEBPACK_IMPORTED_MODULE_0__/* ["default"].filter */ .ZP.filter((pool)=>pool.stakingToken.symbol === "BNB");
const nonMasterPools = config_constants_pools__WEBPACK_IMPORTED_MODULE_0__/* ["default"].filter */ .ZP.filter((pool)=>pool.sousId !== 0);
const fetchPoolsAllowance = async (account)=>{
    const calls = nonBnbPools.map((pool)=>({
            address: pool.stakingToken.address,
            name: "allowance",
            params: [
                account,
                (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getAddress */ .Kn)(pool.contractAddress)
            ]
        }));
    const allowances = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__, calls);
    return lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(nonBnbPools.map((pool, index)=>[
            pool.sousId,
            new (bignumber_js__WEBPACK_IMPORTED_MODULE_6___default())(allowances[index]).toJSON()
        ]));
};
const fetchUserBalances = async (account)=>{
    // Non BNB pools
    const tokens = lodash_uniq__WEBPACK_IMPORTED_MODULE_7___default()(nonBnbPools.map((pool)=>pool.stakingToken.address));
    const calls = tokens.map((token)=>({
            address: token,
            name: "balanceOf",
            params: [
                account
            ]
        }));
    const [tokenBalancesRaw, bnbBalance] = await Promise.all([
        (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(config_abi_erc20_json__WEBPACK_IMPORTED_MODULE_2__, calls),
        utils_providers__WEBPACK_IMPORTED_MODULE_5__/* .bscRpcProvider.getBalance */ .v.getBalance(account), 
    ]);
    const tokenBalances = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(tokens.map((token, index)=>[
            token,
            tokenBalancesRaw[index]
        ]));
    const poolTokenBalances = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(nonBnbPools.map((pool)=>{
        if (!tokenBalances[pool.stakingToken.address]) return null;
        return [
            pool.sousId,
            new (bignumber_js__WEBPACK_IMPORTED_MODULE_6___default())(tokenBalances[pool.stakingToken.address]).toJSON()
        ];
    }).filter(Boolean));
    // BNB pools
    const bnbBalanceJson = new (bignumber_js__WEBPACK_IMPORTED_MODULE_6___default())(bnbBalance.toString()).toJSON();
    const bnbBalances = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(bnbPools.map((pool)=>[
            pool.sousId,
            bnbBalanceJson
        ]));
    return {
        ...poolTokenBalances,
        ...bnbBalances
    };
};
const fetchUserStakeBalances = async (account)=>{
    const calls = nonMasterPools.map((p)=>({
            address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getAddress */ .Kn)(p.contractAddress),
            name: "userInfo",
            params: [
                account
            ]
        }));
    const userInfo = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(config_abi_sousChef_json__WEBPACK_IMPORTED_MODULE_1__, calls);
    return lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(nonMasterPools.map((pool, index)=>[
            pool.sousId,
            new (bignumber_js__WEBPACK_IMPORTED_MODULE_6___default())(userInfo[index].amount._hex).toJSON()
        ]));
};
const fetchUserPendingRewards = async (account)=>{
    const calls = nonMasterPools.map((p)=>({
            address: (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getAddress */ .Kn)(p.contractAddress),
            name: "pendingReward",
            params: [
                account
            ]
        }));
    const res = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(config_abi_sousChef_json__WEBPACK_IMPORTED_MODULE_1__, calls);
    return lodash_fromPairs__WEBPACK_IMPORTED_MODULE_8___default()(nonMasterPools.map((pool, index)=>[
            pool.sousId,
            new (bignumber_js__WEBPACK_IMPORTED_MODULE_6___default())(res[index]).toJSON()
        ]));
};


/***/ }),

/***/ 70994:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o": () => (/* binding */ fetchUserIfoCredit),
/* harmony export */   "s": () => (/* binding */ fetchPublicIfoData)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85576);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12895);



const fetchPublicIfoData = async ()=>{
    try {
        const ifoCreditAddressContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_2__/* .getIfoCreditAddressContract */ .Gc)();
        const ceiling = await ifoCreditAddressContract.ceiling();
        return {
            ceiling: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(ceiling.toString()).toJSON()
        };
    } catch (error) {
        return {
            ceiling: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO.toJSON */ .HW.toJSON()
        };
    }
};
const fetchUserIfoCredit = async (account)=>{
    try {
        const ifoCreditAddressContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_2__/* .getIfoCreditAddressContract */ .Gc)();
        const credit = await ifoCreditAddressContract.getUserCredit(account);
        return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(credit.toString()).toJSON();
    } catch (error) {
        return _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_ZERO.toJSON */ .HW.toJSON();
    }
};


/***/ }),

/***/ 12257:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ct": () => (/* binding */ fetchVaultFees),
/* harmony export */   "Io": () => (/* binding */ fetchPublicVaultData),
/* harmony export */   "TR": () => (/* binding */ fetchPublicFlexibleSideVaultData)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(25152);
/* harmony import */ var config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93293);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70627);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85576);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12895);






const cakeVaultV2 = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__/* .getCakeVaultAddress */ .O9)();
const cakeFlexibleSideVaultV2 = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__/* .getCakeFlexibleSideVaultAddress */ .pO)();
const cakeContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_5__/* .getCakeContract */ .XT)();
const fetchPublicVaultData = async (cakeVaultAddress = cakeVaultV2)=>{
    try {
        const calls = [
            "getPricePerFullShare",
            "totalShares",
            "totalLockedAmount"
        ].map((method)=>({
                address: cakeVaultAddress,
                name: method
            }));
        const [[[sharePrice], [shares], totalLockedAmount], totalCakeInVault] = await Promise.all([
            (0,utils_multicall__WEBPACK_IMPORTED_MODULE_1__/* .multicallv2 */ .v)({
                abi: config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__,
                calls,
                options: {
                    requireSuccess: false
                }
            }),
            cakeContract.balanceOf(cakeVaultV2), 
        ]);
        const totalSharesAsBigNumber = shares ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(shares.toString()) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO */ .HW;
        const totalLockedAmountAsBigNumber = totalLockedAmount ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalLockedAmount[0].toString()) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO */ .HW;
        const sharePriceAsBigNumber = sharePrice ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(sharePrice.toString()) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO */ .HW;
        return {
            totalShares: totalSharesAsBigNumber.toJSON(),
            totalLockedAmount: totalLockedAmountAsBigNumber.toJSON(),
            pricePerFullShare: sharePriceAsBigNumber.toJSON(),
            totalCakeInVault: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalCakeInVault.toString()).toJSON()
        };
    } catch (error) {
        return {
            totalShares: null,
            totalLockedAmount: null,
            pricePerFullShare: null,
            totalCakeInVault: null
        };
    }
};
const fetchPublicFlexibleSideVaultData = async (cakeVaultAddress = cakeFlexibleSideVaultV2)=>{
    try {
        const calls = [
            "getPricePerFullShare",
            "totalShares"
        ].map((method)=>({
                address: cakeVaultAddress,
                name: method
            }));
        const [[[sharePrice], [shares]], totalCakeInVault] = await Promise.all([
            (0,utils_multicall__WEBPACK_IMPORTED_MODULE_1__/* .multicallv2 */ .v)({
                abi: config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__,
                calls,
                options: {
                    requireSuccess: false
                }
            }),
            cakeContract.balanceOf(cakeVaultAddress), 
        ]);
        const totalSharesAsBigNumber = shares ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(shares.toString()) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO */ .HW;
        const sharePriceAsBigNumber = sharePrice ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(sharePrice.toString()) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO */ .HW;
        return {
            totalShares: totalSharesAsBigNumber.toJSON(),
            pricePerFullShare: sharePriceAsBigNumber.toJSON(),
            totalCakeInVault: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalCakeInVault.toString()).toJSON()
        };
    } catch (error) {
        return {
            totalShares: null,
            pricePerFullShare: null,
            totalCakeInVault: null
        };
    }
};
const fetchVaultFees = async (cakeVaultAddress = cakeVaultV2)=>{
    try {
        const calls = [
            "performanceFee",
            "withdrawFee",
            "withdrawFeePeriod"
        ].map((method)=>({
                address: cakeVaultAddress,
                name: method
            }));
        const [[performanceFee], [withdrawalFee], [withdrawalFeePeriod]] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_1__/* .multicallv2 */ .v)({
            abi: config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__,
            calls
        });
        return {
            performanceFee: performanceFee.toNumber(),
            withdrawalFee: withdrawalFee.toNumber(),
            withdrawalFeePeriod: withdrawalFeePeriod.toNumber()
        };
    } catch (error) {
        return {
            performanceFee: null,
            withdrawalFee: null,
            withdrawalFeePeriod: null
        };
    }
};
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (fetchPublicVaultData)));


/***/ }),

/***/ 11800:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => (/* binding */ fetchFlexibleSideVaultUser),
/* harmony export */   "v": () => (/* binding */ fetchVaultUser)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(70627);
/* harmony import */ var config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93293);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25152);
/* harmony import */ var _utils_contractHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12895);





const cakeVaultAddress = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_1__/* .getCakeVaultAddress */ .O9)();
const flexibleSideVaultContract = (0,_utils_contractHelpers__WEBPACK_IMPORTED_MODULE_4__/* .getCakeFlexibleSideVaultV2Contract */ .J7)();
const fetchVaultUser = async (account)=>{
    try {
        const calls = [
            "userInfo",
            "calculatePerformanceFee",
            "calculateOverdueFee"
        ].map((method)=>({
                address: cakeVaultAddress,
                name: method,
                params: [
                    account
                ]
            }));
        const [userContractResponse, [currentPerformanceFee], [currentOverdueFee]] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_3__/* .multicallv2 */ .v)({
            abi: config_abi_cakeVaultV2_json__WEBPACK_IMPORTED_MODULE_2__,
            calls
        });
        return {
            isLoading: false,
            userShares: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.shares.toString()).toJSON(),
            lastDepositedTime: userContractResponse.lastDepositedTime.toString(),
            lastUserActionTime: userContractResponse.lastUserActionTime.toString(),
            cakeAtLastUserAction: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),
            userBoostedShare: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.userBoostedShare.toString()).toJSON(),
            locked: userContractResponse.locked,
            lockEndTime: userContractResponse.lockEndTime.toString(),
            lockStartTime: userContractResponse.lockStartTime.toString(),
            lockedAmount: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.lockedAmount.toString()).toJSON(),
            currentPerformanceFee: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(currentPerformanceFee.toString()).toJSON(),
            currentOverdueFee: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(currentOverdueFee.toString()).toJSON()
        };
    } catch (error) {
        return {
            isLoading: true,
            userShares: null,
            lastDepositedTime: null,
            lastUserActionTime: null,
            cakeAtLastUserAction: null,
            userBoostedShare: null,
            lockEndTime: null,
            lockStartTime: null,
            locked: null,
            lockedAmount: null,
            currentPerformanceFee: null,
            currentOverdueFee: null
        };
    }
};
const fetchFlexibleSideVaultUser = async (account)=>{
    try {
        const userContractResponse = await flexibleSideVaultContract.userInfo(account);
        return {
            isLoading: false,
            userShares: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.shares.toString()).toJSON(),
            lastDepositedTime: userContractResponse.lastDepositedTime.toString(),
            lastUserActionTime: userContractResponse.lastUserActionTime.toString(),
            cakeAtLastUserAction: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userContractResponse.cakeAtLastUserAction.toString()).toJSON()
        };
    } catch (error) {
        return {
            isLoading: true,
            userShares: null,
            lastDepositedTime: null,
            lastUserActionTime: null,
            cakeAtLastUserAction: null
        };
    }
};


/***/ }),

/***/ 90438:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LJ": () => (/* binding */ transformVault),
/* harmony export */   "rU": () => (/* binding */ getTokenPricesFromFarm),
/* harmony export */   "xK": () => (/* binding */ transformPool)
/* harmony export */ });
/* unused harmony export transformUserData */
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var state_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93638);
/* harmony import */ var _pancakeswap_token_lists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3256);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85576);
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5305);
/* harmony import */ var views_Pools_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9681);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pancakeswap_token_lists__WEBPACK_IMPORTED_MODULE_2__]);
_pancakeswap_token_lists__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];






const transformUserData = (userData)=>{
    return {
        allowance: userData ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userData.allowance) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW,
        stakingTokenBalance: userData ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userData.stakingTokenBalance) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW,
        stakedBalance: userData ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userData.stakedBalance) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW,
        pendingReward: userData ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userData.pendingReward) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW
    };
};
const transformProfileRequirement = (profileRequirement)=>{
    return profileRequirement ? {
        required: profileRequirement.required,
        thresholdPoints: profileRequirement.thresholdPoints ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(profileRequirement.thresholdPoints) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW
    } : undefined;
};
const transformPool = (pool)=>{
    const { totalStaked , stakingLimit , numberBlocksForUserLimit , userData , stakingToken , earningToken , profileRequirement , startBlock , ...rest } = pool;
    return {
        ...rest,
        startBlock,
        profileRequirement: transformProfileRequirement(profileRequirement),
        stakingToken: (0,_pancakeswap_token_lists__WEBPACK_IMPORTED_MODULE_2__/* .deserializeToken */ .iG)(stakingToken),
        earningToken: (0,_pancakeswap_token_lists__WEBPACK_IMPORTED_MODULE_2__/* .deserializeToken */ .iG)(earningToken),
        userData: transformUserData(userData),
        totalStaked: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalStaked),
        stakingLimit: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(stakingLimit),
        stakingLimitEndBlock: numberBlocksForUserLimit + startBlock
    };
};
const transformVault = (vaultKey, vault)=>{
    const { totalShares: totalSharesAsString , pricePerFullShare: pricePerFullShareAsString , fees: { performanceFee , withdrawalFee , withdrawalFeePeriod  } , userData: { isLoading , userShares: userSharesAsString , cakeAtLastUserAction: cakeAtLastUserActionAsString , lastDepositedTime , lastUserActionTime ,  } ,  } = vault;
    const totalShares = totalSharesAsString ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalSharesAsString) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW;
    const pricePerFullShare = pricePerFullShareAsString ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(pricePerFullShareAsString) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW;
    const userShares = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userSharesAsString);
    const cakeAtLastUserAction = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(cakeAtLastUserActionAsString);
    let userDataExtra;
    let publicDataExtra;
    if (vaultKey === state_types__WEBPACK_IMPORTED_MODULE_1__/* .VaultKey.CakeVault */ .om.CakeVault) {
        const { totalCakeInVault: totalCakeInVaultAsString , totalLockedAmount: totalLockedAmountAsString , userData: { userBoostedShare: userBoostedShareAsString , lockEndTime , lockStartTime , locked , lockedAmount: lockedAmountAsString , currentOverdueFee: currentOverdueFeeAsString , currentPerformanceFee: currentPerformanceFeeAsString ,  } ,  } = vault;
        const totalCakeInVault = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalCakeInVaultAsString);
        const totalLockedAmount = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalLockedAmountAsString);
        const lockedAmount = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(lockedAmountAsString);
        const userBoostedShare = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(userBoostedShareAsString);
        const currentOverdueFee = currentOverdueFeeAsString ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(currentOverdueFeeAsString) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW;
        const currentPerformanceFee = currentPerformanceFeeAsString ? new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(currentPerformanceFeeAsString) : _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_3__/* .BIG_ZERO */ .HW;
        const balance = (0,views_Pools_helpers__WEBPACK_IMPORTED_MODULE_5__/* .convertSharesToCake */ .ur)(userShares, pricePerFullShare, undefined, undefined, currentOverdueFee.plus(currentPerformanceFee).plus(userBoostedShare));
        userDataExtra = {
            lockEndTime,
            lockStartTime,
            locked,
            lockedAmount,
            userBoostedShare,
            currentOverdueFee,
            currentPerformanceFee,
            balance
        };
        publicDataExtra = {
            totalLockedAmount,
            totalCakeInVault
        };
    } else {
        const balance1 = (0,views_Pools_helpers__WEBPACK_IMPORTED_MODULE_5__/* .convertSharesToCake */ .ur)(userShares, pricePerFullShare);
        const { cakeAsBigNumber  } = (0,views_Pools_helpers__WEBPACK_IMPORTED_MODULE_5__/* .convertSharesToCake */ .ur)(totalShares, pricePerFullShare);
        userDataExtra = {
            balance: balance1
        };
        publicDataExtra = {
            totalCakeInVault: cakeAsBigNumber
        };
    }
    const performanceFeeAsDecimal = performanceFee && performanceFee / 100;
    return {
        totalShares,
        pricePerFullShare,
        ...publicDataExtra,
        fees: {
            performanceFee,
            withdrawalFee,
            withdrawalFeePeriod,
            performanceFeeAsDecimal
        },
        userData: {
            isLoading,
            userShares,
            cakeAtLastUserAction,
            lastDepositedTime,
            lastUserActionTime,
            ...userDataExtra
        }
    };
};
const getTokenPricesFromFarm = (farms)=>{
    return farms.reduce((prices, farm)=>{
        const quoteTokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_4__/* .isAddress */ .UJ)(farm.quoteToken.address);
        const tokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_4__/* .isAddress */ .UJ)(farm.token.address);
        /* eslint-disable no-param-reassign */ if (quoteTokenAddress && !prices[quoteTokenAddress]) {
            prices[quoteTokenAddress] = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(farm.quoteTokenPriceBusd).toNumber();
        }
        if (tokenAddress && !prices[tokenAddress]) {
            prices[tokenAddress] = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(farm.tokenPriceBusd).toNumber();
        }
        /* eslint-enable no-param-reassign */ return prices;
    }, {});
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 34376:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ck": () => (/* binding */ fetchUserIfoCreditDataAsync),
/* harmony export */   "E$": () => (/* binding */ fetchPoolsStakingLimitsAsync),
/* harmony export */   "HX": () => (/* binding */ fetchCakeVaultFees),
/* harmony export */   "J4": () => (/* binding */ updateUserPendingReward),
/* harmony export */   "Oy": () => (/* binding */ updateUserAllowance),
/* harmony export */   "P4": () => (/* binding */ fetchCakeVaultPublicData),
/* harmony export */   "PE": () => (/* binding */ fetchCakePoolPublicDataAsync),
/* harmony export */   "XK": () => (/* binding */ fetchPoolsUserDataAsync),
/* harmony export */   "XW": () => (/* binding */ initialPoolVaultState),
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "aG": () => (/* binding */ fetchIfoPublicDataAsync),
/* harmony export */   "cR": () => (/* binding */ updateUserStakedBalance),
/* harmony export */   "dU": () => (/* binding */ fetchCakeFlexibleSideVaultUserData),
/* harmony export */   "ht": () => (/* binding */ fetchPoolsPublicDataAsync),
/* harmony export */   "i": () => (/* binding */ fetchCakeFlexibleSideVaultPublicData),
/* harmony export */   "qd": () => (/* binding */ fetchCakeFlexibleSideVaultFees),
/* harmony export */   "wI": () => (/* binding */ fetchCakePoolUserDataAsync),
/* harmony export */   "x$": () => (/* binding */ fetchCakeVaultUserData),
/* harmony export */   "yi": () => (/* binding */ updateUserBalance)
/* harmony export */ });
/* unused harmony exports initialIfoState, PoolsSlice, setPoolsPublicData, setPoolPublicData, setPoolUserData, setIfoUserCreditData */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57626);
/* harmony import */ var lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var config_constants_pools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73486);
/* harmony import */ var utils_apr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27544);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85576);
/* harmony import */ var config_abi_cake_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(93361);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(70627);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(25152);
/* harmony import */ var _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(72502);
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5305);
/* harmony import */ var _pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(24671);
/* harmony import */ var utils_providers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(11536);
/* harmony import */ var config_constants_priceHelperLps_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(81068);
/* harmony import */ var _farms_fetchFarms__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(98200);
/* harmony import */ var _farms_getFarmsPrices__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(76876);
/* harmony import */ var _fetchPools__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(45320);
/* harmony import */ var _fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(6172);
/* harmony import */ var _fetchVaultPublic__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(12257);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(90438);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(18770);
/* harmony import */ var _fetchUserIfo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(70994);
/* harmony import */ var _fetchVaultUser__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(11800);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_helpers__WEBPACK_IMPORTED_MODULE_19__]);
_helpers__WEBPACK_IMPORTED_MODULE_19__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];























const initialPoolVaultState = Object.freeze({
    totalShares: null,
    totalLockedAmount: null,
    pricePerFullShare: null,
    totalCakeInVault: null,
    fees: {
        performanceFee: null,
        withdrawalFee: null,
        withdrawalFeePeriod: null
    },
    userData: {
        isLoading: true,
        userShares: null,
        cakeAtLastUserAction: null,
        lastDepositedTime: null,
        lastUserActionTime: null,
        credit: null,
        locked: null,
        lockStartTime: null,
        lockEndTime: null,
        userBoostedShare: null,
        lockedAmount: null,
        currentOverdueFee: null,
        currentPerformanceFee: null
    },
    creditStartBlock: null
});
const initialIfoState = Object.freeze({
    credit: null,
    ceiling: null
});
const initialState = {
    data: [
        ...config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP
    ],
    userDataLoaded: false,
    cakeVault: initialPoolVaultState,
    ifo: initialIfoState,
    cakeFlexibleSideVault: initialPoolVaultState
};
const cakeVaultAddress = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getCakeVaultAddress */ .O9)();
const fetchCakePoolPublicDataAsync = ()=>async (dispatch, getState)=>{
        const farmsData = getState().farms.data;
        const prices = (0,_helpers__WEBPACK_IMPORTED_MODULE_19__/* .getTokenPricesFromFarm */ .rU)(farmsData);
        const cakePool = config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"].filter */ .ZP.filter((p)=>p.sousId === 0)[0];
        const stakingTokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_10__/* .isAddress */ .UJ)(cakePool.stakingToken.address);
        const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0;
        const earningTokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_10__/* .isAddress */ .UJ)(cakePool.earningToken.address);
        const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0;
        dispatch(setPoolPublicData({
            sousId: 0,
            data: {
                stakingTokenPrice,
                earningTokenPrice
            }
        }));
    };
const fetchCakePoolUserDataAsync = (account)=>async (dispatch)=>{
        const allowanceCall = {
            address: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_9__/* .bscTokens.cake.address */ .ds.cake.address,
            name: "allowance",
            params: [
                account,
                cakeVaultAddress
            ]
        };
        const balanceOfCall = {
            address: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_9__/* .bscTokens.cake.address */ .ds.cake.address,
            name: "balanceOf",
            params: [
                account
            ]
        };
        const cakeContractCalls = [
            allowanceCall,
            balanceOfCall
        ];
        const [[allowance], [stakingTokenBalance]] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_8__/* .multicallv2 */ .v)({
            abi: config_abi_cake_json__WEBPACK_IMPORTED_MODULE_6__,
            calls: cakeContractCalls
        });
        dispatch(setPoolUserData({
            sousId: 0,
            data: {
                allowance: new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(allowance.toString()).toJSON(),
                stakingTokenBalance: new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(stakingTokenBalance.toString()).toJSON()
            }
        }));
    };
const fetchPoolsPublicDataAsync = (currentBlockNumber, chainId)=>async (dispatch, getState)=>{
        try {
            const [blockLimits, totalStakings, profileRequirements, currentBlock] = await Promise.all([
                (0,_fetchPools__WEBPACK_IMPORTED_MODULE_16__/* .fetchPoolsBlockLimits */ .YV)(),
                (0,_fetchPools__WEBPACK_IMPORTED_MODULE_16__/* .fetchPoolsTotalStaking */ .oK)(),
                (0,_fetchPools__WEBPACK_IMPORTED_MODULE_16__/* .fetchPoolsProfileRequirement */ .ps)(),
                currentBlockNumber ? Promise.resolve(currentBlockNumber) : utils_providers__WEBPACK_IMPORTED_MODULE_12__/* .bscRpcProvider.getBlockNumber */ .v.getBlockNumber(), 
            ]);
            const blockLimitsSousIdMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default()(blockLimits.map((entry)=>[
                    entry.sousId,
                    entry
                ]));
            const totalStakingsSousIdMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default()(totalStakings.map((entry)=>[
                    entry.sousId,
                    entry
                ]));
            const priceHelperLpsConfig = (0,config_constants_priceHelperLps_index__WEBPACK_IMPORTED_MODULE_13__/* .getPoolsPriceHelperLpFiles */ .u)(chainId);
            const activePriceHelperLpsConfig = priceHelperLpsConfig.filter((priceHelperLpConfig)=>{
                return config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"].filter */ .ZP.filter((pool)=>pool.earningToken.address.toLowerCase() === priceHelperLpConfig.token.address.toLowerCase()).filter((pool)=>{
                    const poolBlockLimit = blockLimitsSousIdMap[pool.sousId];
                    if (poolBlockLimit) {
                        return poolBlockLimit.endBlock > currentBlock;
                    }
                    return false;
                }).length > 0;
            });
            const poolsWithDifferentFarmToken = activePriceHelperLpsConfig.length > 0 ? await (0,_farms_fetchFarms__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(priceHelperLpsConfig, chainId) : [];
            const farmsData = getState().farms.data;
            const bnbBusdFarm = activePriceHelperLpsConfig.length > 0 ? farmsData.find((farm)=>farm.token.symbol === "BUSD" && farm.quoteToken.symbol === "WBNB") : null;
            const farmsWithPricesOfDifferentTokenPools = bnbBusdFarm ? (0,_farms_getFarmsPrices__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)([
                bnbBusdFarm,
                ...poolsWithDifferentFarmToken
            ], chainId) : [];
            const prices = (0,_helpers__WEBPACK_IMPORTED_MODULE_19__/* .getTokenPricesFromFarm */ .rU)([
                ...farmsData,
                ...farmsWithPricesOfDifferentTokenPools
            ]);
            const liveData = config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"].map */ .ZP.map((pool)=>{
                const blockLimit = blockLimitsSousIdMap[pool.sousId];
                const totalStaking = totalStakingsSousIdMap[pool.sousId];
                const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false;
                const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded;
                const stakingTokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_10__/* .isAddress */ .UJ)(pool.stakingToken.address);
                const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0;
                const earningTokenAddress = (0,utils__WEBPACK_IMPORTED_MODULE_10__/* .isAddress */ .UJ)(pool.earningToken.address);
                const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0;
                const apr = !isPoolFinished ? (0,utils_apr__WEBPACK_IMPORTED_MODULE_4__/* .getPoolApr */ .E)(stakingTokenPrice, earningTokenPrice, (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_11__/* .getBalanceNumber */ .mW)(new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(totalStaking.totalStaked), pool.stakingToken.decimals), parseFloat(pool.tokenPerBlock)) : 0;
                const profileRequirement = profileRequirements[pool.sousId] ? profileRequirements[pool.sousId] : undefined;
                return {
                    ...blockLimit,
                    ...totalStaking,
                    profileRequirement,
                    stakingTokenPrice,
                    earningTokenPrice,
                    apr,
                    isFinished: isPoolFinished
                };
            });
            dispatch(setPoolsPublicData(liveData));
        } catch (error) {
            console.error("[Pools Action] error when getting public data", error);
        }
    };
const fetchPoolsStakingLimitsAsync = ()=>async (dispatch, getState)=>{
        const poolsWithStakingLimit = getState().pools.data.filter(({ stakingLimit  })=>stakingLimit !== null && stakingLimit !== undefined).map((pool)=>pool.sousId);
        try {
            const stakingLimits = await (0,_fetchPools__WEBPACK_IMPORTED_MODULE_16__/* .fetchPoolsStakingLimits */ .R0)(poolsWithStakingLimit);
            const stakingLimitData = config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"].map */ .ZP.map((pool)=>{
                if (poolsWithStakingLimit.includes(pool.sousId)) {
                    return {
                        sousId: pool.sousId
                    };
                }
                const { stakingLimit , numberBlocksForUserLimit  } = stakingLimits[pool.sousId] || {
                    stakingLimit: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_5__/* .BIG_ZERO */ .HW,
                    numberBlocksForUserLimit: 0
                };
                return {
                    sousId: pool.sousId,
                    stakingLimit: stakingLimit.toJSON(),
                    numberBlocksForUserLimit
                };
            });
            dispatch(setPoolsPublicData(stakingLimitData));
        } catch (error) {
            console.error("[Pools Action] error when getting staking limits", error);
        }
    };
const fetchPoolsUserDataAsync = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("pool/fetchPoolsUserData", async (account, { rejectWithValue  })=>{
    try {
        const [allowances, stakingTokenBalances, stakedBalances, pendingRewards] = await Promise.all([
            (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchPoolsAllowance */ .K_)(account),
            (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserBalances */ .h6)(account),
            (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserStakeBalances */ .gR)(account),
            (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserPendingRewards */ .xS)(account), 
        ]);
        const userData = config_constants_pools__WEBPACK_IMPORTED_MODULE_3__/* ["default"].map */ .ZP.map((pool)=>({
                sousId: pool.sousId,
                allowance: allowances[pool.sousId],
                stakingTokenBalance: stakingTokenBalances[pool.sousId],
                stakedBalance: stakedBalances[pool.sousId],
                pendingReward: pendingRewards[pool.sousId]
            }));
        return userData;
    } catch (e) {
        return rejectWithValue(e);
    }
});
const updateUserAllowance = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("pool/updateUserAllowance", async ({ sousId , account  })=>{
    const allowances = await (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchPoolsAllowance */ .K_)(account);
    return {
        sousId,
        field: "allowance",
        value: allowances[sousId]
    };
});
const updateUserBalance = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("pool/updateUserBalance", async ({ sousId , account  })=>{
    const tokenBalances = await (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserBalances */ .h6)(account);
    return {
        sousId,
        field: "stakingTokenBalance",
        value: tokenBalances[sousId]
    };
});
const updateUserStakedBalance = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("pool/updateUserStakedBalance", async ({ sousId , account  })=>{
    const stakedBalances = await (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserStakeBalances */ .gR)(account);
    return {
        sousId,
        field: "stakedBalance",
        value: stakedBalances[sousId]
    };
});
const updateUserPendingReward = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("pool/updateUserPendingReward", async ({ sousId , account  })=>{
    const pendingRewards = await (0,_fetchPoolsUser__WEBPACK_IMPORTED_MODULE_17__/* .fetchUserPendingRewards */ .xS)(account);
    return {
        sousId,
        field: "pendingReward",
        value: pendingRewards[sousId]
    };
});
const fetchCakeVaultPublicData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeVault/fetchPublicData", async ()=>{
    const publicVaultInfo = await (0,_fetchVaultPublic__WEBPACK_IMPORTED_MODULE_18__/* .fetchPublicVaultData */ .Io)();
    return publicVaultInfo;
});
const fetchCakeFlexibleSideVaultPublicData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeFlexibleSideVault/fetchPublicData", async ()=>{
    const publicVaultInfo = await (0,_fetchVaultPublic__WEBPACK_IMPORTED_MODULE_18__/* .fetchPublicFlexibleSideVaultData */ .TR)();
    return publicVaultInfo;
});
const fetchCakeVaultFees = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeVault/fetchFees", async ()=>{
    const vaultFees = await (0,_fetchVaultPublic__WEBPACK_IMPORTED_MODULE_18__/* .fetchVaultFees */ .Ct)((0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getCakeVaultAddress */ .O9)());
    return vaultFees;
});
const fetchCakeFlexibleSideVaultFees = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeFlexibleSideVault/fetchFees", async ()=>{
    const vaultFees = await (0,_fetchVaultPublic__WEBPACK_IMPORTED_MODULE_18__/* .fetchVaultFees */ .Ct)((0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getCakeFlexibleSideVaultAddress */ .pO)());
    return vaultFees;
});
const fetchCakeVaultUserData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeVault/fetchUser", async ({ account  })=>{
    const userData = await (0,_fetchVaultUser__WEBPACK_IMPORTED_MODULE_22__/* .fetchVaultUser */ .v)(account);
    return userData;
});
const fetchIfoPublicDataAsync = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("ifoVault/fetchIfoPublicDataAsync", async ()=>{
    const publicIfoData = await (0,_fetchUserIfo__WEBPACK_IMPORTED_MODULE_21__/* .fetchPublicIfoData */ .s)();
    return publicIfoData;
});
const fetchUserIfoCreditDataAsync = (account)=>async (dispatch)=>{
        try {
            const credit = await (0,_fetchUserIfo__WEBPACK_IMPORTED_MODULE_21__/* .fetchUserIfoCredit */ .o)(account);
            dispatch(setIfoUserCreditData(credit));
        } catch (error) {
            console.error("[Ifo Credit Action] Error fetching user Ifo credit data", error);
        }
    };
const fetchCakeFlexibleSideVaultUserData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)("cakeFlexibleSideVault/fetchUser", async ({ account  })=>{
    const userData = await (0,_fetchVaultUser__WEBPACK_IMPORTED_MODULE_22__/* .fetchFlexibleSideVaultUser */ .T)(account);
    return userData;
});
const PoolsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({
    name: "Pools",
    initialState,
    reducers: {
        setPoolPublicData: (state, action)=>{
            const { sousId  } = action.payload;
            const poolIndex = state.data.findIndex((pool)=>pool.sousId === sousId);
            state.data[poolIndex] = {
                ...state.data[poolIndex],
                ...action.payload.data
            };
        },
        setPoolUserData: (state, action)=>{
            const { sousId  } = action.payload;
            state.data = state.data.map((pool)=>{
                if (pool.sousId === sousId) {
                    return {
                        ...pool,
                        userDataLoaded: true,
                        userData: action.payload.data
                    };
                }
                return pool;
            });
        },
        setPoolsPublicData: (state, action)=>{
            const livePoolsData = action.payload;
            const livePoolsSousIdMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default()(livePoolsData.map((entry)=>[
                    entry.sousId,
                    entry
                ]));
            state.data = state.data.map((pool)=>{
                const livePoolData = livePoolsSousIdMap[pool.sousId];
                return {
                    ...pool,
                    ...livePoolData
                };
            });
        },
        // IFO
        setIfoUserCreditData: (state, action)=>{
            const credit = action.payload;
            state.ifo = {
                ...state.ifo,
                credit
            };
        }
    },
    extraReducers: (builder)=>{
        builder.addCase(_global_actions__WEBPACK_IMPORTED_MODULE_20__/* .resetUserState */ .tZ, (state)=>{
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            state.data = state.data.map(({ userData , ...pool })=>{
                return {
                    ...pool
                };
            });
            state.userDataLoaded = false;
            state.cakeVault = {
                ...state.cakeVault,
                userData: initialPoolVaultState.userData
            };
            state.cakeFlexibleSideVault = {
                ...state.cakeFlexibleSideVault,
                userData: initialPoolVaultState.userData
            };
        });
        builder.addCase(fetchPoolsUserDataAsync.fulfilled, (state, action)=>{
            const userData = action.payload;
            const userDataSousIdMap = lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default()(userData.map((entry)=>[
                    entry.sousId,
                    entry
                ]));
            state.data = state.data.map((pool)=>({
                    ...pool,
                    userDataLoaded: true,
                    userData: userDataSousIdMap[pool.sousId]
                }));
            state.userDataLoaded = true;
        });
        builder.addCase(fetchPoolsUserDataAsync.rejected, (state, action)=>{
            console.error("[Pools Action] Error fetching pool user data", action.payload);
        });
        // Vault public data that updates frequently
        builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action)=>{
            state.cakeVault = {
                ...state.cakeVault,
                ...action.payload
            };
        });
        builder.addCase(fetchCakeFlexibleSideVaultPublicData.fulfilled, (state, action)=>{
            state.cakeFlexibleSideVault = {
                ...state.cakeFlexibleSideVault,
                ...action.payload
            };
        });
        // Vault fees
        builder.addCase(fetchCakeVaultFees.fulfilled, (state, action)=>{
            const fees = action.payload;
            state.cakeVault = {
                ...state.cakeVault,
                fees
            };
        });
        builder.addCase(fetchCakeFlexibleSideVaultFees.fulfilled, (state, action)=>{
            const fees = action.payload;
            state.cakeFlexibleSideVault = {
                ...state.cakeFlexibleSideVault,
                fees
            };
        });
        // Vault user data
        builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action)=>{
            const userData = action.payload;
            state.cakeVault = {
                ...state.cakeVault,
                userData
            };
        });
        // IFO
        builder.addCase(fetchIfoPublicDataAsync.fulfilled, (state, action)=>{
            const { ceiling  } = action.payload;
            state.ifo = {
                ...state.ifo,
                ceiling
            };
        });
        builder.addCase(fetchCakeFlexibleSideVaultUserData.fulfilled, (state, action)=>{
            const userData = action.payload;
            state.cakeFlexibleSideVault = {
                ...state.cakeFlexibleSideVault,
                userData
            };
        });
        builder.addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAnyOf)(updateUserAllowance.fulfilled, updateUserBalance.fulfilled, updateUserStakedBalance.fulfilled, updateUserPendingReward.fulfilled), (state, action)=>{
            const { field , value , sousId  } = action.payload;
            const index = state.data.findIndex((p)=>p.sousId === sousId);
            if (index >= 0) {
                state.data[index] = {
                    ...state.data[index],
                    userData: {
                        ...state.data[index].userData,
                        [field]: value
                    }
                };
            }
        });
    }
});
// Actions
const { setPoolsPublicData , setPoolPublicData , setPoolUserData , setIfoUserCreditData  } = PoolsSlice.actions;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PoolsSlice.reducer);

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 27041:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bn": () => (/* binding */ fetchPublicPotteryValue),
/* harmony export */   "GJ": () => (/* binding */ fetchLatestRoundId),
/* harmony export */   "eC": () => (/* binding */ fetchTotalLockedValue),
/* harmony export */   "lS": () => (/* binding */ fetchLastVaultAddress)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_multicall__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(25152);
/* harmony import */ var config_abi_potteryVaultAbi_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98265);
/* harmony import */ var utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70627);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85576);
/* harmony import */ var state_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93638);
/* harmony import */ var _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(72502);
/* harmony import */ var utils_contractHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12895);
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5805);
/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10494);










const potteryDrawAddress = (0,utils_addressHelpers__WEBPACK_IMPORTED_MODULE_3__/* .getPotteryDrawAddress */ .Du)();
const potteryDrawContract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getPotteryDrawContract */ .ty)();
const fetchLastVaultAddress = async ()=>{
    try {
        const response = await (0,graphql_request__WEBPACK_IMPORTED_MODULE_8__.request)(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_9__/* .GRAPH_API_POTTERY */ .fK, graphql_request__WEBPACK_IMPORTED_MODULE_8__.gql`
        query getLastVaultAddress($contract: ID!) {
          pottery(id: $contract) {
            id
            lastVaultAddress
          }
        }
      `, {
            contract: potteryDrawAddress
        });
        const { lastVaultAddress  } = response.pottery;
        return lastVaultAddress;
    } catch (error) {
        console.error("Failed to fetch last vault address", error);
        return "";
    }
};
const fetchPublicPotteryValue = async (potteryVaultAddress)=>{
    try {
        const calls = [
            "getStatus",
            "totalLockCake",
            "totalSupply",
            "lockStartTime",
            "getLockTime",
            "getMaxTotalDeposit", 
        ].map((method)=>({
                address: potteryVaultAddress,
                name: method
            }));
        const [getStatus, [totalLockCake], [totalSupply], [lockStartTime], getLockTime, getMaxTotalDeposit] = await (0,utils_multicall__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(config_abi_potteryVaultAbi_json__WEBPACK_IMPORTED_MODULE_2__, calls);
        const [lastDrawId, totalPrize] = await potteryDrawContract.getPot(potteryVaultAddress);
        return {
            lastDrawId: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(lastDrawId.toString()).toJSON(),
            totalPrize: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalPrize.toString()).toJSON(),
            getStatus: getStatus[0],
            totalLockCake: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalLockCake.toString()).toJSON(),
            totalSupply: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalSupply.toString()).toJSON(),
            lockStartTime: lockStartTime.toString(),
            lockTime: Number(getLockTime),
            maxTotalDeposit: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(getMaxTotalDeposit.toString()).toJSON()
        };
    } catch (error) {
        console.error("Failed to fetch public pottery value data", error);
        return {
            lastDrawId: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON(),
            totalPrize: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON(),
            getStatus: state_types__WEBPACK_IMPORTED_MODULE_5__/* .PotteryDepositStatus.BEFORE_LOCK */ .lS.BEFORE_LOCK,
            totalLockCake: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON(),
            totalSupply: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON(),
            lockStartTime: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON(),
            lockTime: 0,
            maxTotalDeposit: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON()
        };
    }
};
const fetchTotalLockedValue = async (potteryVaultAddress)=>{
    try {
        const contract = (0,utils_contractHelpers__WEBPACK_IMPORTED_MODULE_7__/* .getBep20Contract */ .jS)(_pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_6__/* .bscTokens.cake.address */ .ds.cake.address);
        const totalLocked = await contract.balanceOf(potteryVaultAddress);
        return {
            totalLockedValue: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(totalLocked.toString()).toJSON()
        };
    } catch (error) {
        console.error("Failed to fetch total lock value", error);
        return {
            totalLockedValue: _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_4__/* .BIG_ZERO.toJSON */ .HW.toJSON()
        };
    }
};
const fetchLatestRoundId = async ()=>{
    try {
        const response = await (0,graphql_request__WEBPACK_IMPORTED_MODULE_8__.request)(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_9__/* .GRAPH_API_POTTERY */ .fK, graphql_request__WEBPACK_IMPORTED_MODULE_8__.gql`
        query getLatestRoundId {
          potteryVaultRounds(first: 1, orderDirection: desc, orderBy: roundId) {
            roundId
            winners
          }
        }
      `);
        const winners = response.potteryVaultRounds[0]?.winners;
        const latestRoundId = response.potteryVaultRounds[0]?.roundId;
        return {
            latestRoundId: winners?.length > 0 ? latestRoundId || "" : latestRoundId - 1
        };
    } catch (error) {
        console.error("Failed to fetch last roundId ", error);
        return {
            latestRoundId: ""
        };
    }
};


/***/ }),

/***/ 32169:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ZP": () => (/* binding */ pottery),
  "Yh": () => (/* binding */ fetchLastVaultAddressAsync),
  "yn": () => (/* binding */ fetchPotteryRoundData),
  "N5": () => (/* binding */ fetchPotteryUserDataAsync),
  "MM": () => (/* binding */ fetchPublicPotteryDataAsync),
  "sB": () => (/* binding */ setFinishedRoundInfoFetched)
});

// UNUSED EXPORTS: PotterySlice

// EXTERNAL MODULE: external "@reduxjs/toolkit"
var toolkit_ = __webpack_require__(75184);
// EXTERNAL MODULE: ./src/state/types.ts
var types = __webpack_require__(93638);
// EXTERNAL MODULE: ./src/state/global/actions.ts
var actions = __webpack_require__(18770);
// EXTERNAL MODULE: external "graphql-request"
var external_graphql_request_ = __webpack_require__(5805);
// EXTERNAL MODULE: ./src/config/constants/endpoints.ts
var endpoints = __webpack_require__(10494);
;// CONCATENATED MODULE: ./src/state/pottery/fetchPotteryRound.ts


const fetchPotteryFinishedRound = async (potteryRoundId)=>{
    try {
        const response = await (0,external_graphql_request_.request)(endpoints/* GRAPH_API_POTTERY */.fK, external_graphql_request_.gql`
        query getPotteryVaultRounds($roundId: Int!) {
          potteryVaultRounds(first: 1, where: { roundId: $roundId }) {
            id
            roundId
            drawDate
            prizePot
            txid
            winners
            vault {
              totalPlayers
              lockDate
            }
          }
        }
      `, {
            roundId: potteryRoundId
        });
        const { roundId , drawDate , prizePot , vault , txid , winners  } = response.potteryVaultRounds[0];
        return {
            isFetched: true,
            roundId,
            drawDate,
            prizePot,
            totalPlayers: vault.totalPlayers,
            txid,
            winners,
            lockDate: vault.lockDate
        };
    } catch (error) {
        console.error("Failed to fetch pottery finished round data", error);
        return {
            isFetched: false,
            roundId: null,
            drawDate: "",
            prizePot: "",
            totalPlayers: "",
            txid: "",
            winners: [],
            lockDate: ""
        };
    }
};

// EXTERNAL MODULE: ./src/state/pottery/fetchPottery.ts
var fetchPottery = __webpack_require__(27041);
// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(34215);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);
// EXTERNAL MODULE: ../../packages/tokens/src/index.ts + 6 modules
var src = __webpack_require__(72502);
// EXTERNAL MODULE: ../../packages/utils/bigNumber.ts
var bigNumber = __webpack_require__(85576);
// EXTERNAL MODULE: ./src/utils/contractHelpers.ts + 29 modules
var contractHelpers = __webpack_require__(12895);
// EXTERNAL MODULE: ./src/utils/multicall.ts
var multicall = __webpack_require__(25152);
// EXTERNAL MODULE: ./src/config/abi/potteryVaultAbi.json
var potteryVaultAbi = __webpack_require__(98265);
;// CONCATENATED MODULE: ./src/state/pottery/fetchUserPottery.ts









const potteryDrawContract = (0,contractHelpers/* getPotteryDrawContract */.ty)();
const fetchPotterysAllowance = async (account, potteryVaultAddress)=>{
    try {
        const contract = (0,contractHelpers/* getBep20Contract */.jS)(src/* bscTokens.cake.address */.ds.cake.address);
        const allowances = await contract.allowance(account, potteryVaultAddress);
        return new (external_bignumber_js_default())(allowances.toString()).toJSON();
    } catch (error) {
        console.error("Failed to fetch pottery user allowance", error);
        return bigNumber/* BIG_ZERO.toJSON */.HW.toJSON();
    }
};
const fetchVaultUserData = async (account, potteryVaultAddress)=>{
    try {
        const potteryVaultContract = (0,contractHelpers/* getPotteryVaultContract */.s4)(potteryVaultAddress);
        const balance = await potteryVaultContract.balanceOf(account);
        const previewDeposit = await potteryVaultContract.previewRedeem(balance);
        return {
            previewDepositBalance: new (external_bignumber_js_default())(previewDeposit.toString()).toJSON(),
            stakingTokenBalance: new (external_bignumber_js_default())(balance.toString()).toJSON()
        };
    } catch (error) {
        console.error("Failed to fetch pottery vault user data", error);
        return {
            previewDepositBalance: bigNumber/* BIG_ZERO.toJSON */.HW.toJSON(),
            stakingTokenBalance: bigNumber/* BIG_ZERO.toJSON */.HW.toJSON()
        };
    }
};
const fetchUserDrawData = async (account)=>{
    try {
        const [reward, winCount] = await potteryDrawContract.userInfos(account);
        return {
            rewards: new (external_bignumber_js_default())(reward.toString()).toJSON(),
            winCount: new (external_bignumber_js_default())(winCount.toString()).toJSON()
        };
    } catch (error) {
        console.error("Failed to fetch pottery user draw data", error);
        return {
            rewards: bigNumber/* BIG_ZERO.toJSON */.HW.toJSON(),
            winCount: bigNumber/* BIG_ZERO.toString */.HW.toString()
        };
    }
};
const fetchWithdrawAbleData = async (account)=>{
    try {
        const response = await (0,external_graphql_request_.request)(endpoints/* GRAPH_API_POTTERY */.fK, external_graphql_request_.gql`
        query getUserPotteryWithdrawAbleData($account: ID!) {
          withdrawals(first: 1000, where: { user: $account }) {
            id
            shares
            depositDate
            vault {
              id
              status
              lockDate
            }
          }
        }
      `, {
            account: account.toLowerCase()
        });
        const withdrawalsData = await Promise.all(response.withdrawals.map(async ({ id , shares , depositDate , vault  })=>{
            const calls = [
                {
                    address: vault.id,
                    name: "previewRedeem",
                    params: [
                        shares
                    ]
                },
                {
                    address: vault.id,
                    name: "totalSupply"
                },
                {
                    address: vault.id,
                    name: "totalLockCake"
                },
                {
                    address: vault.id,
                    name: "balanceOf",
                    params: [
                        account
                    ]
                }, 
            ];
            const [[previewRedeem], [totalSupply], [totalLockCake], [balanceOf]] = await (0,multicall/* multicallv2 */.v)({
                abi: potteryVaultAbi,
                calls
            });
            return {
                id,
                shares,
                depositDate,
                previewRedeem: new (external_bignumber_js_default())(previewRedeem.toString()).toJSON(),
                status: types/* PotteryDepositStatus */.lS[vault.status],
                potteryVaultAddress: vault.id,
                totalSupply: new (external_bignumber_js_default())(totalSupply.toString()).toJSON(),
                totalLockCake: new (external_bignumber_js_default())(totalLockCake.toString()).toJSON(),
                lockedDate: vault.lockDate,
                balanceOf: new (external_bignumber_js_default())(balanceOf.toString()).toJSON()
            };
        }));
        // eslint-disable-next-line array-callback-return, consistent-return
        const withdrawAbleData = withdrawalsData.filter((data)=>{
            if (data.status === types/* PotteryDepositStatus.UNLOCK */.lS.UNLOCK && data.balanceOf === "0") {
                return null;
            }
            return data;
        });
        return withdrawAbleData;
    } catch (error) {
        console.error("Failed to fetch withdrawable data", error);
        return [];
    }
};

;// CONCATENATED MODULE: ./src/state/pottery/index.ts






const initialState = Object.freeze({
    lastVaultAddress: "",
    publicData: {
        lastDrawId: "",
        totalPrize: null,
        getStatus: types/* PotteryDepositStatus.BEFORE_LOCK */.lS.BEFORE_LOCK,
        totalLockCake: null,
        totalSupply: null,
        lockStartTime: "",
        lockTime: 0,
        totalLockedValue: null,
        latestRoundId: "",
        maxTotalDeposit: null
    },
    userData: {
        isLoading: true,
        allowance: null,
        previewDepositBalance: null,
        stakingTokenBalance: null,
        rewards: null,
        winCount: null,
        withdrawAbleData: []
    },
    finishedRoundInfo: {
        isFetched: false,
        roundId: null,
        drawDate: "",
        prizePot: "",
        totalPlayers: "",
        txid: "",
        winners: [],
        lockDate: ""
    }
});
const fetchLastVaultAddressAsync = (0,toolkit_.createAsyncThunk)("pottery/fetchLastVaultAddress", async ()=>{
    const lastVaultAddress = await (0,fetchPottery/* fetchLastVaultAddress */.lS)();
    return lastVaultAddress;
});
const fetchPublicPotteryDataAsync = (0,toolkit_.createAsyncThunk)("pottery/fetchPublicPotteryData", async (arg, { getState  })=>{
    const state = getState();
    const potteryVaultAddress = state.pottery.lastVaultAddress;
    const [publicPotteryData, totalLockedValue, latestRoundId] = await Promise.all([
        (0,fetchPottery/* fetchPublicPotteryValue */.Bn)(potteryVaultAddress),
        (0,fetchPottery/* fetchTotalLockedValue */.eC)(potteryVaultAddress),
        (0,fetchPottery/* fetchLatestRoundId */.GJ)(), 
    ]);
    return {
        ...publicPotteryData,
        ...totalLockedValue,
        ...latestRoundId
    };
});
const fetchPotteryUserDataAsync = (0,toolkit_.createAsyncThunk)("pottery/fetchPotteryUserData", async (account, { rejectWithValue , getState  })=>{
    try {
        const state = getState();
        const potteryVaultAddress = state.pottery.lastVaultAddress;
        const [allowance, vaultUserData, drawData, withdrawAbleData] = await Promise.all([
            fetchPotterysAllowance(account, potteryVaultAddress),
            fetchVaultUserData(account, potteryVaultAddress),
            fetchUserDrawData(account),
            fetchWithdrawAbleData(account), 
        ]);
        const userData = {
            allowance,
            previewDepositBalance: vaultUserData.previewDepositBalance,
            stakingTokenBalance: vaultUserData.stakingTokenBalance,
            rewards: drawData.rewards,
            winCount: drawData.winCount,
            withdrawAbleData
        };
        return userData;
    } catch (e) {
        return rejectWithValue(e);
    }
});
const fetchPotteryRoundData = (0,toolkit_.createAsyncThunk)("pottery/fetchPotteryRound", async (roundId)=>{
    const response = await fetchPotteryFinishedRound(roundId);
    return response;
});
const PotterySlice = (0,toolkit_.createSlice)({
    name: "Pottery",
    initialState,
    reducers: {
        setFinishedRoundInfoFetched: (state, action)=>{
            const isFetched = action.payload;
            state.finishedRoundInfo = {
                ...state.finishedRoundInfo,
                isFetched
            };
        }
    },
    extraReducers: (builder)=>{
        builder.addCase(actions/* resetUserState */.tZ, (state)=>{
            state.userData = {
                ...initialState.userData
            };
        });
        builder.addCase(fetchLastVaultAddressAsync.fulfilled, (state, action)=>{
            state.lastVaultAddress = action.payload;
        });
        builder.addCase(fetchPublicPotteryDataAsync.fulfilled, (state, action)=>{
            state.publicData = {
                ...action.payload
            };
        });
        builder.addCase(fetchPotteryUserDataAsync.fulfilled, (state, action)=>{
            const userData = action.payload;
            state.userData = {
                ...userData,
                isLoading: false
            };
        });
        builder.addCase(fetchPotteryRoundData.fulfilled, (state, action)=>{
            state.finishedRoundInfo = {
                ...action.payload
            };
        });
    }
});
// Actions
const { setFinishedRoundInfoFetched  } = PotterySlice.actions;
/* harmony default export */ const pottery = (PotterySlice.reducer);


/***/ }),

/***/ 57246:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "He": () => (/* binding */ setRecipient),
/* harmony export */   "KS": () => (/* binding */ switchCurrencies),
/* harmony export */   "LC": () => (/* binding */ typeInput),
/* harmony export */   "Wk": () => (/* binding */ updatePairData),
/* harmony export */   "_U": () => (/* binding */ updateDerivedPairData),
/* harmony export */   "gN": () => (/* binding */ Field),
/* harmony export */   "j": () => (/* binding */ selectCurrency),
/* harmony export */   "mV": () => (/* binding */ replaceSwapState)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

var Field;
(function(Field) {
    Field["INPUT"] = "INPUT";
    Field["OUTPUT"] = "OUTPUT";
})(Field || (Field = {}));
const selectCurrency = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/selectCurrency");
const switchCurrencies = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/switchCurrencies");
const typeInput = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/typeInput");
const replaceSwapState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/replaceSwapState");
const setRecipient = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/setRecipient");
const updatePairData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/updatePairData");
const updateDerivedPairData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("swap/updateDerivedPairData");


/***/ }),

/***/ 13316:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57246);


const initialState = {
    independentField: _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT,
    typedValue: "",
    [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT]: {
        currencyId: ""
    },
    [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT]: {
        currencyId: ""
    },
    pairDataById: {},
    derivedPairDataById: {},
    recipient: null
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .replaceSwapState */ .mV, (state, { payload: { typedValue , recipient , field , inputCurrencyId , outputCurrencyId  }  })=>{
        return {
            [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT]: {
                currencyId: inputCurrencyId
            },
            [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT]: {
                currencyId: outputCurrencyId
            },
            independentField: field,
            typedValue,
            recipient,
            pairDataById: state.pairDataById,
            derivedPairDataById: state.derivedPairDataById
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .selectCurrency */ .j, (state, { payload: { currencyId , field  }  })=>{
        const otherField = field === _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT ? _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT : _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT;
        if (currencyId === state[otherField].currencyId) {
            // the case where we have to swap the order
            return {
                ...state,
                independentField: state.independentField === _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT ? _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT : _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT,
                [field]: {
                    currencyId
                },
                [otherField]: {
                    currencyId: state[field].currencyId
                }
            };
        }
        // the normal case
        return {
            ...state,
            [field]: {
                currencyId
            }
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .switchCurrencies */ .KS, (state)=>{
        return {
            ...state,
            independentField: state.independentField === _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT ? _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT : _actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT,
            [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT]: {
                currencyId: state[_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT].currencyId
            },
            [_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.OUTPUT */ .gN.OUTPUT]: {
                currencyId: state[_actions__WEBPACK_IMPORTED_MODULE_1__/* .Field.INPUT */ .gN.INPUT].currencyId
            }
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .typeInput */ .LC, (state, { payload: { field , typedValue  }  })=>{
        return {
            ...state,
            independentField: field,
            typedValue
        };
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .setRecipient */ .He, (state, { payload: { recipient  }  })=>{
        state.recipient = recipient;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .updatePairData */ .Wk, (state, { payload: { pairData , pairId , timeWindow  }  })=>{
        if (!state.pairDataById[pairId]) {
            state.pairDataById[pairId] = {};
        }
        state.pairDataById[pairId][timeWindow] = pairData;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_1__/* .updateDerivedPairData */ ._U, (state, { payload: { pairData , pairId , timeWindow  }  })=>{
        if (!state.derivedPairDataById[pairId]) {
            state.derivedPairDataById[pairId] = {};
        }
        state.derivedPairDataById[pairId][timeWindow] = pairData;
    })));


/***/ }),

/***/ 12238:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Aw": () => (/* binding */ finalizeTransaction),
/* harmony export */   "HG": () => (/* binding */ clearAllChainTransactions),
/* harmony export */   "LN": () => (/* binding */ checkedTransaction),
/* harmony export */   "Ly": () => (/* binding */ NonBscFarmStepType),
/* harmony export */   "dT": () => (/* binding */ addTransaction),
/* harmony export */   "fY": () => (/* binding */ clearAllTransactions),
/* harmony export */   "kh": () => (/* binding */ MsgStatus),
/* harmony export */   "np": () => (/* binding */ FarmTransactionStatus)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

var MsgStatus;
(function(MsgStatus) {
    MsgStatus[MsgStatus["MS_UNKNOWN"] = 0] = "MS_UNKNOWN";
    MsgStatus[MsgStatus["MS_WAITING_FOR_SGN_CONFIRMATIONS"] = 1] = "MS_WAITING_FOR_SGN_CONFIRMATIONS";
    MsgStatus[MsgStatus["MS_WAITING_FOR_DESTINATION_EXECUTION"] = 2] = "MS_WAITING_FOR_DESTINATION_EXECUTION";
    MsgStatus[MsgStatus["MS_COMPLETED"] = 3] = "MS_COMPLETED";
    MsgStatus[MsgStatus["MS_FAIL"] = 4] = "MS_FAIL";
    MsgStatus[MsgStatus["MS_FALLBACK"] = 5] = "MS_FALLBACK";
})(MsgStatus || (MsgStatus = {}));
var FarmTransactionStatus;
(function(FarmTransactionStatus) {
    FarmTransactionStatus[FarmTransactionStatus["PENDING"] = -1] = "PENDING";
    FarmTransactionStatus[FarmTransactionStatus["FAIL"] = 0] = "FAIL";
    FarmTransactionStatus[FarmTransactionStatus["SUCCESS"] = 1] = "SUCCESS";
})(FarmTransactionStatus || (FarmTransactionStatus = {}));
var NonBscFarmStepType;
(function(NonBscFarmStepType) {
    NonBscFarmStepType["STAKE"] = "STAKE";
    NonBscFarmStepType["UNSTAKE"] = "UNSTAKE";
})(NonBscFarmStepType || (NonBscFarmStepType = {}));
const addTransaction = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/addTransaction");
const clearAllTransactions = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/clearAllTransactions");
const clearAllChainTransactions = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/clearAllChainTransactions");
const finalizeTransaction = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/finalizeTransaction");
const checkedTransaction = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("transactions/checkedTransaction");


/***/ }),

/***/ 56611:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export initialState */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_localStorageOrders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4085);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12238);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18770);
/* eslint-disable no-param-reassign */ 



const now = ()=>new Date().getTime();
const initialState = {};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .addTransaction */ .dT, (transactions, { payload: { chainId , from , hash , approval , summary , translatableSummary , claim , type , order , nonBscFarm  }  })=>{
        if (transactions[chainId]?.[hash]) {
            throw Error("Attempted to add existing transaction.");
        }
        const txs = transactions[chainId] ?? {};
        txs[hash] = {
            hash,
            approval,
            summary,
            translatableSummary,
            claim,
            from,
            addedTime: now(),
            type,
            order,
            nonBscFarm
        };
        transactions[chainId] = txs;
        if (order) (0,utils_localStorageOrders__WEBPACK_IMPORTED_MODULE_1__/* .saveOrder */ .TR)(chainId, from, order, true);
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .clearAllTransactions */ .fY, ()=>{
        return {};
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .clearAllChainTransactions */ .HG, (transactions, { payload: { chainId  }  })=>{
        if (!transactions[chainId]) return;
        transactions[chainId] = {};
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .checkedTransaction */ .LN, (transactions, { payload: { chainId , hash , blockNumber  }  })=>{
        const tx = transactions[chainId]?.[hash];
        if (!tx) {
            return;
        }
        if (!tx.lastCheckedBlockNumber) {
            tx.lastCheckedBlockNumber = blockNumber;
        } else {
            tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .finalizeTransaction */ .Aw, (transactions, { payload: { hash , chainId , receipt , nonBscFarm  }  })=>{
        const tx = transactions[chainId]?.[hash];
        if (!tx) {
            return;
        }
        tx.receipt = receipt;
        tx.confirmedTime = now();
        if (tx.type === "limit-order-submission") {
            (0,utils_localStorageOrders__WEBPACK_IMPORTED_MODULE_1__/* .confirmOrderSubmission */ .On)(chainId, receipt.from, hash, receipt.status !== 0);
        } else if (tx.type === "limit-order-cancellation") {
            (0,utils_localStorageOrders__WEBPACK_IMPORTED_MODULE_1__/* .confirmOrderCancellation */ .Vx)(chainId, receipt.from, hash, receipt.status !== 0);
        } else if (tx.type === "non-bsc-farm") {
            if (tx.nonBscFarm.steps[0].status === _actions__WEBPACK_IMPORTED_MODULE_2__/* .FarmTransactionStatus.PENDING */ .np.PENDING) {
                if (receipt.status === _actions__WEBPACK_IMPORTED_MODULE_2__/* .FarmTransactionStatus.FAIL */ .np.FAIL) {
                    tx.nonBscFarm = {
                        ...tx.nonBscFarm,
                        status: receipt.status
                    };
                }
                tx.nonBscFarm.steps[0] = {
                    ...tx.nonBscFarm.steps[0],
                    status: receipt.status
                };
            } else {
                tx.nonBscFarm = nonBscFarm;
            }
        }
    }).addCase(_global_actions__WEBPACK_IMPORTED_MODULE_3__/* .resetUserState */ .tZ, (transactions, { payload: { chainId , newChainId  }  })=>{
        if (!newChainId && transactions[chainId]) {
            transactions[chainId] = {};
        }
    })));


/***/ }),

/***/ 93638:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gw": () => (/* binding */ PredictionStatus),
/* harmony export */   "RU": () => (/* binding */ PredictionsChartView),
/* harmony export */   "Tu": () => (/* binding */ BetPosition),
/* harmony export */   "dZ": () => (/* binding */ HistoryFilter),
/* harmony export */   "j4": () => (/* binding */ GAS_PRICE_GWEI),
/* harmony export */   "lS": () => (/* binding */ PotteryDepositStatus),
/* harmony export */   "nK": () => (/* binding */ ProposalType),
/* harmony export */   "om": () => (/* binding */ VaultKey),
/* harmony export */   "r7": () => (/* binding */ ProposalState),
/* harmony export */   "ru": () => (/* binding */ PredictionSupportedSymbol)
/* harmony export */ });
/* unused harmony exports GAS_PRICE, SnapshotCommand */
/* harmony import */ var _ethersproject_units__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93138);
/* harmony import */ var _ethersproject_units__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_units__WEBPACK_IMPORTED_MODULE_0__);

var GAS_PRICE;
(function(GAS_PRICE) {
    GAS_PRICE["default"] = "5";
    GAS_PRICE["fast"] = "6";
    GAS_PRICE["instant"] = "7";
    GAS_PRICE["testnet"] = "10";
})(GAS_PRICE || (GAS_PRICE = {}));
const GAS_PRICE_GWEI = {
    default: (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_0__.parseUnits)(GAS_PRICE.default, "gwei").toString(),
    fast: (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_0__.parseUnits)(GAS_PRICE.fast, "gwei").toString(),
    instant: (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_0__.parseUnits)(GAS_PRICE.instant, "gwei").toString(),
    testnet: (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_0__.parseUnits)(GAS_PRICE.testnet, "gwei").toString()
};
var VaultKey;
(function(VaultKey) {
    VaultKey["CakeVaultV1"] = "cakeVaultV1";
    VaultKey["CakeVault"] = "cakeVault";
    VaultKey["CakeFlexibleSideVault"] = "cakeFlexibleSideVault";
    VaultKey["IfoPool"] = "ifoPool";
})(VaultKey || (VaultKey = {}));
var BetPosition;
(function(BetPosition) {
    BetPosition["BULL"] = "Bull";
    BetPosition["BEAR"] = "Bear";
    BetPosition["HOUSE"] = "House";
})(BetPosition || (BetPosition = {}));
var PredictionStatus;
(function(PredictionStatus) {
    PredictionStatus["INITIAL"] = "initial";
    PredictionStatus["LIVE"] = "live";
    PredictionStatus["PAUSED"] = "paused";
    PredictionStatus["ERROR"] = "error";
})(PredictionStatus || (PredictionStatus = {}));
var PredictionSupportedSymbol;
(function(PredictionSupportedSymbol) {
    PredictionSupportedSymbol["BNB"] = "BNB";
    PredictionSupportedSymbol["CAKE"] = "CAKE";
})(PredictionSupportedSymbol || (PredictionSupportedSymbol = {}));
var PredictionsChartView;
(function(PredictionsChartView) {
    PredictionsChartView["TradingView"] = "TradingView";
    PredictionsChartView["Chainlink"] = "Chainlink Oracle";
})(PredictionsChartView || (PredictionsChartView = {}));
var HistoryFilter;
(function(HistoryFilter) {
    HistoryFilter["ALL"] = "all";
    HistoryFilter["COLLECTED"] = "collected";
    HistoryFilter["UNCOLLECTED"] = "uncollected";
})(HistoryFilter || (HistoryFilter = {}));
var SnapshotCommand;
(function(SnapshotCommand) {
    SnapshotCommand["PROPOSAL"] = "proposal";
    SnapshotCommand["VOTE"] = "vote";
})(SnapshotCommand || (SnapshotCommand = {}));
var ProposalType;
(function(ProposalType) {
    ProposalType["ALL"] = "all";
    ProposalType["CORE"] = "core";
    ProposalType["COMMUNITY"] = "community";
})(ProposalType || (ProposalType = {}));
var ProposalState;
(function(ProposalState) {
    ProposalState["ACTIVE"] = "active";
    ProposalState["PENDING"] = "pending";
    ProposalState["CLOSED"] = "closed";
})(ProposalState || (ProposalState = {}));
var PotteryDepositStatus;
(function(PotteryDepositStatus) {
    PotteryDepositStatus[PotteryDepositStatus["BEFORE_LOCK"] = 0] = "BEFORE_LOCK";
    PotteryDepositStatus[PotteryDepositStatus["LOCK"] = 1] = "LOCK";
    PotteryDepositStatus[PotteryDepositStatus["UNLOCK"] = 2] = "UNLOCK";
})(PotteryDepositStatus || (PotteryDepositStatus = {}));


/***/ }),

/***/ 15444:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B8": () => (/* binding */ muteAudio),
/* harmony export */   "Dn": () => (/* binding */ addWatchlistPool),
/* harmony export */   "G8": () => (/* binding */ setZapDisabled),
/* harmony export */   "GR": () => (/* binding */ FarmStakedOnly),
/* harmony export */   "Gs": () => (/* binding */ updateUserFarmStakedOnly),
/* harmony export */   "Hr": () => (/* binding */ setSubgraphHealthIndicatorDisplayed),
/* harmony export */   "RC": () => (/* binding */ updateUserPredictionAcceptedRisk),
/* harmony export */   "UU": () => (/* binding */ ChartViewMode),
/* harmony export */   "X": () => (/* binding */ updateUserLimitOrderAcceptedWarning),
/* harmony export */   "YA": () => (/* binding */ updateUserPredictionChainlinkChartDisclaimerShow),
/* harmony export */   "_C": () => (/* binding */ updateUserExpertModeAcknowledgementShow),
/* harmony export */   "c4": () => (/* binding */ updateUserPredictionChartDisclaimerShow),
/* harmony export */   "cd": () => (/* binding */ removeSerializedPair),
/* harmony export */   "d4": () => (/* binding */ updateUserPoolsViewMode),
/* harmony export */   "eg": () => (/* binding */ addSerializedToken),
/* harmony export */   "f9": () => (/* binding */ addSerializedPair),
/* harmony export */   "fO": () => (/* binding */ updateUserSingleHopOnly),
/* harmony export */   "gk": () => (/* binding */ updateUserFarmsViewMode),
/* harmony export */   "gw": () => (/* binding */ updateUserDeadline),
/* harmony export */   "hN": () => (/* binding */ setIsExchangeChartDisplayed),
/* harmony export */   "l5": () => (/* binding */ hidePhishingWarningBanner),
/* harmony export */   "mm": () => (/* binding */ updateUserPoolStakedOnly),
/* harmony export */   "p9": () => (/* binding */ setChartViewMode),
/* harmony export */   "rQ": () => (/* binding */ updateUserSlippageTolerance),
/* harmony export */   "u7": () => (/* binding */ unmuteAudio),
/* harmony export */   "wO": () => (/* binding */ ViewMode),
/* harmony export */   "zQ": () => (/* binding */ removeSerializedToken),
/* harmony export */   "zS": () => (/* binding */ addWatchlistToken),
/* harmony export */   "zk": () => (/* binding */ updateUserUsernameVisibility),
/* harmony export */   "zv": () => (/* binding */ updateUserExpertMode)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

var FarmStakedOnly;
(function(FarmStakedOnly) {
    FarmStakedOnly["ON_FINISHED"] = "onFinished";
    FarmStakedOnly["TRUE"] = "true";
    FarmStakedOnly["FALSE"] = "false";
})(FarmStakedOnly || (FarmStakedOnly = {}));
var ViewMode;
(function(ViewMode) {
    ViewMode["TABLE"] = "TABLE";
    ViewMode["CARD"] = "CARD";
})(ViewMode || (ViewMode = {}));
var ChartViewMode;
(function(ChartViewMode) {
    ChartViewMode["BASIC"] = "BASIC";
    ChartViewMode["TRADING_VIEW"] = "TRADING_VIEW";
})(ChartViewMode || (ChartViewMode = {}));
const updateUserExpertMode = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserExpertMode");
const updateUserSingleHopOnly = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserSingleHopOnly");
const updateUserSlippageTolerance = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserSlippageTolerance");
const updateUserDeadline = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserDeadline");
const addSerializedToken = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/addSerializedToken");
const removeSerializedToken = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/removeSerializedToken");
const addSerializedPair = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/addSerializedPair");
const removeSerializedPair = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/removeSerializedPair");
const muteAudio = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/muteAudio");
const unmuteAudio = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/unmuteAudio");
const updateUserFarmStakedOnly = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserFarmStakedOnly");
const updateUserPoolStakedOnly = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserPoolStakedOnly");
const updateUserPoolsViewMode = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserPoolsViewMode");
const updateUserFarmsViewMode = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserFarmsViewMode");
const updateUserPredictionAcceptedRisk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserPredictionAcceptedRisk");
const updateUserLimitOrderAcceptedWarning = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/userLimitOrderAcceptedWarning");
const updateUserPredictionChartDisclaimerShow = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserPredictionChartDisclaimerShow");
const updateUserPredictionChainlinkChartDisclaimerShow = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserPredictionChainlinkChartDisclaimerShow");
const updateUserExpertModeAcknowledgementShow = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserExpertModeAcknowledgementShow");
const updateUserUsernameVisibility = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/updateUserUsernameVisibility");
const addWatchlistToken = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/addWatchlistToken");
const addWatchlistPool = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/addWatchlistPool");
const hidePhishingWarningBanner = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/hidePhishingWarningBanner");
const setIsExchangeChartDisplayed = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/toggleIsExchangeChartDisplayed");
const setChartViewMode = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/setChartViewMode");
const setZapDisabled = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/setZapDisabled");
const setSubgraphHealthIndicatorDisplayed = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("user/setSubgraphHealthIndicatorDisplayed");


/***/ }),

/***/ 42862:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export initialState */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66011);
/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_omitBy__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17943);
/* harmony import */ var _global_actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18770);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15444);





const currentTimestamp = ()=>new Date().getTime();
function pairKey(token0Address, token1Address) {
    return `${token0Address};${token1Address}`;
}
const initialState = {
    userExpertMode: false,
    userSingleHopOnly: false,
    userSlippageTolerance: _config_constants__WEBPACK_IMPORTED_MODULE_2__/* .INITIAL_ALLOWED_SLIPPAGE */ .gv,
    userDeadline: _config_constants__WEBPACK_IMPORTED_MODULE_2__/* .DEFAULT_DEADLINE_FROM_NOW */ .PY,
    tokens: {},
    pairs: {},
    audioPlay: true,
    isExchangeChartDisplayed: true,
    isSubgraphHealthIndicatorDisplayed: false,
    userChartViewMode: _actions__WEBPACK_IMPORTED_MODULE_4__/* .ChartViewMode.BASIC */ .UU.BASIC,
    userFarmStakedOnly: _actions__WEBPACK_IMPORTED_MODULE_4__/* .FarmStakedOnly.ON_FINISHED */ .GR.ON_FINISHED,
    userPoolStakedOnly: false,
    userPoolsViewMode: _actions__WEBPACK_IMPORTED_MODULE_4__/* .ViewMode.TABLE */ .wO.TABLE,
    userFarmsViewMode: _actions__WEBPACK_IMPORTED_MODULE_4__/* .ViewMode.TABLE */ .wO.TABLE,
    userPredictionAcceptedRisk: false,
    userLimitOrderAcceptedWarning: false,
    userPredictionChartDisclaimerShow: true,
    userPredictionChainlinkChartDisclaimerShow: true,
    userExpertModeAcknowledgementShow: true,
    userUsernameVisibility: false,
    userZapDisabled: false,
    watchlistTokens: [],
    watchlistPools: [],
    hideTimestampPhishingWarningBanner: null
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_global_actions__WEBPACK_IMPORTED_MODULE_3__/* .updateVersion */ .SL, (state)=>{
        // slippage is'nt being tracked in local storage, reset to default
        // noinspection SuspiciousTypeOfGuard
        if (typeof state.userSlippageTolerance !== "number") {
            state.userSlippageTolerance = _config_constants__WEBPACK_IMPORTED_MODULE_2__/* .INITIAL_ALLOWED_SLIPPAGE */ .gv;
        }
        // deadline isnt being tracked in local storage, reset to default
        // noinspection SuspiciousTypeOfGuard
        if (typeof state.userDeadline !== "number") {
            state.userDeadline = _config_constants__WEBPACK_IMPORTED_MODULE_2__/* .DEFAULT_DEADLINE_FROM_NOW */ .PY;
        }
        state.lastUpdateVersionTimestamp = currentTimestamp();
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserExpertMode */ .zv, (state, action)=>{
        state.userExpertMode = action.payload.userExpertMode;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserSlippageTolerance */ .rQ, (state, action)=>{
        state.userSlippageTolerance = action.payload.userSlippageTolerance;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserDeadline */ .gw, (state, action)=>{
        state.userDeadline = action.payload.userDeadline;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserSingleHopOnly */ .fO, (state, action)=>{
        state.userSingleHopOnly = action.payload.userSingleHopOnly;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .addSerializedToken */ .eg, (state, { payload: { serializedToken  }  })=>{
        if (!state.tokens) {
            state.tokens = {};
        }
        state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};
        state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .removeSerializedToken */ .zQ, (state, { payload: { address , chainId  }  })=>{
        if (!state.tokens) {
            state.tokens = {};
        }
        if (state.tokens[chainId]) {
            state.tokens[chainId] = lodash_omitBy__WEBPACK_IMPORTED_MODULE_1___default()(state.tokens[chainId], (value, key)=>key === address);
        } else {
            state.tokens[chainId] = {};
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .addSerializedPair */ .f9, (state, { payload: { serializedPair  }  })=>{
        if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {
            const { chainId  } = serializedPair.token0;
            state.pairs[chainId] = state.pairs[chainId] || {};
            state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .removeSerializedPair */ .cd, (state, { payload: { chainId , tokenAAddress , tokenBAddress  }  })=>{
        if (state.pairs[chainId]) {
            const tokenAToB = pairKey(tokenAAddress, tokenBAddress);
            const tokenBToA = pairKey(tokenBAddress, tokenAAddress);
            // just delete both keys if either exists
            state.pairs[chainId] = lodash_omitBy__WEBPACK_IMPORTED_MODULE_1___default()(state.pairs[chainId], (value, key)=>key === tokenAToB || key === tokenBToA);
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .muteAudio */ .B8, (state)=>{
        state.audioPlay = false;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .unmuteAudio */ .u7, (state)=>{
        state.audioPlay = true;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserFarmStakedOnly */ .Gs, (state, { payload: { userFarmStakedOnly  }  })=>{
        state.userFarmStakedOnly = userFarmStakedOnly;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserPoolStakedOnly */ .mm, (state, { payload: { userPoolStakedOnly  }  })=>{
        state.userPoolStakedOnly = userPoolStakedOnly;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserPoolsViewMode */ .d4, (state, { payload: { userPoolsViewMode  }  })=>{
        state.userPoolsViewMode = userPoolsViewMode;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserFarmsViewMode */ .gk, (state, { payload: { userFarmsViewMode  }  })=>{
        state.userFarmsViewMode = userFarmsViewMode;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserPredictionAcceptedRisk */ .RC, (state, { payload: { userAcceptedRisk  }  })=>{
        state.userPredictionAcceptedRisk = userAcceptedRisk;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserLimitOrderAcceptedWarning */ .X, (state, { payload: { userAcceptedRisk  }  })=>{
        state.userLimitOrderAcceptedWarning = userAcceptedRisk;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserPredictionChartDisclaimerShow */ .c4, (state, { payload: { userShowDisclaimer  }  })=>{
        state.userPredictionChartDisclaimerShow = userShowDisclaimer;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserPredictionChainlinkChartDisclaimerShow */ .YA, (state, { payload: { userShowDisclaimer  }  })=>{
        state.userPredictionChainlinkChartDisclaimerShow = userShowDisclaimer;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserExpertModeAcknowledgementShow */ ._C, (state, { payload: { userExpertModeAcknowledgementShow  }  })=>{
        state.userExpertModeAcknowledgementShow = userExpertModeAcknowledgementShow;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .updateUserUsernameVisibility */ .zk, (state, { payload: { userUsernameVisibility  }  })=>{
        state.userUsernameVisibility = userUsernameVisibility;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .addWatchlistToken */ .zS, (state, { payload: { address  }  })=>{
        // state.watchlistTokens can be undefined for pre-loaded localstorage user state
        const tokenWatchlist = state.watchlistTokens ?? [];
        if (!tokenWatchlist.includes(address)) {
            state.watchlistTokens = [
                ...tokenWatchlist,
                address
            ];
        } else {
            // Remove token from watchlist
            const newTokens = state.watchlistTokens.filter((x)=>x !== address);
            state.watchlistTokens = newTokens;
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .addWatchlistPool */ .Dn, (state, { payload: { address  }  })=>{
        // state.watchlistPools can be undefined for pre-loaded localstorage user state
        const poolsWatchlist = state.watchlistPools ?? [];
        if (!poolsWatchlist.includes(address)) {
            state.watchlistPools = [
                ...poolsWatchlist,
                address
            ];
        } else {
            // Remove pool from watchlist
            const newPools = state.watchlistPools.filter((x)=>x !== address);
            state.watchlistPools = newPools;
        }
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .hidePhishingWarningBanner */ .l5, (state)=>{
        state.hideTimestampPhishingWarningBanner = currentTimestamp();
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .setIsExchangeChartDisplayed */ .hN, (state, { payload  })=>{
        state.isExchangeChartDisplayed = payload;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .setChartViewMode */ .p9, (state, { payload  })=>{
        state.userChartViewMode = payload;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .setZapDisabled */ .G8, (state, { payload  })=>{
        state.userZapDisabled = payload;
    }).addCase(_actions__WEBPACK_IMPORTED_MODULE_4__/* .setSubgraphHealthIndicatorDisplayed */ .Hr, (state, { payload  })=>{
        state.isSubgraphHealthIndicatorDisplayed = payload;
    })));


/***/ }),

/***/ 27544:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "yW": () => (/* binding */ getFarmApr),
  "E": () => (/* binding */ getPoolApr)
});

// UNUSED EXPORTS: default

// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(34215);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);
// EXTERNAL MODULE: ./src/config/index.ts
var config = __webpack_require__(7599);
;// CONCATENATED MODULE: ./src/config/constants/lpAprs/56.json
const _56_namespaceObject = JSON.parse('{"0x008604a38cd589680f7b8f085dc2d5b4f81151db":1.17,"0x009c58e79779982eb53a9941f9f4a2269d093566":4.06,"0x02d75d7beebf6d5228a3fa5f810cedf2bea5ab1e":19.57,"0x07c10ecfb0e1cf81e3e05ddb693cc114c8ebe498":2.78,"0x0d5b9a0f4315a4bce36d1ea7d6b6d3123167afaa":4.99,"0x0ed7e52944161450477ee417de9cd3a859b14fd0":0.76,"0x25bfd3162360bbd8ff97b86169288b311c2a68d7":15.6,"0x272c2cf847a49215a3a1d4bff8760e503a06f880":2.75,"0x58aed290f42963a502626774bd8fa03f33c9b71f":23.3,"0x58f876857a02d6762e0101bb5c46a8c1ed44dc16":3.39,"0x5ca96e8bde0bc587dac9e02422fd205b1102daa4":0.83,"0x70c26e9805ec5df3d4ab0b2a3df86bba2231b6c1":0.75,"0x72121d60b0e2f01c0fb7fe32ca24021b42165a40":1.9,"0x74fa517715c4ec65ef01d55ad5335f90dce7cc87":1.27,"0x800946d29e40199963100d67c9265b1725f80333":11.63,"0x804678fa97d91b974ec2af3c843270886528a9e6":3.39,"0x89c68051543fa135b31c2ce7bd8cdf392345ff01":0.92,"0xa39af17ce4a8eb807e076805da1e2b8ea7d0755b":2.97,"0xa63e32feefc6590bbf869070fd2e706eb7881bd2":3.47,"0xaa2527ff1893e0d40d4a454623d362b79e8bb7f1":0.43,"0xac747ad9d61884986ad7a4a6cc5de998ce21b253":8.01,"0xbcfd0d4a37feb4dceaaefa9da28cd833e5f04e9f":5.77,"0x007ec643c7cc33a70c083fc305c283dd009c8b94":4.5,"0x046a9b3a9b743340ee2bc4c6ddd35543e237c6c2":1.99,"0x1ccc3cc95c8148477afd18a552f03835be9d182a":0,"0x1ce76390dd210b9c9ae28373fdf79714206ecb73":2.39,"0x28bdb16b623176426305a70d8b475be73aca71f3":8.92,"0x2ae94a6c768d59f5ddc25bd7f12c7cbe1d51dc04":12.45,"0x2eebe0c34da9ba65521e98cbaa7d97496d05f489":1.33,"0x3d12e4381901a6b94438758b90881cb03f10b01e":6.86,"0x3d5a3e3824da092851026fcda3d8a0b7438c4573":0.16,"0x401abd5327542c25bad057614935bfd98186a8a1":1.98,"0x41140a1650372fb8cb2f71e335448ab8cfc1c4f3":8.91,"0x53a63ac301d6410915385294527f947aff616599":0.66,"0x55cdb14855220b239cf857a03849d96736b9103f":0.08,"0x58d4b61983ca0afe6e352e90719f403e24e016f4":5.14,"0x6045931e511ef7e53a4a817f971e0ca28c758809":2.12,"0x6483f166b9e4310a165a55fea04f867499aded06":4.06,"0x69afe59e88614501c3fdeb7480f12dba0a414032":3.37,"0x70531b39e2bb4d8da59e2ce41a98eba2990f8497":9.66,"0x7618fdab208ae23690dadd3aa4a42a442313d24e":0.55,"0x88c9bf5e334e2591c6a866d5e20683e31226be3d":9.63,"0x8ca3ff14a52b080c54a6d1a405eeca02959d39fe":11.85,"0x8e744ec2795c8b836689d1b4ebe1489204357dac":2.89,"0x92c3e2cdddb0ce886bca864151bd4d611a86e563":2.51,"0xa0ee789a8f581cb92dd9742ed0b5d54a0916976c":0.17,"0xb7e73daee6a6ca37a21f8e4bfba4da448dfe4d92":0.43,"0xbdf0aa1d1985caa357a6ac6661d838da8691c569":0,"0xbe6a4f74fddc88853612c50d7404e059b37692d8":2.06,"0xe9f369298565b60a0dc19a6fa93cee934fd1a58c":2.61,"0x06043b346450bbcfde066ebc39fdc264fdffed74":9.92,"0x062f88e2b4896e823ac78ac314468c29eec4186d":1.38,"0x0a292e96abb35297786a38fdd67dc4f82689e670":8.75,"0x0ecc84c9629317a494f12bc56aa2522475bf32e8":2.67,"0x11c0b2bb4fbb430825d07507a9e24e4c32f7704d":8.93,"0x141e9558f66cc21c93628400cca7d830c15c2c24":1.89,"0x1472976e0b97f5b2fc93f1fff14e2b5c4447b64f":5.9,"0x2bf2deb40639201c9a94c9e33b4852d9aea5fd2d":2.82,"0x2e28b9b74d6d99d4697e913b82b41ef1cac51c6c":0.39,"0x365c3f921b2915a480308d0b1c04aef7b99c2876":2.56,"0x486697ae24469cb1122f537924aa46e705b142aa":3.06,"0x59fac9e98479fc9979ae2a0c7422af50bcbb9b26":2.53,"0x6a445ceb72c8b1751755386c3990055ff92e14a0":1.38,"0x6db23b5360c9d2859fdcbf41c56494e7b8573649":5.39,"0x71e6de81381efe0aa98f56b3b43eb3727d640715":91.21,"0x88a02d94f437799f06f8c256ff07aa397e6d0016":3.04,"0x89ebf9cd99864f6e51bd7a578965922029cab977":0.65,"0x89ee0491ce55d2f7472a97602a95426216167189":3.71,"0x8fa59693458289914db0097f5f366d771b7a7c3f":0.74,"0x92247860a03f48d5c6425c7ca35cdcfcb1013aa1":1.8,"0x936928146a21afccd30dfa84824a780572b1630b":5.21,"0x9d2296e2fe3cdbf2eb3e3e2ca8811bafa42eedff":2.44,"0xb5d108578be3750209d1b3a8f45ffee8c5a75146":0.75,"0xba01662e978de7d67f8ffc937726215eb8995d17":2.74,"0xc2d00de94795e60fb76bc37d899170996cbda436":9.27,"0xd171b26e4484402de70e3ea256be5a2630d7e88d":0.39,"0xea26b78255df2bbc31c1ebf60010d78670185bd0":2.49,"0x014608e87af97a054c9a49f81e1473076d51d9a3":3.17,"0x03f18135c44c64ebfdcbad8297fe5bdafdbbdd86":3.27,"0x05faf555522fa3f93959f86b41a3808666093210":31.99,"0x133ee93fe93320e1182923e1a640912ede17c90c":0.13,"0x16afc4f2ad82986bbe2a4525601f8199ab9c832d":6.05,"0x16b9a82891338f9ba80e2d6970fdda79d1eb0dae":4.98,"0x1bdcebca3b93af70b58c41272aea2231754b23ca":4.95,"0x2354ef4df11afacb85a5c7f98b624072eccddbb1":0.55,"0x3dcb1787a95d2ea0eb7d00887704eebf0d79bb13":6.15,"0x3f1a9f3d9aad8bd339ed4853f345d2ef89fbfe0c":56.53,"0x61eb789d75a95caa3ff50ed7e47b96c132fec082":0.81,"0x66fdb2eccfb58cf098eaa419e5efde841368e489":0.64,"0x71b01ebddd797c8e9e0b003ea2f4fd207fbf46cc":1.42,"0x74e4716e431f45807dcf19f284c7aa99f18a4fbc":2.03,"0x7752e1fa9f3a2e860856458517008558deb989e3":2.86,"0x7eb5d86fd78f3852a3e0e064f2842d45a3db6ea2":3.88,"0x942b294e59a8c47a0f7f20df105b082710f7c305":2.49,"0xac109c8025f272414fd9e2faa805a583708a017f":3.81,"0xacf47cbeaab5c8a6ee99263cfe43995f89fb3206":2.09,"0xb2678c414ebc63c9cc6d1a0fc45f43e249b50fde":3.31,"0xc13aa76aac067c86ae38028019f414d731b3d86a":2.19,"0xc5768c5371568cf1114cddd52caed163a42626ed":5.97,"0xcad7019d6d84a3294b0494aef02e73bd0f2572eb":1.55,"0xd8e2f8b6db204c405543953ef6359912fe3a88d6":1.05,"0xdde420cbb3794ebd8ffc3ac69f9c78e5d1411870":1.61,"0x28415ff2c35b65b9e5c7de82126b4015ab9d031f":3.39,"0x7efaef62fddcca950418312c6c91aef321375a00":1.12,"0x824eb9fadfb377394430d2744fa7c42916de3ece":1.65,"0xdd5bad8f8b360d76d12fda230f8baf42fe0022cf":1.82,"0xB6040A9F294477dDAdf5543a24E5463B8F2423Ae":0}');
;// CONCATENATED MODULE: ./src/utils/apr.ts



const getLpApr = (chainId)=>{
    switch(chainId){
        case 56:
            return _56_namespaceObject;
        default:
            return {};
    }
};
/**
 * Get the APR value in %
 * @param stakingTokenPrice Token price in the same quote currency
 * @param rewardTokenPrice Token price in the same quote currency
 * @param totalStaked Total amount of stakingToken in the pool
 * @param tokenPerBlock Amount of new cake allocated to the pool for each new block
 * @returns Null if the APR is NaN or infinite.
 */ const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock)=>{
    const totalRewardPricePerYear = new (external_bignumber_js_default())(rewardTokenPrice).times(tokenPerBlock).times(config/* BLOCKS_PER_YEAR */.Bi);
    const totalStakingTokenInPool = new (external_bignumber_js_default())(stakingTokenPrice).times(totalStaked);
    const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);
    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber();
};
/**
 * Get farm APR value in %
 * @param poolWeight allocationPoint / totalAllocationPoint
 * @param cakePriceUsd Cake price in USD
 * @param poolLiquidityUsd Total pool liquidity in USD
 * @param farmAddress Farm Address
 * @returns Farm Apr
 */ const getFarmApr = (chainId, poolWeight, cakePriceUsd, poolLiquidityUsd, farmAddress, regularCakePerBlock)=>{
    const yearlyCakeRewardAllocation = poolWeight ? poolWeight.times(config/* BLOCKS_PER_YEAR */.Bi * regularCakePerBlock) : new (external_bignumber_js_default())(NaN);
    const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);
    let cakeRewardsAprAsNumber = null;
    if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {
        cakeRewardsAprAsNumber = cakeRewardsApr.toNumber();
    }
    const lpRewardsApr = getLpApr(chainId)[farmAddress?.toLowerCase()] ?? 0;
    return {
        cakeRewardsApr: cakeRewardsAprAsNumber,
        lpRewardsApr
    };
};
/* harmony default export */ const apr = (null);


/***/ }),

/***/ 12895:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "f$": () => (/* binding */ getAnniversaryAchievementContract),
  "Bj": () => (/* binding */ getBCakeFarmBoosterContract),
  "Ve": () => (/* binding */ getBCakeFarmBoosterProxyFactoryContract),
  "Ux": () => (/* binding */ getBCakeProxyContract),
  "jS": () => (/* binding */ getBep20Contract),
  "mU": () => (/* binding */ getBunnyFactoryContract),
  "XT": () => (/* binding */ getCakeContract),
  "J7": () => (/* binding */ getCakeFlexibleSideVaultV2Contract),
  "Gn": () => (/* binding */ getCakePredictionsContract),
  "OJ": () => (/* binding */ getCakeVaultV2Contract),
  "Qr": () => (/* binding */ getChainlinkOracleContract),
  "uN": () => (/* binding */ getContract),
  "vr": () => (/* binding */ getCrossFarmingProxyContract),
  "x7": () => (/* binding */ getCrossFarmingReceiverContract),
  "bd": () => (/* binding */ getCrossFarmingSenderContract),
  "pF": () => (/* binding */ getErc721CollectionContract),
  "vE": () => (/* binding */ getErc721Contract),
  "hb": () => (/* binding */ getFarmAuctionContract),
  "Gc": () => (/* binding */ getIfoCreditAddressContract),
  "rc": () => (/* binding */ getIfoV1Contract),
  "Ci": () => (/* binding */ getIfoV2Contract),
  "Bu": () => (/* binding */ getIfoV3Contract),
  "yd": () => (/* binding */ getLotteryV2Contract),
  "aE": () => (/* binding */ getMasterchefContract),
  "QH": () => (/* binding */ getMasterchefV1Contract),
  "X$": () => (/* binding */ getNftMarketContract),
  "vT": () => (/* binding */ getNftSaleContract),
  "aM": () => (/* binding */ getNonBscVaultContract),
  "DR": () => (/* binding */ getPancakeSquadContract),
  "RJ": () => (/* binding */ getPointCenterIfoContract),
  "ty": () => (/* binding */ getPotteryDrawContract),
  "s4": () => (/* binding */ getPotteryVaultContract),
  "qi": () => (/* binding */ getPredictionsContract),
  "xq": () => (/* binding */ getPredictionsV1Contract),
  "Y4": () => (/* binding */ getProfileContract),
  "KV": () => (/* binding */ getSouschefContract),
  "v7": () => (/* binding */ getTradingCompetitionContractEaster),
  "dY": () => (/* binding */ getTradingCompetitionContractFanToken),
  "gf": () => (/* binding */ getTradingCompetitionContractMoD),
  "n7": () => (/* binding */ getTradingCompetitionContractMobox)
});

// UNUSED EXPORTS: getBunnySpecialCakeVaultContract, getBunnySpecialContract, getBunnySpecialLotteryContract, getBunnySpecialPredictionContract, getBunnySpecialXmasContract, getClaimRefundContract, getEasterNftContract, getLpContract, getMulticallContract, getPancakeBunniesContract, getSouschefV2Contract, getZapContract

// EXTERNAL MODULE: ./src/utils/wagmi.ts + 1 modules
var wagmi = __webpack_require__(40495);
// EXTERNAL MODULE: external "@ethersproject/contracts"
var contracts_ = __webpack_require__(12792);
// EXTERNAL MODULE: ./src/config/constants/pools.tsx
var pools = __webpack_require__(73486);
// EXTERNAL MODULE: ./src/config/constants/types.ts
var types = __webpack_require__(6429);
// EXTERNAL MODULE: ../../packages/tokens/src/index.ts + 6 modules
var src = __webpack_require__(72502);
// EXTERNAL MODULE: ./src/utils/addressHelpers.ts
var addressHelpers = __webpack_require__(70627);
// EXTERNAL MODULE: ./src/config/abi/pancakeProfile.json
var pancakeProfile = __webpack_require__(92335);
// EXTERNAL MODULE: ./src/config/abi/pancakeBunnies.json
var pancakeBunnies = __webpack_require__(60664);
;// CONCATENATED MODULE: ./src/config/abi/bunnyFactory.json
const bunnyFactory_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract BunnyFactoryV2","name":"_bunnyFactoryV2","type":"address"},{"internalType":"contract BunnyMintingStation","name":"_bunnyMintingStation","type":"address"},{"internalType":"contract IBEP20","name":"_cakeToken","type":"address"},{"internalType":"uint256","name":"_tokenPrice","type":"uint256"},{"internalType":"string","name":"_ipfsHash","type":"string"},{"internalType":"uint256","name":"_startBlockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"bunnyId","type":"uint8"}],"name":"BunnyMint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"bunnyFactoryV2","outputs":[{"internalType":"contract BunnyFactoryV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyMintingStation","outputs":[{"internalType":"contract BunnyMintingStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"canMint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"mintNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_bunnyId5Json","type":"string"},{"internalType":"string","name":"_bunnyId6Json","type":"string"},{"internalType":"string","name":"_bunnyId7Json","type":"string"},{"internalType":"string","name":"_bunnyId8Json","type":"string"},{"internalType":"string","name":"_bunnyId9Json","type":"string"}],"name":"setBunnyJson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newStartBlockNumber","type":"uint256"}],"name":"setStartBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newTokenPrice","type":"uint256"}],"name":"updateTokenPrice","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/bunnySpecial.json
const bunnySpecial_namespaceObject = [];
// EXTERNAL MODULE: ./src/config/abi/erc20.json
var erc20 = __webpack_require__(93324);
// EXTERNAL MODULE: ./src/config/abi/erc721.json
var erc721 = __webpack_require__(53400);
;// CONCATENATED MODULE: ./src/config/abi/lpToken.json
const lpToken_namespaceObject = [];
// EXTERNAL MODULE: ./src/config/abi/cake.json
var cake = __webpack_require__(93361);
// EXTERNAL MODULE: ./src/config/abi/ifoV1.json
var ifoV1 = __webpack_require__(70950);
// EXTERNAL MODULE: ./src/config/abi/ifoV2.json
var ifoV2 = __webpack_require__(4554);
// EXTERNAL MODULE: ./src/config/abi/pointCenterIfo.json
var pointCenterIfo = __webpack_require__(58750);
// EXTERNAL MODULE: ./src/config/abi/lotteryV2.json
var lotteryV2 = __webpack_require__(48592);
// EXTERNAL MODULE: ./src/config/abi/masterchef.json
var masterchef = __webpack_require__(84951);
// EXTERNAL MODULE: ./src/config/abi/masterchefV1.json
var masterchefV1 = __webpack_require__(8028);
// EXTERNAL MODULE: ./src/config/abi/sousChef.json
var sousChef = __webpack_require__(86477);
// EXTERNAL MODULE: ./src/config/abi/sousChefV2.json
var abi_sousChefV2 = __webpack_require__(9022);
;// CONCATENATED MODULE: ./src/config/abi/sousChefBnb.json
const sousChefBnb_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_lp","type":"address"},{"internalType":"contract IBEP20","name":"_rewardToken","type":"address"},{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"},{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_wbnb","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"WBNB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bonusEndBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyRewardWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_from","type":"uint256"},{"internalType":"uint256","name":"_to","type":"uint256"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"limitAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"massUpdatePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"pendingReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"contract IBEP20","name":"lpToken","type":"address"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"accCakePerShare","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_blacklistAddress","type":"address"}],"name":"removeBlackList","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_blacklistAddress","type":"address"}],"name":"setBlackList","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setLimitAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAllocPoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"},{"internalType":"bool","name":"inBlackList","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]');
;// CONCATENATED MODULE: ./src/config/abi/claimRefund.json
const claimRefund_namespaceObject = [];
;// CONCATENATED MODULE: ./src/config/abi/tradingCompetitionEaster.json
const tradingCompetitionEaster_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"address","name":"_bunnyStationAddress","type":"address"},{"internalType":"address","name":"_cakeTokenAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum TradingCompV1.CompetitionStatus","name":"status","type":"uint8"}],"name":"NewCompetitionStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"}],"name":"TeamRewardsUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"}],"name":"UserRegister","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"rewardGroup","type":"uint256"}],"name":"UserUpdateMultiple","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"}],"name":"WinningTeam","type":"event"},{"inputs":[],"name":"bunnyId","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyMintingStation","outputs":[{"internalType":"contract BunnyMintingStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"claimInformation","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentStatus","outputs":[{"internalType":"enum TradingCompV1.CompetitionStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberTeams","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TradingCompV1.CompetitionStatus","name":"_status","type":"uint8"}],"name":"updateCompetitionStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256[5]","name":"_userCampaignIds","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_pointRewards","type":"uint256[5]"}],"name":"updateTeamRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_addressesToUpdate","type":"address[]"},{"internalType":"uint256","name":"_rewardGroup","type":"uint256"}],"name":"updateUserStatusMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_winningTeamId","type":"uint256"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"updateWinningTeamAndTokenURIAndBunnyId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userTradingStats","outputs":[{"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"internalType":"uint256","name":"teamId","type":"uint256"},{"internalType":"bool","name":"hasRegistered","type":"bool"},{"internalType":"bool","name":"hasClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"viewRewardTeams","outputs":[{"components":[{"internalType":"uint256[5]","name":"userCampaignId","type":"uint256[5]"},{"internalType":"uint256[5]","name":"cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"pointUsers","type":"uint256[5]"}],"internalType":"struct TradingCompV1.CompetitionRewards[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winningTeamId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/tradingCompetitionFanToken.json
const tradingCompetitionFanToken_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"address","name":"_bunnyStationAddress","type":"address"},{"internalType":"address","name":"_cakeTokenAddress","type":"address"},{"internalType":"address","name":"_lazioTokenAddress","type":"address"},{"internalType":"address","name":"_portoTokenAddress","type":"address"},{"internalType":"address","name":"_santosTokenAddress","type":"address"},{"internalType":"uint256","name":"_competitionId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum TradingCompV2.CompetitionStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"NewCompetitionStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"TeamRewardsUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserRegister","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserUpdateMultiple","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"WinningTeam","type":"event"},{"inputs":[],"name":"bunnyId","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyMintingStation","outputs":[{"internalType":"contract BunnyMintingStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimCakeRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"claimInformation","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimLazioRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimPortoRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimSantosRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"competitionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentStatus","outputs":[{"internalType":"enum TradingCompV2.CompetitionStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lazioToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberTeams","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"portoToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"santosToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TradingCompV2.CompetitionStatus","name":"_status","type":"uint8"}],"name":"updateCompetitionStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256[5]","name":"_userCampaignIds","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_lazioRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_portoRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_santosRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_pointRewards","type":"uint256[5]"}],"name":"updateTeamRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_addressesToUpdate","type":"address[]"},{"internalType":"uint256","name":"_rewardGroup","type":"uint256"}],"name":"updateUserStatusMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_winningTeamId","type":"uint256"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"updateWinningTeamAndTokenURIAndBunnyId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userTradingStats","outputs":[{"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"internalType":"uint256","name":"teamId","type":"uint256"},{"internalType":"bool","name":"hasRegistered","type":"bool"},{"internalType":"bool","name":"hasClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"viewRewardTeams","outputs":[{"components":[{"internalType":"uint256[5]","name":"userCampaignId","type":"uint256[5]"},{"internalType":"uint256[5]","name":"cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"lazioRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"portoRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"santosRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"pointUsers","type":"uint256[5]"}],"internalType":"struct TradingCompV2.CompetitionRewards[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winningTeamId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/tradingCompetitionMobox.json
const tradingCompetitionMobox_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"address","name":"_bunnyStationAddress","type":"address"},{"internalType":"address","name":"_cakeTokenAddress","type":"address"},{"internalType":"address","name":"_moboxTokenAddress","type":"address"},{"internalType":"address","name":"_moboxMisteryBoxTokenAddress","type":"address"},{"internalType":"uint256","name":"_competitionId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum TradingCompV3.CompetitionStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"NewCompetitionStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"TeamRewardsUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserRegister","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserUpdateMultiple","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"bool","name":"canClaimMysteryBox","type":"bool"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserUpdateMultipleMobox","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"WinningTeam","type":"event"},{"inputs":[],"name":"bunnyId","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyMintingStation","outputs":[{"internalType":"contract BunnyMintingStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimCakeRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"claimInformation","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"claimMoboxAvatarNFTRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimMoboxMysteryRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimMoboxRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"competitionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentStatus","outputs":[{"internalType":"enum TradingCompV3.CompetitionStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"moboxAvatarNFTCollection","outputs":[{"internalType":"contract IERC721Enumerable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"moboxMisteryBoxToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"moboxToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberTeams","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_moboxAvatarCollectionAddress","type":"address"}],"name":"setMoboxAvatarCollectionAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TradingCompV3.CompetitionStatus","name":"_status","type":"uint8"}],"name":"updateCompetitionStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256[5]","name":"_userCampaignIds","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_moboxRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_pointRewards","type":"uint256[5]"}],"name":"updateTeamRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_addressesToUpdate","type":"address[]"},{"internalType":"uint256","name":"_rewardGroup","type":"uint256"}],"name":"updateUserStatusMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_addressesToUpdate","type":"address[]"},{"internalType":"bool","name":"_canClaimMysteryBox","type":"bool"}],"name":"updateUserStatusMysteryBox","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_winningTeamId","type":"uint256"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"updateWinningTeamAndTokenURIAndBunnyId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userTradingStats","outputs":[{"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"internalType":"uint256","name":"teamId","type":"uint256"},{"internalType":"bool","name":"canClaimMysteryBox","type":"bool"},{"internalType":"bool","name":"hasRegistered","type":"bool"},{"internalType":"bool","name":"hasClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"viewRewardTeams","outputs":[{"components":[{"internalType":"uint256[5]","name":"userCampaignId","type":"uint256[5]"},{"internalType":"uint256[5]","name":"cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"moboxRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"pointUsers","type":"uint256[5]"}],"internalType":"struct TradingCompV3.CompetitionRewards[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winningTeamId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/tradingCompetitionMoD.json
var tradingCompetitionMoD = __webpack_require__(66314);
;// CONCATENATED MODULE: ./src/config/abi/easterNft.json
const easterNft_namespaceObject = [];
// EXTERNAL MODULE: ./src/config/abi/cakeVaultV2.json
var cakeVaultV2 = __webpack_require__(93293);
;// CONCATENATED MODULE: ./src/config/abi/cakeFlexibleSideVaultV2.json
const cakeFlexibleSideVaultV2_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"contract ICakePool","name":"_cakePool","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_treasury","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"ChargePerformanceFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ChargeWithdrawFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lastDepositedTime","type":"uint256"}],"name":"DepositCake","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"NewAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"performanceFee","type":"uint256"}],"name":"NewPerformanceFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasury","type":"address"}],"name":"NewTreasury","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawAmountBooster","type":"uint256"}],"name":"NewWithdrawAmountBooster","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawFee","type":"uint256"}],"name":"NewWithdrawFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawFeePeriod","type":"uint256"}],"name":"NewWithdrawFeePeriod","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"WithdrawShares","type":"event"},{"inputs":[],"name":"MAX_PERFORMANCE_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WITHDRAW_AMOUNT_BOOSTER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WITHDRAW_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WITHDRAW_FEE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DEPOSIT_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_WITHDRAW_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_WITHDRAW_AMOUNT_BOOSTER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"available","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakePool","outputs":[{"internalType":"contract ICakePool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getPricePerFullShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"inCaseTokensGetStuck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"performanceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_performanceFee","type":"uint256"}],"name":"setPerformanceFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_treasury","type":"address"}],"name":"setTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawAmountBooster","type":"uint256"}],"name":"setWithdrawAmountBooster","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawFee","type":"uint256"}],"name":"setWithdrawFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawFeePeriod","type":"uint256"}],"name":"setWithdrawFeePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staking","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"uint256","name":"lastDepositedTime","type":"uint256"},{"internalType":"uint256","name":"cakeAtLastUserAction","type":"uint256"},{"internalType":"uint256","name":"lastUserActionTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAmountBooster","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawFeePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/predictions.json
var predictions = __webpack_require__(45883);
;// CONCATENATED MODULE: ./src/config/abi/predictionsV1.json
const predictionsV1_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract AggregatorV3Interface","name":"_oracle","type":"address"},{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_operatorAddress","type":"address"},{"internalType":"uint256","name":"_intervalBlocks","type":"uint256"},{"internalType":"uint256","name":"_bufferBlocks","type":"uint256"},{"internalType":"uint256","name":"_minBetAmount","type":"uint256"},{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"currentEpoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBear","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"currentEpoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBull","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"currentEpoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ClaimTreasury","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"EndRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"LockRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"MinBetAmountUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryRate","type":"uint256"}],"name":"RatesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryAmount","type":"uint256"}],"name":"RewardsCalculated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"StartRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"TOTAL_RATE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"betBear","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"betBull","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"bufferBlocks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"claimable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executeRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisLockOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisLockRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisStartOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisStartRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"getUserRounds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"intervalBlocks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"ledger","outputs":[{"internalType":"enum BnbPricePrediction.Position","name":"position","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleLatestRoundId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleUpdateAllowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"refundable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rounds","outputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"startBlock","type":"uint256"},{"internalType":"uint256","name":"lockBlock","type":"uint256"},{"internalType":"uint256","name":"endBlock","type":"uint256"},{"internalType":"int256","name":"lockPrice","type":"int256"},{"internalType":"int256","name":"closePrice","type":"int256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"bullAmount","type":"uint256"},{"internalType":"uint256","name":"bearAmount","type":"uint256"},{"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"bool","name":"oracleCalled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bufferBlocks","type":"uint256"}],"name":"setBufferBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_intervalBlocks","type":"uint256"}],"name":"setIntervalBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minBetAmount","type":"uint256"}],"name":"setMinBetAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operatorAddress","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"setOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"}],"name":"setOracleUpdateAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardRate","type":"uint256"}],"name":"setRewardRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_treasuryRate","type":"uint256"}],"name":"setTreasuryRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userRounds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/chainlinkOracle.json
const chainlinkOracle_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"},{"internalType":"address","name":"_accessController","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int256","name":"current","type":"int256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedAt","type":"uint256"}],"name":"AnswerUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":true,"internalType":"address","name":"startedBy","type":"address"},{"indexed":false,"internalType":"uint256","name":"startedAt","type":"uint256"}],"name":"NewRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"accessController","outputs":[{"internalType":"contract AccessControllerInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"aggregator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"}],"name":"confirmAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"phaseAggregators","outputs":[{"internalType":"contract AggregatorV2V3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"phaseId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"}],"name":"proposeAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proposedAggregator","outputs":[{"internalType":"contract AggregatorV2V3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"proposedGetRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proposedLatestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_accessController","type":"address"}],"name":"setController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/Multicall.json
var Multicall = __webpack_require__(33373);
;// CONCATENATED MODULE: ./src/config/abi/bunnySpecialCakeVault.json
const bunnySpecialCakeVault_namespaceObject = [];
;// CONCATENATED MODULE: ./src/config/abi/bunnySpecialPrediction.json
const bunnySpecialPrediction_namespaceObject = [];
;// CONCATENATED MODULE: ./src/config/abi/bunnySpecialLottery.json
const bunnySpecialLottery_namespaceObject = [];
;// CONCATENATED MODULE: ./src/config/abi/bunnySpecialXmas.json
const bunnySpecialXmas_namespaceObject = [];
;// CONCATENATED MODULE: ./src/config/abi/farmAuction.json
const farmAuction_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_cakeToken","type":"address"},{"internalType":"address","name":"_operatorAddress","type":"address"},{"internalType":"uint256","name":"_maxAuctionLength","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"auctionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AuctionBid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"auctionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isAdmin","type":"bool"}],"name":"AuctionClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"auctionId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"participationLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberParticipants","type":"uint256"}],"name":"AuctionClose","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"auctionId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"initialBidAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"leaderboard","type":"uint256"}],"name":"AuctionStart","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxAuctionLength","type":"uint256"}],"name":"NewMaxAuctionLength","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"NewOperatorAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"WhitelistAdd","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"WhitelistRemove","type":"event"},{"inputs":[{"internalType":"address[]","name":"_bidders","type":"address[]"}],"name":"addWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"auctionBids","outputs":[{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"bool","name":"hasClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"auctions","outputs":[{"internalType":"enum FarmAuction.Status","name":"status","type":"uint8"},{"internalType":"uint256","name":"startBlock","type":"uint256"},{"internalType":"uint256","name":"endBlock","type":"uint256"},{"internalType":"uint256","name":"initialBidAmount","type":"uint256"},{"internalType":"uint256","name":"leaderboard","type":"uint256"},{"internalType":"uint256","name":"leaderboardThreshold","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"bid","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_auctionId","type":"uint256"}],"name":"claimAuction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_auctionId","type":"uint256"},{"internalType":"address[]","name":"_bidders","type":"address[]"}],"name":"claimAuctionLeaderboard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"auctionId","type":"uint256"},{"internalType":"address","name":"bidder","type":"address"}],"name":"claimable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bidLimit","type":"uint256"}],"name":"closeAuction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentAuctionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxAuctionLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_bidders","type":"address[]"}],"name":"removeWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxAuctionLength","type":"uint256"}],"name":"setMaxAuctionLength","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operatorAddress","type":"address"}],"name":"setOperatorAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"},{"internalType":"uint256","name":"_initialBidAmount","type":"uint256"},{"internalType":"uint256","name":"_leaderboard","type":"uint256"}],"name":"startAuction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalCollected","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewAuctions","outputs":[{"components":[{"internalType":"enum FarmAuction.Status","name":"status","type":"uint8"},{"internalType":"uint256","name":"startBlock","type":"uint256"},{"internalType":"uint256","name":"endBlock","type":"uint256"},{"internalType":"uint256","name":"initialBidAmount","type":"uint256"},{"internalType":"uint256","name":"leaderboard","type":"uint256"},{"internalType":"uint256","name":"leaderboardThreshold","type":"uint256"}],"internalType":"struct FarmAuction.Auction[]","name":"","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"bidder","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewBidderAuctions","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bool[]","name":"","type":"bool[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewBidders","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"auctionId","type":"uint256"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewBidsPerAuction","outputs":[{"components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"hasClaimed","type":"bool"}],"internalType":"struct FarmAuction.Bid[]","name":"","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"bidder","type":"address"}],"name":"whitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/anniversaryAchievement.json
const anniversaryAchievement_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfile","type":"address"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_thresholdPoints","type":"uint256"},{"internalType":"uint256","name":"_campaignId","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"NewCampaignId","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"endBlock","type":"uint256"}],"name":"NewEndBlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"thresholdPoints","type":"uint256"}],"name":"NewNumberPointsAndThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"campaignId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"canClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_campaignId","type":"uint256"}],"name":"changeCampaignId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_endBlock","type":"uint256"}],"name":"changeEndBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_thresholdPoints","type":"uint256"}],"name":"changeNumberPointsAndThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimAnniversaryPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"endBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract PancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"thresholdPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/nftMarket.json
var nftMarket = __webpack_require__(60290);
// EXTERNAL MODULE: ./src/config/abi/nftSale.json
var nftSale = __webpack_require__(3085);
;// CONCATENATED MODULE: ./src/config/abi/pancakeSquad.json
const pancakeSquad_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint256","name":"_maxSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[],"name":"Lock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"NonFungibleTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLocked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"recoverNonFungibleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"tokensOfOwnerBySize","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/erc721collection.json
const erc721collection_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint256","name":"_maxSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[],"name":"Lock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"NonFungibleTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLocked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"recoverNonFungibleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"tokensOfOwnerBySize","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/potteryVaultAbi.json
var potteryVaultAbi = __webpack_require__(98265);
;// CONCATENATED MODULE: ./src/config/abi/potteryDrawAbi.json
const potteryDrawAbi_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract IERC20","name":"_cake","type":"address"},{"internalType":"contract ICakePool","name":"_cakePool","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"vault","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalPrize","type":"uint256"},{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"CancelPottery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prize","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"winCount","type":"uint256"}],"name":"ClaimReward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"drawId","type":"uint256"},{"indexed":true,"internalType":"address","name":"vault","type":"address"},{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"address[]","name":"winners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"CloseDraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"vault","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalPrize","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lockTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"drawTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxTotalDeposit","type":"uint256"},{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"CreatePottery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"Init","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"vault","type":"address"},{"indexed":false,"internalType":"uint256","name":"actualPrize","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"redeemPrize","type":"uint256"}],"name":"RedeemPrize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"uint16","name":"fee","type":"uint16"}],"name":"SetClaimFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"address","name":"keeper","type":"address"}],"name":"SetKeeper","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"address","name":"treasury","type":"address"}],"name":"SetTreasury","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"address","name":"vaultFactory","type":"address"}],"name":"SetVaultFactory","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"drawId","type":"uint256"},{"indexed":true,"internalType":"address","name":"vault","type":"address"},{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalPrize","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"StartDraw","type":"event"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"cancelPottery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_drawId","type":"uint256"}],"name":"closeDraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"forceRequestDraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_totalPrize","type":"uint256"},{"internalType":"uint256","name":"_lockTime","type":"uint256"},{"internalType":"uint256","name":"_drawTime","type":"uint256"},{"internalType":"uint256","name":"_maxTotalDeposit","type":"uint256"}],"name":"generatePottery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_drawId","type":"uint256"}],"name":"getDraw","outputs":[{"components":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"contract IPancakeSwapPotteryVault","name":"vault","type":"address"},{"internalType":"uint256","name":"startDrawTime","type":"uint256"},{"internalType":"uint256","name":"closeDrawTime","type":"uint256"},{"internalType":"address[]","name":"winners","type":"address[]"},{"internalType":"uint256","name":"prize","type":"uint256"}],"internalType":"struct Pottery.Draw","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumOfDraw","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumOfWinner","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"getPot","outputs":[{"components":[{"internalType":"uint256","name":"numOfDraw","type":"uint256"},{"internalType":"uint256","name":"totalPrize","type":"uint256"},{"internalType":"uint256","name":"drawTime","type":"uint256"},{"internalType":"uint256","name":"lastDrawId","type":"uint256"},{"internalType":"bool","name":"startDraw","type":"bool"}],"internalType":"struct Pottery.Pot","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPotteryPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTreasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_drawId","type":"uint256"}],"name":"getWinners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_rng","type":"address"},{"internalType":"address","name":"_vaultFactory","type":"address"},{"internalType":"address","name":"_keeper","type":"address"},{"internalType":"address","name":"_treasury","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redeemPrizeByRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_drawId","type":"uint256"}],"name":"rngFulfillRandomWords","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_fee","type":"uint16"}],"name":"setClaimFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_keeper","type":"address"}],"name":"setKeeper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_treasury","type":"address"}],"name":"setTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_factory","type":"address"}],"name":"setVaultFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"startDraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"timeToDraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfos","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"winCount","type":"uint256"}],"stateMutability":"view","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/zap.json
var zap = __webpack_require__(5534);
;// CONCATENATED MODULE: ./src/config/abi/iCake.json
const iCake_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract ICaKePool","name":"_cakePool","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"uint256","name":"_ceiling","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newCeiling","type":"uint256"}],"name":"UpdateCeiling","type":"event"},{"inputs":[],"name":"MIN_CEILING_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakePool","outputs":[{"internalType":"contract ICaKePool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ceiling","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getUserCredit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newCeiling","type":"uint256"}],"name":"updateCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/ifoV3.json
var ifoV3 = __webpack_require__(49795);
;// CONCATENATED MODULE: ./src/config/abi/cakePredictions.json
const cakePredictions_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_oracleAddress","type":"address"},{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_operatorAddress","type":"address"},{"internalType":"uint256","name":"_intervalSeconds","type":"uint256"},{"internalType":"uint256","name":"_bufferSeconds","type":"uint256"},{"internalType":"uint256","name":"_minBetAmount","type":"uint256"},{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"},{"internalType":"uint256","name":"_treasuryFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBear","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBull","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"EndRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"LockRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"NewAdminAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bufferSeconds","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"intervalSeconds","type":"uint256"}],"name":"NewBufferAndIntervalSeconds","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"NewKeeperAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"NewMinBetAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"NewOperatorAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oracle","type":"address"}],"name":"NewOracle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oracleUpdateAllowance","type":"uint256"}],"name":"NewOracleUpdateAllowance","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryFee","type":"uint256"}],"name":"NewTreasuryFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryAmount","type":"uint256"}],"name":"RewardsCalculated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"StartRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TreasuryClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"MAX_TREASURY_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"betBear","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"betBull","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bufferSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"epochs","type":"uint256[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"claimable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executeRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisLockOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisLockRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisStartOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisStartRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"getUserRounds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"components":[{"internalType":"enum PancakePredictionV3.Position","name":"position","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"internalType":"struct PancakePredictionV3.BetInfo[]","name":"","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserRoundsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"intervalSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"keeperAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"ledger","outputs":[{"internalType":"enum PancakePredictionV3.Position","name":"position","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"contract AggregatorV3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleLatestRoundId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleUpdateAllowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"refundable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rounds","outputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"lockTimestamp","type":"uint256"},{"internalType":"uint256","name":"closeTimestamp","type":"uint256"},{"internalType":"int256","name":"lockPrice","type":"int256"},{"internalType":"int256","name":"closePrice","type":"int256"},{"internalType":"uint256","name":"lockOracleId","type":"uint256"},{"internalType":"uint256","name":"closeOracleId","type":"uint256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"bullAmount","type":"uint256"},{"internalType":"uint256","name":"bearAmount","type":"uint256"},{"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"bool","name":"oracleCalled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bufferSeconds","type":"uint256"},{"internalType":"uint256","name":"_intervalSeconds","type":"uint256"}],"name":"setBufferAndIntervalSeconds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_keeperAddress","type":"address"}],"name":"setKeeper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minBetAmount","type":"uint256"}],"name":"setMinBetAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operatorAddress","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"setOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"}],"name":"setOracleUpdateAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_treasuryFee","type":"uint256"}],"name":"setTreasuryFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userRounds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/bCakeFarmBooster.json
const bCakeFarmBooster_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_cake","type":"address"},{"internalType":"address","name":"_cakePool","type":"address"},{"internalType":"address","name":"_v2","type":"address"},{"internalType":"uint256","name":"_max","type":"uint256"},{"internalType":"uint256","name":"_cA","type":"uint256"},{"internalType":"uint256","name":"_cB","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"address","name":"proxy","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"ActiveFarmPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"address","name":"proxy","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"DeactiveFarmPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"address","name":"proxy","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"Refresh","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"factory","type":"address"}],"name":"UpdateBoostFactory","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"UpdateBoostFarms","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"address","name":"proxy","type":"address"}],"name":"UpdateBoostProxy","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldCA","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newCA","type":"uint256"}],"name":"UpdateCA","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldCB","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newCB","type":"uint256"}],"name":"UpdateCB","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"lockedAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lockedDuration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalLockedAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxLockDuration","type":"uint256"}],"name":"UpdateCakePool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"factory","type":"uint256"}],"name":"UpdateMaxBoostPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMultiplier","type":"uint256"}],"name":"UpdatePoolBoostMultiplier","type":"event"},{"inputs":[],"name":"BOOSTER_FACTORY","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOST_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOST_RATIO_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOST_WEIGHT_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CAKE","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CAKE_POOL","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CA_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTER_CHEF","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_BOOST_POOL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_BOOST_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"activate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"activedPools","outputs":[{"internalType":"uint256[]","name":"pools","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"avgLockDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"deactive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"getUserMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"isBoostedPool","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_lockedAmount","type":"uint256"},{"internalType":"uint256","name":"_lockedDuration","type":"uint256"},{"internalType":"uint256","name":"_totalLockedAmount","type":"uint256"},{"internalType":"uint256","name":"_maxLockDuration","type":"uint256"}],"name":"onCakePoolUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"proxyContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"refresh","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_factory","type":"address"}],"name":"setBoostFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"bool","name":"_status","type":"bool"}],"name":"setBoosterFarms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_cA","type":"uint256"}],"name":"setCA","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_cB","type":"uint256"}],"name":"setCB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_max","type":"uint256"}],"name":"setMaxBoostPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_proxy","type":"address"}],"name":"setProxy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePoolBoostMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"whiteList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/bCakeFarmBoosterProxyFactory.json
const bCakeFarmBoosterProxyFactory_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_farmBooster","type":"address"},{"internalType":"address","name":"_masterchefV2","type":"address"},{"internalType":"address","name":"_cakeToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"farmBoosterProxyAddress","type":"address"}],"name":"NewFarmBoosterProxyContract","type":"event"},{"inputs":[],"name":"Farm_Booster","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createFarmBoosterProxy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"masterchefV2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"proxyContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"proxyUser","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/bCakeProxy.json
const bCakeProxy_namespaceObject = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"proxy","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DepositByProxy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"proxy","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"EmergencyWithdrawByProxy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"proxy","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawByProxy","type":"event"},{"inputs":[],"name":"FARM_BOOSTER_PROXY_FACTORY","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"farmBooster","outputs":[{"internalType":"contract IFarmBooster","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_farmBooster","type":"address"},{"internalType":"address","name":"_masterchefV2","type":"address"},{"internalType":"address","name":"_cakeToken","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lpApproved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"masterchefV2","outputs":[{"internalType":"contract IMasterChefV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
// EXTERNAL MODULE: ./src/config/abi/nonBscVault.json
var nonBscVault = __webpack_require__(31534);
;// CONCATENATED MODULE: ./src/config/abi/crossFarmingSender.json
const crossFarmingSender_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"},{"internalType":"address","name":"_oracle_bnb","type":"address"},{"internalType":"address","name":"_oracle_eth","type":"address"},{"internalType":"uint256","name":"_oracle_bnb_update_buffer","type":"uint256"},{"internalType":"uint256","name":"_oracle_eth_update_buffer","type":"uint256"},{"internalType":"uint64","name":"_chainId","type":"uint64"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BnbChangeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"}],"name":"CompensationRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gaslimit","type":"uint256"}],"name":"CreateProxyGasLimitUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint64","name":"srcChainId","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"enum DataTypes.MessageTypes","name":"msgType","type":"uint8"},{"indexed":false,"internalType":"address","name":"acount","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FarmingMessageReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"FeeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum CrossFarmingSender.Chains","name":"chain","type":"uint8"},{"indexed":false,"internalType":"enum DataTypes.MessageTypes","name":"msgtype","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"gaslimit","type":"uint256"}],"name":"GasLimitUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"messageBus","type":"address"}],"name":"MessageBusUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oracle","type":"address"}],"name":"NewOracle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum CrossFarmingSender.Feeds","name":"feed","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"oracleUpdateBuffer","type":"uint256"}],"name":"OracleBufferUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"receiver","type":"address"}],"name":"ReceiverUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"vault","type":"address"}],"name":"VaultUpdated","type":"event"},{"inputs":[],"name":"BNB_CHANGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BSC_CHAIN_ID","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMPENSATION_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CROSS_FARMING_RECEIVER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EXCHANGE_RATE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_COMPENSATION_RATE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_COMPENSATION_RATE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"Vault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gas","type":"uint256"}],"name":"claimFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"compensationRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createProxyGasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"drainToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Chains","name":"_chain","type":"uint8"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"enum DataTypes.MessageTypes","name":"_msgType","type":"uint8"}],"name":"estimateGaslimit","outputs":[{"internalType":"uint256","name":"gaslimit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"","type":"address"}],"name":"executeMessage","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransfer","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransferFallback","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransferRefund","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Chains","name":"","type":"uint8"},{"internalType":"enum DataTypes.MessageTypes","name":"","type":"uint8"}],"name":"gaslimits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"is1st","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"messageBus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"nonces","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Feeds","name":"","type":"uint8"}],"name":"oracle","outputs":[{"internalType":"contract AggregatorV3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Feeds","name":"","type":"uint8"}],"name":"oracleUpdateBuffer","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendFarmMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_change","type":"uint256"}],"name":"setBnbChange","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rate","type":"uint256"}],"name":"setCompensationRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gaslimit","type":"uint256"}],"name":"setCreateProxyGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Chains","name":"_chain","type":"uint8"},{"internalType":"enum DataTypes.MessageTypes","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_gaslimit","type":"uint256"}],"name":"setGaslimits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"}],"name":"setMessageBus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Feeds","name":"_feed","type":"uint8"},{"internalType":"address","name":"_oracle","type":"address"}],"name":"setOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum CrossFarmingSender.Feeds","name":"_feed","type":"uint8"},{"internalType":"uint256","name":"_oracleUpdateBuffer","type":"uint256"}],"name":"setOracleUpdateBuffer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"}],"name":"setReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"name":"setVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');
;// CONCATENATED MODULE: ./src/config/abi/crossFarmingReceiver.json
const crossFarmingReceiver_namespaceObject = JSON.parse('[{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"},{"internalType":"address","name":"_cake","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"contract IMasterChefV2","name":"_mcv2","type":"address"},{"internalType":"address","name":"_operator","type":"address"},{"internalType":"uint64","name":"_chainId","type":"uint64"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BnbChangeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint64","name":"srcChainId","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"enum DataTypes.MessageTypes","name":"msgType","type":"uint8"},{"indexed":false,"internalType":"address","name":"acount","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FarmingMessageReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"FeeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"messageBus","type":"address"}],"name":"MessageBusUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newOperator","type":"address"},{"indexed":true,"internalType":"address","name":"oldOperator","type":"address"}],"name":"OperatorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"proxy","type":"address"}],"name":"ProxyCreated","type":"event"},{"inputs":[],"name":"BNB_CHANGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CAKE","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CROSS_FARMING_SENDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTER_CHEF_V2","outputs":[{"internalType":"contract IMasterChefV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SENDER_CHAIN_ID","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"bnbChangeReceived","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"cProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gas","type":"uint256"}],"name":"claimFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"drainToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"","type":"address"}],"name":"executeMessage","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransfer","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_srcChainId","type":"uint64"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransferFallback","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessageWithTransferRefund","outputs":[{"internalType":"enum IMessageReceiverApp.ExecutionStatus","name":"","type":"uint8"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"messageBus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_change","type":"uint256"}],"name":"setBnbChange","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"}],"name":"setMessageBus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"uProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]');
;// CONCATENATED MODULE: ./src/config/abi/crossFarmingProxy.json
const crossFarmingProxy_namespaceObject = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"CAKE","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTER_CHEF_V2","outputs":[{"internalType":"contract IMasterChefV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"approved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"fallbackNonce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_cake","type":"address"},{"internalType":"contract IMasterChefV2","name":"_mcv2","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"latestNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"user","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"}]');
// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
;// CONCATENATED MODULE: ./src/utils/contractHelpers.ts





// Addresses

// ABI





















































const getContract = ({ abi , address , chainId =dist.ChainId.BSC , signer  })=>{
    const signerOrProvider = signer ?? (0,wagmi/* provider */.Ap)({
        chainId
    });
    return new contracts_.Contract(address, abi, signerOrProvider);
};
const getBep20Contract = (address, signer)=>{
    return getContract({
        abi: erc20,
        address,
        signer
    });
};
const getErc721Contract = (address, signer)=>{
    return getContract({
        abi: erc721,
        address,
        signer
    });
};
const getLpContract = (address, chainId, signer)=>{
    return getContract({
        abi: lpTokenAbi,
        address,
        signer,
        chainId
    });
};
const getIfoV1Contract = (address, signer)=>{
    return getContract({
        abi: ifoV1,
        address,
        signer
    });
};
const getIfoV2Contract = (address, signer)=>{
    return getContract({
        abi: ifoV2,
        address,
        signer
    });
};
const getIfoV3Contract = (address, signer)=>{
    return getContract({
        abi: ifoV3,
        address,
        signer
    });
};
const getSouschefContract = (id, signer)=>{
    const config = pools/* default.find */.ZP.find((pool)=>pool.sousId === id);
    const abi = config.poolCategory === types/* PoolCategory.BINANCE */.jh.BINANCE ? sousChefBnb_namespaceObject : sousChef;
    return getContract({
        abi,
        address: (0,addressHelpers/* getAddress */.Kn)(config.contractAddress),
        signer
    });
};
const getSouschefV2Contract = (id, signer)=>{
    const config = poolsConfig.find((pool)=>pool.sousId === id);
    return getContract({
        abi: sousChefV2,
        address: getAddress(config.contractAddress),
        signer
    });
};
const getPointCenterIfoContract = (signer)=>{
    return getContract({
        abi: pointCenterIfo,
        address: (0,addressHelpers/* getPointCenterIfoAddress */.Cf)(),
        signer
    });
};
const getCakeContract = (signer, chainId)=>{
    return getContract({
        abi: cake,
        address: chainId ? src/* CAKE */.cr[chainId].address : src/* CAKE */.cr[dist.ChainId.BSC].address,
        signer
    });
};
const getProfileContract = (signer)=>{
    return getContract({
        abi: pancakeProfile,
        address: (0,addressHelpers/* getPancakeProfileAddress */.Re)(),
        signer
    });
};
const getPancakeBunniesContract = (signer)=>{
    return getContract({
        abi: pancakeBunniesAbi,
        address: getPancakeBunniesAddress(),
        signer
    });
};
const getBunnyFactoryContract = (signer)=>{
    return getContract({
        abi: bunnyFactory_namespaceObject,
        address: (0,addressHelpers/* getBunnyFactoryAddress */.S4)(),
        signer
    });
};
const getBunnySpecialContract = (signer)=>{
    return getContract({
        abi: bunnySpecialAbi,
        address: getBunnySpecialAddress(),
        signer
    });
};
const getLotteryV2Contract = (signer)=>{
    return getContract({
        abi: lotteryV2,
        address: (0,addressHelpers/* getLotteryV2Address */.kN)(),
        signer
    });
};
const getMasterchefContract = (signer, chainId)=>{
    return getContract({
        abi: masterchef,
        address: (0,addressHelpers/* getMasterChefAddress */.Oc)(chainId),
        signer
    });
};
const getMasterchefV1Contract = (signer)=>{
    return getContract({
        abi: masterchefV1,
        address: (0,addressHelpers/* getMasterChefV1Address */.G1)(),
        signer
    });
};
const getClaimRefundContract = (signer)=>{
    return getContract({
        abi: claimRefundAbi,
        address: getClaimRefundAddress(),
        signer
    });
};
const getTradingCompetitionContractEaster = (signer)=>{
    return getContract({
        abi: tradingCompetitionEaster_namespaceObject,
        address: (0,addressHelpers/* getTradingCompetitionAddressEaster */.rY)(),
        signer
    });
};
const getTradingCompetitionContractFanToken = (signer)=>{
    return getContract({
        abi: tradingCompetitionFanToken_namespaceObject,
        address: (0,addressHelpers/* getTradingCompetitionAddressFanToken */.t_)(),
        signer
    });
};
const getTradingCompetitionContractMobox = (signer)=>{
    return getContract({
        abi: tradingCompetitionMobox_namespaceObject,
        address: (0,addressHelpers/* getTradingCompetitionAddressMobox */.X8)(),
        signer
    });
};
const getTradingCompetitionContractMoD = (signer)=>{
    return getContract({
        abi: tradingCompetitionMoD,
        address: (0,addressHelpers/* getTradingCompetitionAddressMoD */.J0)(),
        signer
    });
};
const getEasterNftContract = (signer)=>{
    return getContract({
        abi: easterNftAbi,
        address: getEasterNftAddress(),
        signer
    });
};
const getCakeVaultV2Contract = (signer)=>{
    return getContract({
        abi: cakeVaultV2,
        address: (0,addressHelpers/* getCakeVaultAddress */.O9)(),
        signer
    });
};
const getCakeFlexibleSideVaultV2Contract = (signer)=>{
    return getContract({
        abi: cakeFlexibleSideVaultV2_namespaceObject,
        address: (0,addressHelpers/* getCakeFlexibleSideVaultAddress */.pO)(),
        signer
    });
};
const getPredictionsContract = (address, signer)=>{
    return getContract({
        abi: predictions,
        address,
        signer
    });
};
const getPredictionsV1Contract = (signer)=>{
    return getContract({
        abi: predictionsV1_namespaceObject,
        address: (0,addressHelpers/* getPredictionsV1Address */.wA)(),
        signer
    });
};
const getCakePredictionsContract = (address, signer)=>{
    return getContract({
        abi: cakePredictions_namespaceObject,
        address,
        signer
    });
};
const getChainlinkOracleContract = (address, signer, chainId)=>{
    return getContract({
        abi: chainlinkOracle_namespaceObject,
        address,
        signer,
        chainId
    });
};
const getMulticallContract = (chainId)=>{
    return getContract({
        abi: MultiCallAbi,
        address: getMulticallAddress(chainId),
        chainId
    });
};
const getBunnySpecialCakeVaultContract = (signer)=>{
    return getContract({
        abi: bunnySpecialCakeVaultAbi,
        address: getBunnySpecialCakeVaultAddress(),
        signer
    });
};
const getBunnySpecialPredictionContract = (signer)=>{
    return getContract({
        abi: bunnySpecialPredictionAbi,
        address: getBunnySpecialPredictionAddress(),
        signer
    });
};
const getBunnySpecialLotteryContract = (signer)=>{
    return getContract({
        abi: bunnySpecialLotteryAbi,
        address: getBunnySpecialLotteryAddress(),
        signer
    });
};
const getBunnySpecialXmasContract = (signer)=>{
    return getContract({
        abi: bunnySpecialXmasAbi,
        address: getBunnySpecialXmasAddress(),
        signer
    });
};
const getFarmAuctionContract = (signer)=>{
    return getContract({
        abi: farmAuction_namespaceObject,
        address: (0,addressHelpers/* getFarmAuctionAddress */.rz)(),
        signer
    });
};
const getAnniversaryAchievementContract = (signer)=>{
    return getContract({
        abi: anniversaryAchievement_namespaceObject,
        address: (0,addressHelpers/* getAnniversaryAchievement */.Jc)(),
        signer
    });
};
const getNftMarketContract = (signer)=>{
    return getContract({
        abi: nftMarket,
        address: (0,addressHelpers/* getNftMarketAddress */.D4)(),
        signer
    });
};
const getNftSaleContract = (signer)=>{
    return getContract({
        abi: nftSale,
        address: (0,addressHelpers/* getNftSaleAddress */.L$)(),
        signer
    });
};
const getPancakeSquadContract = (signer)=>{
    return getContract({
        abi: pancakeSquad_namespaceObject,
        address: (0,addressHelpers/* getPancakeSquadAddress */.IY)(),
        signer
    });
};
const getErc721CollectionContract = (signer, address)=>{
    return getContract({
        abi: erc721collection_namespaceObject,
        address,
        signer
    });
};
const getPotteryVaultContract = (address, signer)=>{
    return getContract({
        abi: potteryVaultAbi,
        address,
        signer
    });
};
const getPotteryDrawContract = (signer)=>{
    return getContract({
        abi: potteryDrawAbi_namespaceObject,
        address: (0,addressHelpers/* getPotteryDrawAddress */.Du)(),
        signer
    });
};
const getZapContract = (signer)=>{
    return getContract({
        abi: zapAbi,
        address: getZapAddress(),
        signer
    });
};
const getIfoCreditAddressContract = (signer)=>{
    return getContract({
        abi: iCake_namespaceObject,
        address: (0,addressHelpers/* getICakeAddress */.ck)(),
        signer
    });
};
const getBCakeFarmBoosterContract = (signer)=>{
    return getContract({
        abi: bCakeFarmBooster_namespaceObject,
        address: (0,addressHelpers/* getBCakeFarmBoosterAddress */.XH)(),
        signer
    });
};
const getBCakeFarmBoosterProxyFactoryContract = (signer)=>{
    return getContract({
        abi: bCakeFarmBoosterProxyFactory_namespaceObject,
        address: (0,addressHelpers/* getBCakeFarmBoosterProxyFactoryAddress */.D0)(),
        signer
    });
};
const getBCakeProxyContract = (proxyContractAddress, signer)=>{
    return getContract({
        abi: bCakeProxy_namespaceObject,
        address: proxyContractAddress,
        signer
    });
};
const getNonBscVaultContract = (signer, chainId)=>{
    return getContract({
        abi: nonBscVault,
        address: (0,addressHelpers/* getNonBscVaultAddress */.$N)(chainId),
        chainId,
        signer
    });
};
const getCrossFarmingSenderContract = (signer, chainId)=>{
    return getContract({
        abi: crossFarmingSender_namespaceObject,
        address: (0,addressHelpers/* getCrossFarmingSenderAddress */.cH)(chainId),
        chainId,
        signer
    });
};
const getCrossFarmingReceiverContract = (signer, chainId)=>{
    return getContract({
        abi: crossFarmingReceiver_namespaceObject,
        address: (0,addressHelpers/* getCrossFarmingReceiverAddress */.uK)(chainId),
        chainId,
        signer
    });
};
const getCrossFarmingProxyContract = (proxyContractAddress, signer, chainId)=>{
    return getContract({
        abi: crossFarmingProxy_namespaceObject,
        address: proxyContractAddress,
        chainId,
        signer
    });
};


/***/ }),

/***/ 5305:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ getBlockExploreLink),
/* harmony export */   "UJ": () => (/* binding */ isAddress),
/* harmony export */   "X0": () => (/* binding */ getBlockExploreName),
/* harmony export */   "hr": () => (/* binding */ escapeRegExp),
/* harmony export */   "uN": () => (/* binding */ getContract),
/* harmony export */   "wK": () => (/* binding */ isTokenOnList),
/* harmony export */   "yC": () => (/* binding */ calculateGasMargin),
/* harmony export */   "z": () => (/* binding */ getBscScanLinkForNft)
/* harmony export */ });
/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51541);
/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_address__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65757);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26644);
/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12792);
/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _pancakeswap_wagmi_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82466);
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(50541);
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_memoize__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _wagmi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(40495);








// returns the checksummed address if the address is valid, otherwise returns false
const isAddress = lodash_memoize__WEBPACK_IMPORTED_MODULE_6___default()((value)=>{
    try {
        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_0__.getAddress)(value);
    } catch  {
        return false;
    }
});
function getBlockExploreLink(data, type, chainIdOverride) {
    const chainId = chainIdOverride || _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BSC;
    const chain = _wagmi__WEBPACK_IMPORTED_MODULE_7__/* .chains.find */ .p5.find((c)=>c.id === chainId);
    if (!chain) return _pancakeswap_wagmi_chains__WEBPACK_IMPORTED_MODULE_5__/* .bsc.blockExplorers["default"].url */ .eG.blockExplorers["default"].url;
    switch(type){
        case "transaction":
            {
                return `${chain.blockExplorers.default.url}/tx/${data}`;
            }
        case "token":
            {
                return `${chain.blockExplorers.default.url}/token/${data}`;
            }
        case "block":
            {
                return `${chain.blockExplorers.default.url}/block/${data}`;
            }
        case "countdown":
            {
                return `${chain.blockExplorers.default.url}/block/countdown/${data}`;
            }
        default:
            {
                return `${chain.blockExplorers.default.url}/address/${data}`;
            }
    }
}
function getBlockExploreName(chainIdOverride) {
    const chainId = chainIdOverride || _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BSC;
    const chain = _wagmi__WEBPACK_IMPORTED_MODULE_7__/* .chains.find */ .p5.find((c)=>c.id === chainId);
    return chain?.blockExplorers?.default.name || _pancakeswap_wagmi_chains__WEBPACK_IMPORTED_MODULE_5__/* .bsc.blockExplorers["default"].name */ .eG.blockExplorers["default"].name;
}
function getBscScanLinkForNft(collectionAddress, tokenId) {
    return `${_pancakeswap_wagmi_chains__WEBPACK_IMPORTED_MODULE_5__/* .bsc.blockExplorers["default"].url */ .eG.blockExplorers["default"].url}/token/${collectionAddress}?a=${tokenId}`;
}
// add 10%
function calculateGasMargin(value, margin = 1000) {
    return value.mul(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(10000).add(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(margin))).div(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(10000));
}
// account is optional
function getContract(address, ABI, signer) {
    if (!isAddress(address) || address === _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.AddressZero) {
        throw Error(`Invalid 'address' parameter '${address}'.`);
    }
    return new _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3__.Contract(address, ABI, signer);
}
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&") // $& means the whole matched string
    ;
}
function isTokenOnList(defaultTokens, currency) {
    if (currency?.isNative) return true;
    return Boolean(currency?.isToken && defaultTokens[currency.chainId]?.[currency.address]);
}


/***/ }),

/***/ 4085:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AG": () => (/* binding */ hashOrderSet),
/* harmony export */   "EM": () => (/* binding */ LS_ORDERS),
/* harmony export */   "On": () => (/* binding */ confirmOrderSubmission),
/* harmony export */   "QR": () => (/* binding */ getLSOrders),
/* harmony export */   "TR": () => (/* binding */ saveOrder),
/* harmony export */   "Vx": () => (/* binding */ confirmOrderCancellation),
/* harmony export */   "ZJ": () => (/* binding */ saveOrders),
/* harmony export */   "r6": () => (/* binding */ hashOrder)
/* harmony export */ });
/* unused harmony exports clearOrdersLocalStorage, lsKey, removeOrders, removeOrder, getUniqueOrders */
/* harmony import */ var local_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72607);
/* harmony import */ var local_storage__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(local_storage__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_orderBy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49949);
/* harmony import */ var lodash_orderBy__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_orderBy__WEBPACK_IMPORTED_MODULE_1__);


const LS_ORDERS = "gorders_";
const hashOrder = (order)=>order.id;
const hashOrderSet = (orders)=>new Set(orders.map(hashOrder));
function clearOrdersLocalStorage() {
    return clear();
}
function lsKey(key, account, chainId) {
    return key + account.toString() + chainId.toString();
}
function getLSOrders(chainId, account, pending = false) {
    const key = pending ? lsKey(`${LS_ORDERS}pending_`, account, chainId) : lsKey(LS_ORDERS, account, chainId);
    const orders = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(key);
    return orders ? getUniqueOrders(orders) : [];
}
function saveOrder(chainId, account, order, pending = false) {
    saveOrders(chainId, account, [
        order
    ], pending);
}
function saveOrders(chainId, account, orders, pending = false) {
    if (!orders || !orders.length) return;
    const key = pending ? lsKey(`${LS_ORDERS}pending_`, account, chainId) : lsKey(LS_ORDERS, account, chainId);
    if (!pending) {
        removeOrders(chainId, account, orders, true);
    }
    const result = removeOrders(chainId, account, orders, pending);
    if (!result.length) {
        (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(key, orders);
    } else {
        result.push(...orders);
        (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(key, result);
    }
}
function removeOrders(chainId, account, orders, pending = false) {
    const key = pending ? lsKey(`${LS_ORDERS}pending_`, account, chainId) : lsKey(LS_ORDERS, account, chainId);
    const prev = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(key);
    if (!prev) return [];
    if (!orders || !orders.length) return prev;
    const orderHashSet = hashOrderSet(orders);
    const result = prev.filter((orderInLS)=>!orderHashSet.has(hashOrder(orderInLS)));
    (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(key, result);
    return result;
}
function removeOrder(chainId, account, order, pending = false) {
    return removeOrders(chainId, account, [
        order
    ], pending);
}
function confirmOrderCancellation(chainId, account, cancellationHash, success = true) {
    const cancelHash = cancellationHash.toLowerCase();
    const pendingKey = lsKey(`${LS_ORDERS}pending_`, account, chainId);
    const pendingOrders = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(pendingKey);
    const confirmedOrder = pendingOrders.find((order)=>order.cancelledTxHash?.toLowerCase() === cancelHash);
    if (confirmedOrder) removeOrder(chainId, account, confirmedOrder, true);
    if (success && confirmedOrder) {
        const ordersKey = lsKey(LS_ORDERS, account, chainId);
        const orders = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(ordersKey);
        if (orders) {
            const ordersToSave = removeOrder(chainId, account, confirmedOrder);
            ordersToSave.push({
                ...confirmedOrder,
                cancelledTxHash: cancelHash
            });
            (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(ordersKey, ordersToSave);
        } else {
            (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(ordersKey, [
                {
                    ...confirmedOrder,
                    cancelledTxHash: cancelHash
                }, 
            ]);
        }
    }
}
function confirmOrderSubmission(chainId, account, submissionHash, success = true) {
    const creationHash = submissionHash.toLowerCase();
    const pendingKey = lsKey(`${LS_ORDERS}pending_`, account, chainId);
    const pendingOrders = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(pendingKey);
    const confirmedOrder = pendingOrders.find((order)=>order.createdTxHash?.toLowerCase() === creationHash);
    if (confirmedOrder) removeOrder(chainId, account, confirmedOrder, true);
    if (success && confirmedOrder) {
        const ordersKey = lsKey(LS_ORDERS, account, chainId);
        const orders = (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.get)(ordersKey);
        if (orders) {
            const ordersToSave = removeOrder(chainId, account, {
                ...confirmedOrder,
                createdTxHash: creationHash
            });
            ordersToSave.push({
                ...confirmedOrder,
                createdTxHash: creationHash
            });
            (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(ordersKey, ordersToSave);
        } else {
            (0,local_storage__WEBPACK_IMPORTED_MODULE_0__.set)(ordersKey, [
                {
                    ...confirmedOrder,
                    createdTxHash: creationHash
                }, 
            ]);
        }
    }
}
const getUniqueOrders = (allOrders)=>[
        ...new Map(lodash_orderBy__WEBPACK_IMPORTED_MODULE_1___default()(allOrders, (order)=>parseFloat(order.updatedAt), "desc").map((order)=>[
                order.id,
                order
            ])).values(), 
    ];


/***/ }),

/***/ 25152:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "v": () => (/* binding */ multicallv2)
/* harmony export */ });
/* harmony import */ var _pancakeswap_multicall__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82547);
/* harmony import */ var _wagmi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40495);


const { multicall , multicallv2  } = (0,_pancakeswap_multicall__WEBPACK_IMPORTED_MODULE_0__/* .createMulticall */ .wn)(_wagmi__WEBPACK_IMPORTED_MODULE_1__/* .provider */ .Ap);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (multicall);



/***/ }),

/***/ 11536:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => (/* binding */ bscRpcProvider)
/* harmony export */ });
/* unused harmony export BSC_PROD_NODE */
/* harmony import */ var _ethersproject_providers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90399);
/* harmony import */ var _ethersproject_providers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_providers__WEBPACK_IMPORTED_MODULE_0__);

const BSC_PROD_NODE = process.env.NEXT_PUBLIC_NODE_PRODUCTION || "https://bsc.nodereal.io";
const bscRpcProvider = new _ethersproject_providers__WEBPACK_IMPORTED_MODULE_0__.StaticJsonRpcProvider(BSC_PROD_NODE);
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (null);


/***/ }),

/***/ 30375:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => (/* binding */ verifyBscNetwork)
/* harmony export */ });
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);

const verifyBscNetwork = (chainId)=>{
    return chainId === _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC || chainId === _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET;
};


/***/ }),

/***/ 40495:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "vo": () => (/* binding */ CHAIN_IDS),
  "p5": () => (/* binding */ wagmi_chains),
  "Lp": () => (/* binding */ client),
  "MR": () => (/* binding */ isChainSupported),
  "gW": () => (/* binding */ isChainTestnet),
  "Ap": () => (/* binding */ provider),
  "kF": () => (/* binding */ walletConnectNoQrCodeConnector)
});

// UNUSED EXPORTS: bscConnector, coinbaseConnector, injectedConnector, metaMaskConnector, walletConnectConnector

// EXTERNAL MODULE: external "wagmi"
var external_wagmi_ = __webpack_require__(8906);
// EXTERNAL MODULE: external "wagmi/connectors/injected"
var injected_ = __webpack_require__(74738);
// EXTERNAL MODULE: external "@ethersproject/bytes"
var bytes_ = __webpack_require__(49935);
;// CONCATENATED MODULE: ../../packages/wagmi/dist/connectors/binanceWallet.mjs
// connectors/binanceWallet/binanceWallet.ts



var mappingNetwork = {
  1: "eth-mainnet",
  56: "bsc-mainnet",
  97: "bsc-testnet"
};
var _binanceChainListener = async () => new Promise((resolve) => Object.defineProperty(window, "BinanceChain", {
  get() {
    return this.bsc;
  },
  set(bsc) {
    this.bsc = bsc;
    resolve();
  }
}));
var BinanceWalletConnector = class extends injected_.InjectedConnector {
  constructor({
    chains: _chains
  } = {}) {
    const options = {
      name: "Binance",
      shimDisconnect: false,
      shimChainChangedDisconnect: true
    };
    const chains = _chains == null ? void 0 : _chains.filter((c) => !!mappingNetwork[c.id]);
    super({
      chains,
      options
    });
    this.id = "bsc";
    this.ready = typeof window !== "undefined";
  }
  async connect({ chainId } = {}) {
    try {
      const provider = await this.getProvider();
      if (!provider)
        throw new external_wagmi_.ConnectorNotFoundError();
      if (provider.on) {
        provider.on("accountsChanged", this.onAccountsChanged);
        provider.on("chainChanged", this.onChainChanged);
        provider.on("disconnect", this.onDisconnect);
      }
      this.emit("message", { type: "connecting" });
      const account = await this.getAccount();
      let id = await this.getChainId();
      let unsupported = this.isChainUnsupported(id);
      if (chainId && id !== chainId) {
        const chain = await this.switchChain(chainId);
        id = chain.id;
        unsupported = this.isChainUnsupported(id);
      }
      return { account, chain: { id, unsupported }, provider };
    } catch (error) {
      if (this.isUserRejectedRequestError(error))
        throw new external_wagmi_.UserRejectedRequestError(error);
      if (error.code === -32002)
        throw new external_wagmi_.ResourceUnavailableError(error);
      throw error;
    }
  }
  async getProvider() {
    if (typeof window !== "undefined") {
      if (window.BinanceChain) {
        this.provider = window.BinanceChain;
      } else {
        await _binanceChainListener();
        this.provider = window.BinanceChain;
      }
    }
    return this.provider;
  }
  async switchChain(chainId) {
    var _a, _b;
    const provider = await this.getProvider();
    if (!provider)
      throw new external_wagmi_.ConnectorNotFoundError();
    const id = (0,bytes_.hexValue)(chainId);
    if (mappingNetwork[chainId]) {
      try {
        await ((_a = provider.switchNetwork) == null ? void 0 : _a.call(provider, mappingNetwork[chainId]));
        return (_b = this.chains.find((x) => x.id === chainId)) != null ? _b : {
          id: chainId,
          name: `Chain ${id}`,
          network: `${id}`,
          rpcUrls: { default: "" }
        };
      } catch (error) {
        if (error.error === "user rejected") {
          throw new external_wagmi_.UserRejectedRequestError(error);
        }
      }
    }
    throw new external_wagmi_.SwitchChainNotSupportedError({ connector: this });
  }
};


// EXTERNAL MODULE: ../../packages/wagmi/dist/chains.mjs
var chains = __webpack_require__(82466);
// EXTERNAL MODULE: external "lodash/memoize"
var memoize_ = __webpack_require__(50541);
var memoize_default = /*#__PURE__*/__webpack_require__.n(memoize_);
// EXTERNAL MODULE: external "wagmi/connectors/coinbaseWallet"
var coinbaseWallet_ = __webpack_require__(51276);
// EXTERNAL MODULE: external "wagmi/connectors/metaMask"
var metaMask_ = __webpack_require__(79035);
// EXTERNAL MODULE: external "wagmi/connectors/walletConnect"
var walletConnect_ = __webpack_require__(61556);
// EXTERNAL MODULE: external "wagmi/providers/jsonRpc"
var jsonRpc_ = __webpack_require__(21176);
// EXTERNAL MODULE: external "@gnosis.pm/safe-apps-wagmi"
var safe_apps_wagmi_ = __webpack_require__(18310);
;// CONCATENATED MODULE: ./src/utils/wagmi.ts










const CHAINS = [
    chains/* bsc */.eG,
    chains/* mainnet */.RJ,
    chains/* bscTest */.LC,
    chains/* rinkeby */.DW,
    chains/* goerli */.ws
];
const getNodeRealUrl = (networkName)=>{
    let host = null;
    switch(networkName){
        case "homestead":
            if (process.env.NEXT_PUBLIC_NODE_REAL_API_ETH) {
                host = `eth-mainnet.nodereal.io/v1/${process.env.NEXT_PUBLIC_NODE_REAL_API_ETH}`;
            }
            break;
        case "rinkeby":
            if (process.env.NEXT_PUBLIC_NODE_REAL_API_RINKEBY) {
                host = `eth-rinkeby.nodereal.io/v1/${process.env.NEXT_PUBLIC_NODE_REAL_API_RINKEBY}`;
            }
            break;
        case "goerli":
            if (process.env.NEXT_PUBLIC_NODE_REAL_API_GOERLI) {
                host = `eth-goerli.nodereal.io/v1/${process.env.NEXT_PUBLIC_NODE_REAL_API_GOERLI}`;
            }
            break;
        default:
            host = null;
    }
    if (!host) {
        return null;
    }
    const url = `https://${host}`;
    return {
        http: url,
        webSocket: url.replace(/^http/i, "wss").replace(".nodereal.io/v1", ".nodereal.io/ws/v1")
    };
};
const { provider , chains: wagmi_chains  } = (0,external_wagmi_.configureChains)(CHAINS, [
    (0,jsonRpc_.jsonRpcProvider)({
        rpc: (chain)=>{
            if (!!process.env.NEXT_PUBLIC_NODE_PRODUCTION && chain.id === chains/* bsc.id */.eG.id) {
                return {
                    http: process.env.NEXT_PUBLIC_NODE_PRODUCTION
                };
            }
            if (false) {}
            return getNodeRealUrl(chain.network) || {
                http: chain.rpcUrls.default
            };
        }
    }), 
]);
const injectedConnector = new injected_.InjectedConnector({
    chains: wagmi_chains,
    options: {
        shimDisconnect: false,
        shimChainChangedDisconnect: true
    }
});
const coinbaseConnector = new coinbaseWallet_.CoinbaseWalletConnector({
    chains: wagmi_chains,
    options: {
        appName: "PancakeSwap",
        appLogoUrl: "https://pancakeswap.com/logo.png"
    }
});
const walletConnectConnector = new walletConnect_.WalletConnectConnector({
    chains: wagmi_chains,
    options: {
        qrcode: true
    }
});
const walletConnectNoQrCodeConnector = new walletConnect_.WalletConnectConnector({
    chains: wagmi_chains,
    options: {
        qrcode: false
    }
});
const metaMaskConnector = new metaMask_.MetaMaskConnector({
    chains: wagmi_chains,
    options: {
        shimDisconnect: false,
        shimChainChangedDisconnect: true
    }
});
const bscConnector = new BinanceWalletConnector({
    chains: wagmi_chains
});
const client = (0,external_wagmi_.createClient)({
    autoConnect: false,
    provider,
    connectors: [
        new safe_apps_wagmi_.SafeConnector({
            chains: wagmi_chains
        }),
        metaMaskConnector,
        injectedConnector,
        coinbaseConnector,
        walletConnectConnector,
        bscConnector, 
    ]
});
const CHAIN_IDS = wagmi_chains.map((c)=>c.id);
const isChainSupported = memoize_default()((chainId)=>CHAIN_IDS.includes(chainId));
const isChainTestnet = memoize_default()((chainId)=>wagmi_chains.find((c)=>c.id === chainId)?.testnet);


/***/ }),

/***/ 72465:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ splitProxyFarms)
/* harmony export */ });
/* harmony import */ var lodash_groupBy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(98492);
/* harmony import */ var lodash_groupBy__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_groupBy__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pancakeswap_utils_isUndefinedOrNull__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45366);


function splitProxyFarms(farms) {
    const { false: normalFarms , true: farmsWithProxy  } = lodash_groupBy__WEBPACK_IMPORTED_MODULE_0___default()(farms, (farm)=>(0,_pancakeswap_utils_isUndefinedOrNull__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(farm.boosted) ? false : farm.boosted);
    return {
        normalFarms,
        farmsWithProxy
    };
}


/***/ }),

/***/ 9681:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CE": () => (/* binding */ convertCakeToShares),
/* harmony export */   "UN": () => (/* binding */ getCakeVaultEarnings),
/* harmony export */   "XW": () => (/* binding */ getICakeWeekDisplay),
/* harmony export */   "dF": () => (/* binding */ MIN_LOCK_AMOUNT),
/* harmony export */   "iL": () => (/* binding */ ENABLE_EXTEND_LOCK_AMOUNT),
/* harmony export */   "ur": () => (/* binding */ convertSharesToCake),
/* harmony export */   "zy": () => (/* binding */ getPoolBlockInfo)
/* harmony export */ });
/* unused harmony export getAprData */
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var config_constants_pools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73486);
/* harmony import */ var _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85576);
/* harmony import */ var _pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(24671);
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50541);
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_memoize__WEBPACK_IMPORTED_MODULE_4__);






// min deposit and withdraw amount
const MIN_LOCK_AMOUNT = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(10000000000000);
const ENABLE_EXTEND_LOCK_AMOUNT = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(100000000000000);
const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3, fee)=>{
    const sharePriceNumber = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(cakePerFullShare, decimals);
    const amountInCake = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(shares.multipliedBy(sharePriceNumber)).minus(fee || _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_2__/* .BIG_ZERO */ .HW);
    const cakeAsNumberBalance = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(amountInCake, decimals);
    const cakeAsBigNumber = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getDecimalAmount */ .Qe)(new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(cakeAsNumberBalance), decimals);
    const cakeAsDisplayBalance = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getFullDisplayBalance */ .NJ)(amountInCake, decimals, decimalsToRound);
    return {
        cakeAsNumberBalance,
        cakeAsBigNumber,
        cakeAsDisplayBalance
    };
};
const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3)=>{
    const sharePriceNumber = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(cakePerFullShare, decimals);
    const amountInShares = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(cake.dividedBy(sharePriceNumber));
    const sharesAsNumberBalance = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(amountInShares, decimals);
    const sharesAsBigNumber = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getDecimalAmount */ .Qe)(new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(sharesAsNumberBalance), decimals);
    const sharesAsDisplayBalance = (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getFullDisplayBalance */ .NJ)(amountInShares, decimals, decimalsToRound);
    return {
        sharesAsNumberBalance,
        sharesAsBigNumber,
        sharesAsDisplayBalance
    };
};
const MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;
const getAprData = (pool, performanceFee)=>{
    const { vaultKey , apr  } = pool;
    //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this
    const autoCompoundFrequency = vaultKey ? vaultPoolConfig[vaultKey].autoCompoundFrequency : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;
    if (vaultKey) {
        const autoApr = getApy(apr, autoCompoundFrequency, 365, performanceFee) * 100;
        return {
            apr: autoApr,
            autoCompoundFrequency
        };
    }
    return {
        apr,
        autoCompoundFrequency
    };
};
const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice, fee)=>{
    const hasAutoEarnings = account && cakeAtLastUserAction?.gt(0) && userShares?.gt(0);
    const { cakeAsBigNumber  } = convertSharesToCake(userShares, pricePerFullShare);
    const autoCakeProfit = cakeAsBigNumber.minus(fee || _pancakeswap_utils_bigNumber__WEBPACK_IMPORTED_MODULE_2__/* .BIG_ZERO */ .HW).minus(cakeAtLastUserAction);
    const autoCakeToDisplay = autoCakeProfit.gte(0) ? (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(autoCakeProfit, 18) : 0;
    const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);
    const autoUsdToDisplay = autoUsdProfit.gte(0) ? (0,_pancakeswap_utils_formatBalance__WEBPACK_IMPORTED_MODULE_3__/* .getBalanceNumber */ .mW)(autoUsdProfit, 18) : 0;
    return {
        hasAutoEarnings,
        autoCakeToDisplay,
        autoUsdToDisplay
    };
};
const getPoolBlockInfo = lodash_memoize__WEBPACK_IMPORTED_MODULE_4___default()((pool, currentBlock)=>{
    const { startBlock , endBlock , isFinished  } = pool;
    const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);
    const blocksUntilStart = Math.max(startBlock - currentBlock, 0);
    const blocksRemaining = Math.max(endBlock - currentBlock, 0);
    const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;
    const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;
    return {
        shouldShowBlockCountdown,
        blocksUntilStart,
        blocksRemaining,
        hasPoolStarted,
        blocksToDisplay
    };
}, (pool, currentBlock)=>`${pool.startBlock}#${pool.endBlock}#${pool.isFinished}#${currentBlock}`);
const getICakeWeekDisplay = (ceiling)=>{
    const weeks = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(ceiling).div(60).div(60).div(24).div(7);
    return Math.round(weeks.toNumber());
};


/***/ }),

/***/ 65498:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFarmConfig": () => (/* binding */ getFarmConfig),
/* harmony export */   "getStableConfig": () => (/* binding */ getStableConfig)
/* harmony export */ });
/* harmony import */ var _pancakeswap_farms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26626);

let logged = false;
const getFarmConfig = async (chainId)=>{
    try {
        return (await __webpack_require__(60092)(`./${chainId}.ts`)).default.filter((f)=>f.pid !== null);
    } catch (error) {
        if (!logged) {
            console.error("Cannot get farm config", error, chainId);
            logged = true;
        }
        return [];
    }
};
const getStableConfig = async (chainId)=>{
    try {
        const farms = (await __webpack_require__(60092)(`./${chainId}.ts`)).default;
        return farms.filter(_pancakeswap_farms__WEBPACK_IMPORTED_MODULE_0__/* .isStableFarm */ .x);
    } catch (error) {
        if (!logged) {
            console.error("Cannot get stable farm config", error, chainId);
            logged = true;
        }
        return [];
    }
};


/***/ }),

/***/ 98515:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const priceHelperLps = [];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (priceHelperLps);


/***/ }),

/***/ 51973:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72502);

const priceHelperLps = [
    {
        pid: null,
        lpSymbol: "WETH-USDC LP",
        lpAddress: "0xf5bf0C34d3c428A74Ceb98d27d38d0036C587200",
        quoteToken: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_0__/* .goerliTestnetTokens.usdc */ .On.usdc,
        token: _pancakeswap_tokens__WEBPACK_IMPORTED_MODULE_0__/* .goerliTestnetTokens.weth */ .On.weth
    }, 
].map((p)=>({
        ...p,
        token: p.token.serialize,
        quoteToken: p.quoteToken.serialize
    }));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (priceHelperLps);


/***/ }),

/***/ 81347:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const priceHelperLps = [];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (priceHelperLps);


/***/ }),

/***/ 25373:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const priceHelperLps = [];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (priceHelperLps);


/***/ }),

/***/ 17970:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFarmsPriceHelperLpFiles": () => (/* binding */ getFarmsPriceHelperLpFiles)
/* harmony export */ });
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43086);
/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _56__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81347);
/* harmony import */ var _97__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25373);
/* harmony import */ var _1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(98515);
/* harmony import */ var _5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51973);





const getFarmsPriceHelperLpFiles = (chainId)=>{
    switch(chainId){
        case _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC:
            return _56__WEBPACK_IMPORTED_MODULE_1__["default"];
        case _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BSC_TESTNET:
            return _97__WEBPACK_IMPORTED_MODULE_2__["default"];
        case _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM:
            return _1__WEBPACK_IMPORTED_MODULE_3__["default"];
        case _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.GOERLI:
            return _5__WEBPACK_IMPORTED_MODULE_4__["default"];
        default:
            return [];
    }
};


/***/ }),

/***/ 74086:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => (/* binding */ filterFarmsByQuoteToken)
/* harmony export */ });
/**
 * Returns the first farm with a quote token that matches from an array of preferred quote tokens
 * @param farms Array of farms
 * @param preferredQuoteTokens Array of preferred quote tokens
 * @returns A preferred farm, if found - or the first element of the farms array
 */ const filterFarmsByQuoteToken = (farms, preferredQuoteTokens = [
    "BUSD",
    "WBNB"
])=>{
    const preferredFarm = farms.find((farm)=>{
        return preferredQuoteTokens.some((quoteToken)=>{
            return farm.quoteToken.symbol === quoteToken;
        });
    });
    return preferredFarm || farms[0];
};


/***/ }),

/***/ 65267:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "P4": () => (/* binding */ bCakeSupportedChainId),
  "PG": () => (/* binding */ createFarmFetcher)
});

// UNUSED EXPORTS: filterFarmsByQuoteToken, getFarmCakeRewardApr, getFarmsPrices, isStableFarm

// EXTERNAL MODULE: external "@ethersproject/units"
var units_ = __webpack_require__(93138);
// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
// EXTERNAL MODULE: external "@ethersproject/bignumber"
var bignumber_ = __webpack_require__(65757);
// EXTERNAL MODULE: external "lodash/memoize"
var memoize_ = __webpack_require__(50541);
var memoize_default = /*#__PURE__*/__webpack_require__.n(memoize_);
;// CONCATENATED MODULE: ../../packages/farms/src/getFullDecimalMultiplier.ts


const BIG_TEN = bignumber_.BigNumber.from(10);
const getFullDecimalMultiplier = memoize_default()((decimals)=>{
    return BIG_TEN.pow(decimals);
});

;// CONCATENATED MODULE: ../../packages/farms/src/const.ts


const FIXED_ZERO = bignumber_.FixedNumber.from(0);
const FIXED_ONE = bignumber_.FixedNumber.from(1);
const FIXED_TWO = bignumber_.FixedNumber.from(2);
const FIXED_TEN_IN_POWER_18 = bignumber_.FixedNumber.from(getFullDecimalMultiplier(18));
const masterChefAddresses = {
    97: "0xB4A466911556e39210a6bB2FaECBB59E4eB7E43d",
    56: "0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652"
};
const nonBSCVaultAddresses = {
    1: "0x2e71B2688019ebdFDdE5A45e6921aaebb15b25fb",
    5: "0xE6c904424417D03451fADd6E3f5b6c26BcC43841"
};

;// CONCATENATED MODULE: ../../packages/utils/equalsIgnoreCase.ts
const equalsIgnoreCase = (a, b)=>{
    if (!a || !b) return false;
    return a.localeCompare(b, undefined, {
        sensitivity: "accent"
    }) === 0;
};

// EXTERNAL MODULE: external "lodash/toNumber"
var toNumber_ = __webpack_require__(10582);
var toNumber_default = /*#__PURE__*/__webpack_require__.n(toNumber_);
;// CONCATENATED MODULE: ../../packages/farms/src/farmPrices.ts





// Find BUSD price for token
// either via direct calculation if farm is X-BNB or X-BUSD
// or via quoteTokenFarm which is quoteToken-BNB or quoteToken-BUSD farm
const getFarmBaseTokenPrice = (farm, quoteTokenFarm, nativePriceUSD, wNative, stable, quoteTokenInBusd)=>{
    const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote);
    if (farm.quoteToken.symbol === stable) {
        return hasTokenPriceVsQuote ? bignumber_.FixedNumber.from(farm.tokenPriceVsQuote) : FIXED_ONE;
    }
    if (farm.quoteToken.symbol === wNative) {
        return hasTokenPriceVsQuote ? nativePriceUSD.mulUnsafe(bignumber_.FixedNumber.from(farm.tokenPriceVsQuote)) : FIXED_ONE;
    }
    // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms
    if (!quoteTokenFarm) {
        return FIXED_ZERO;
    }
    // Possible alternative farm quoteTokens:
    // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)
    // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token
    // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)
    // from the BNB - pBTC price, we can calculate the PNT - BUSD price
    if (quoteTokenFarm.quoteToken.symbol === wNative || quoteTokenFarm.quoteToken.symbol === stable) {
        return hasTokenPriceVsQuote && quoteTokenInBusd ? bignumber_.FixedNumber.from(farm.tokenPriceVsQuote).mulUnsafe(quoteTokenInBusd) : FIXED_ONE;
    }
    // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken
    return FIXED_ZERO;
};
const getFarmQuoteTokenPrice = (farm, quoteTokenFarm, nativePriceUSD, wNative, stable)=>{
    if (farm.quoteToken.symbol === stable) {
        return FIXED_ONE;
    }
    if (farm.quoteToken.symbol === wNative) {
        return nativePriceUSD;
    }
    if (!quoteTokenFarm) {
        return FIXED_ZERO;
    }
    if (quoteTokenFarm.quoteToken.symbol === wNative) {
        return quoteTokenFarm.tokenPriceVsQuote ? nativePriceUSD.mulUnsafe(bignumber_.FixedNumber.from(quoteTokenFarm.tokenPriceVsQuote)) : FIXED_ZERO;
    }
    if (quoteTokenFarm.quoteToken.symbol === stable) {
        return quoteTokenFarm.tokenPriceVsQuote ? bignumber_.FixedNumber.from(quoteTokenFarm.tokenPriceVsQuote) : FIXED_ZERO;
    }
    return FIXED_ZERO;
};
const getFarmFromTokenAddress = (farms, tokenAddress, preferredQuoteTokens)=>{
    const farmsWithTokenSymbol = farms.filter((farm)=>equalsIgnoreCase(farm.token.address, tokenAddress));
    const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens);
    return filteredFarm;
};
const filterFarmsByQuoteToken = (farms, preferredQuoteTokens = [
    "BUSD",
    "WBNB"
])=>{
    const preferredFarm = farms.find((farm)=>{
        return preferredQuoteTokens.some((quoteToken)=>{
            return farm.quoteToken.symbol === quoteToken;
        });
    });
    return preferredFarm || farms[0];
};
const getStableLpTokenPrice = (lpTotalSupply, tokenAmountTotal, tokenPriceBusd, quoteTokenAmountTotal, quoteTokenInBusd)=>{
    if (lpTotalSupply.isZero()) {
        return FIXED_ZERO;
    }
    const valueOfBaseTokenInFarm = tokenPriceBusd.mulUnsafe(tokenAmountTotal);
    const valueOfQuoteTokenInFarm = quoteTokenInBusd.mulUnsafe(quoteTokenAmountTotal);
    const liquidity = valueOfBaseTokenInFarm.addUnsafe(valueOfQuoteTokenInFarm);
    const totalLpTokens = lpTotalSupply.divUnsafe(FIXED_TEN_IN_POWER_18);
    return liquidity.divUnsafe(totalLpTokens);
};
const getLpTokenPrice = (lpTotalSupply, lpTotalInQuoteToken, tokenAmountTotal, tokenPriceBusd)=>{
    // LP token price
    let lpTokenPrice = FIXED_ZERO;
    const lpTotalSupplyAsBigNumber = bignumber_.BigNumber.from(lpTotalSupply);
    const lpTotalInQuoteTokenBigNumber = bignumber_.BigNumber.from(lpTotalInQuoteToken);
    if (lpTotalSupplyAsBigNumber.gt(0) && lpTotalInQuoteTokenBigNumber.gt(0)) {
        // Total value of base token in LP
        const valueOfBaseTokenInFarm = tokenPriceBusd.mulUnsafe(tokenAmountTotal);
        // Double it to get overall value in LP
        const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.mulUnsafe(FIXED_TWO);
        // Divide total value of all tokens, by the number of LP tokens
        const totalLpTokens = lpTotalSupply.divUnsafe(FIXED_TEN_IN_POWER_18);
        lpTokenPrice = overallValueOfAllTokensInFarm.divUnsafe(totalLpTokens);
    }
    return lpTokenPrice;
};
const getFarmsPrices = (farms, chainId)=>{
    if (!nativeStableLpMap[chainId]) {
        throw new Error(`chainId ${chainId} not supported`);
    }
    const nativeStableFarm = farms.find((farm)=>equalsIgnoreCase(farm.lpAddress, nativeStableLpMap[chainId].address));
    const nativePriceUSD = toNumber_default()(nativeStableFarm?.tokenPriceVsQuote) !== 0 ? FIXED_ONE.divUnsafe(bignumber_.FixedNumber.from(nativeStableFarm.tokenPriceVsQuote)) : FIXED_ZERO;
    const farmsWithPrices = farms.map((farm)=>{
        const quoteTokenFarm = getFarmFromTokenAddress(farms, farm.quoteToken.address, [
            nativeStableLpMap[chainId].wNative,
            nativeStableLpMap[chainId].stable, 
        ]);
        const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, nativePriceUSD, nativeStableLpMap[chainId].wNative, nativeStableLpMap[chainId].stable);
        const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, nativePriceUSD, nativeStableLpMap[chainId].wNative, nativeStableLpMap[chainId].stable, quoteTokenPriceBusd);
        const lpTokenPrice = farm?.stableSwapAddress ? getStableLpTokenPrice(bignumber_.FixedNumber.from(farm.lpTotalSupply), bignumber_.FixedNumber.from(farm.tokenAmountTotal), tokenPriceBusd, bignumber_.FixedNumber.from(farm.quoteTokenAmountTotal), // Assume token is busd, tokenPriceBusd is tokenPriceVsQuote
        bignumber_.FixedNumber.from(farm.tokenPriceVsQuote)) : getLpTokenPrice(bignumber_.FixedNumber.from(farm.lpTotalSupply), bignumber_.FixedNumber.from(farm.lpTotalInQuoteToken), bignumber_.FixedNumber.from(farm.tokenAmountTotal), tokenPriceBusd);
        return {
            ...farm,
            tokenPriceBusd: tokenPriceBusd.toString(),
            quoteTokenPriceBusd: quoteTokenPriceBusd.toString(),
            lpTokenPrice: lpTokenPrice.toString()
        };
    });
    return farmsWithPrices;
};
const nativeStableLpMap = {
    [dist.ChainId.ETHEREUM]: {
        address: "0x2E8135bE71230c6B1B4045696d41C09Db0414226",
        wNative: "WETH",
        stable: "USDC"
    },
    [dist.ChainId.GOERLI]: {
        address: "0xf5bf0C34d3c428A74Ceb98d27d38d0036C587200",
        wNative: "WETH",
        stable: "tUSDC"
    },
    [dist.ChainId.BSC]: {
        address: "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16",
        wNative: "WBNB",
        stable: "BUSD"
    },
    [dist.ChainId.BSC_TESTNET]: {
        address: "0x4E96D2e92680Ca65D58A0e2eB5bd1c0f44cAB897",
        wNative: "WBNB",
        stable: "BUSD"
    }
};

// EXTERNAL MODULE: external "lodash/chunk"
var chunk_ = __webpack_require__(90221);
var chunk_default = /*#__PURE__*/__webpack_require__.n(chunk_);
;// CONCATENATED MODULE: ../../packages/farms/src/fetchPublicFarmData.ts



const abi = [
    {
        constant: true,
        inputs: [
            {
                name: "_owner",
                type: "address"
            }, 
        ],
        name: "balanceOf",
        outputs: [
            {
                name: "balance",
                type: "uint256"
            }, 
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    },
    {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                name: "",
                type: "uint256"
            }, 
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
    }, 
];
const fetchFarmCalls = (farm, masterChefAddress, vaultAddress)=>{
    const { lpAddress , token , quoteToken  } = farm;
    return [
        // Balance of token in the LP contract
        {
            address: token.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of quote token on LP contract
        {
            address: quoteToken.address,
            name: "balanceOf",
            params: [
                lpAddress
            ]
        },
        // Balance of LP tokens in the master chef contract
        {
            address: lpAddress,
            name: "balanceOf",
            params: [
                vaultAddress || masterChefAddress
            ]
        },
        // Total supply of LP tokens
        {
            address: lpAddress,
            name: "totalSupply"
        }, 
    ];
};
const fetchPublicFarmsData = async (farms, chainId = dist.ChainId.BSC, multicall, masterChefAddress)=>{
    try {
        const farmCalls = farms.flatMap((farm)=>fetchFarmCalls(farm, masterChefAddress, nonBSCVaultAddresses[chainId]));
        const chunkSize = farmCalls.length / farms.length;
        const farmMultiCallResult = await multicall({
            abi,
            calls: farmCalls,
            chainId
        });
        return chunk_default()(farmMultiCallResult, chunkSize);
    } catch (error) {
        console.error("MasterChef Public Data error ", error);
        throw error;
    }
};

;// CONCATENATED MODULE: ../../packages/farms/src/fetchStableFarmData.ts



const stableSwapAbi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        name: "coins",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        name: "balances",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "i",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "j",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "dx",
                type: "uint256"
            }, 
        ],
        name: "get_dy",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    }, 
];
async function fetchStableFarmData(farms, chainId = dist.ChainId.BSC, multicallv2) {
    const calls = farms.flatMap((f)=>[
            {
                address: f.stableSwapAddress,
                name: "balances",
                params: [
                    0
                ]
            },
            {
                address: f.stableSwapAddress,
                name: "balances",
                params: [
                    1
                ]
            },
            {
                address: f.stableSwapAddress,
                name: "get_dy",
                params: [
                    0,
                    1,
                    (0,units_.parseUnits)("1", f.token.decimals)
                ]
            },
            {
                address: f.stableSwapAddress,
                name: "get_dy",
                params: [
                    1,
                    0,
                    (0,units_.parseUnits)("1", f.quoteToken.decimals)
                ]
            }, 
        ]);
    const chunkSize = calls.length / farms.length;
    const results = await multicallv2({
        abi: stableSwapAbi,
        calls,
        chainId
    });
    return chunk_default()(results, chunkSize);
}

// EXTERNAL MODULE: ../../packages/farms/src/types.ts
var types = __webpack_require__(26626);
;// CONCATENATED MODULE: ../../packages/farms/src/fetchFarms.ts









const getTokenAmount = (balance, decimals)=>{
    const tokenDividerFixed = bignumber_.FixedNumber.from(getFullDecimalMultiplier(decimals));
    return balance.divUnsafe(tokenDividerFixed);
};
async function farmV2FetchFarms({ farms , multicallv2 , isTestnet , masterChefAddress , chainId , totalRegularAllocPoint , totalSpecialAllocPoint  }) {
    const stableFarms = farms.filter(types/* isStableFarm */.x);
    const [stableFarmsResults, poolInfos, lpDataResults] = await Promise.all([
        fetchStableFarmData(stableFarms, chainId, multicallv2),
        fetchMasterChefData(farms, isTestnet, multicallv2, masterChefAddress),
        fetchPublicFarmsData(farms, chainId, multicallv2, masterChefAddress), 
    ]);
    const stableFarmsData = stableFarmsResults.map(formatStableFarm);
    const stableFarmsDataMap = stableFarms.reduce((map, farm, index)=>{
        return {
            ...map,
            [farm.pid]: stableFarmsData[index]
        };
    }, {});
    const lpData = lpDataResults.map(formatClassicFarmResponse);
    const farmsData = farms.map((farm, index)=>{
        try {
            return {
                ...farm,
                ...stableFarmsDataMap[farm.pid] ? getStableFarmDynamicData({
                    ...lpData[index],
                    ...stableFarmsDataMap[farm.pid],
                    token0Decimals: farm.token.decimals,
                    token1Decimals: farm.quoteToken.decimals,
                    price1: stableFarmsDataMap[farm.pid].price1
                }) : getClassicFarmsDynamicData({
                    ...lpData[index],
                    ...stableFarmsDataMap[farm.pid],
                    token0Decimals: farm.token.decimals,
                    token1Decimals: farm.quoteToken.decimals
                }),
                ...getFarmAllocation({
                    allocPoint: poolInfos[index]?.allocPoint,
                    isRegular: poolInfos[index]?.isRegular,
                    totalRegularAllocPoint,
                    totalSpecialAllocPoint
                })
            };
        } catch (error) {
            console.error(error, farm, index, {
                allocPoint: poolInfos[index]?.allocPoint,
                isRegular: poolInfos[index]?.isRegular,
                token0Decimals: farm.token.decimals,
                token1Decimals: farm.quoteToken.decimals,
                totalRegularAllocPoint,
                totalSpecialAllocPoint
            });
            throw error;
        }
    });
    const farmsDataWithPrices = getFarmsPrices(farmsData, chainId);
    return farmsDataWithPrices;
}
const masterChefV2Abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        name: "poolInfo",
        outputs: [
            {
                internalType: "uint256",
                name: "accCakePerShare",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "lastRewardBlock",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "totalBoostedShare",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "isRegular",
                type: "bool"
            }, 
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "poolLength",
        outputs: [
            {
                internalType: "uint256",
                name: "pools",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalRegularAllocPoint",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSpecialAllocPoint",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bool",
                name: "_isRegular",
                type: "bool"
            }
        ],
        name: "cakePerBlock",
        outputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    }, 
];
const masterChefFarmCalls = (farm, masterChefAddress)=>{
    const { pid  } = farm;
    return pid || pid === 0 ? {
        address: masterChefAddress,
        name: "poolInfo",
        params: [
            pid
        ]
    } : null;
};
const fetchMasterChefData = async (farms, isTestnet, multicallv2, masterChefAddress)=>{
    try {
        const masterChefCalls = farms.map((farm)=>masterChefFarmCalls(farm, masterChefAddress));
        const masterChefAggregatedCalls = masterChefCalls.filter((masterChefCall)=>masterChefCall !== null);
        const masterChefMultiCallResult = await multicallv2({
            abi: masterChefV2Abi,
            calls: masterChefAggregatedCalls,
            chainId: isTestnet ? dist.ChainId.BSC_TESTNET : dist.ChainId.BSC
        });
        let masterChefChunkedResultCounter = 0;
        return masterChefCalls.map((masterChefCall)=>{
            if (masterChefCall === null) {
                return null;
            }
            const data = masterChefMultiCallResult[masterChefChunkedResultCounter];
            masterChefChunkedResultCounter++;
            return data;
        });
    } catch (error) {
        console.error("MasterChef Pool info data error", error);
        throw error;
    }
};
const fetchMasterChefV2Data = async ({ isTestnet , multicallv2 , masterChefAddress  })=>{
    try {
        const [[poolLength], [totalRegularAllocPoint], [totalSpecialAllocPoint], [cakePerBlock]] = await multicallv2({
            abi: masterChefV2Abi,
            calls: [
                {
                    address: masterChefAddress,
                    name: "poolLength"
                },
                {
                    address: masterChefAddress,
                    name: "totalRegularAllocPoint"
                },
                {
                    address: masterChefAddress,
                    name: "totalSpecialAllocPoint"
                },
                {
                    address: masterChefAddress,
                    name: "cakePerBlock",
                    params: [
                        true
                    ]
                }, 
            ],
            chainId: isTestnet ? dist.ChainId.BSC_TESTNET : dist.ChainId.BSC
        });
        return {
            poolLength,
            totalRegularAllocPoint,
            totalSpecialAllocPoint,
            cakePerBlock
        };
    } catch (error) {
        console.error("Get MasterChef data error", error);
        throw error;
    }
};
const formatStableFarm = (stableFarmData)=>{
    const [balance1, balance2, _, _price1] = stableFarmData;
    return {
        tokenBalanceLP: bignumber_.FixedNumber.from(balance1[0]),
        quoteTokenBalanceLP: bignumber_.FixedNumber.from(balance2[0]),
        price1: _price1[0]
    };
};
const getStableFarmDynamicData = ({ lpTokenBalanceMC , lpTotalSupply , quoteTokenBalanceLP , tokenBalanceLP , token0Decimals , token1Decimals , price1  })=>{
    // Raw amount of token in the LP, including those not staked
    const tokenAmountTotal = getTokenAmount(tokenBalanceLP, token0Decimals);
    const quoteTokenAmountTotal = getTokenAmount(quoteTokenBalanceLP, token1Decimals);
    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation
    const lpTokenRatio = !lpTotalSupply.isZero() && !lpTokenBalanceMC.isZero() ? lpTokenBalanceMC.divUnsafe(lpTotalSupply) : FIXED_ZERO;
    const tokenPriceVsQuote = (0,units_.formatUnits)(price1, token1Decimals);
    // Amount of quoteToken in the LP that are staked in the MC
    const quoteTokenAmountMcFixed = quoteTokenAmountTotal.mulUnsafe(lpTokenRatio);
    // Amount of token in the LP that are staked in the MC
    const tokenAmountMcFixed = tokenAmountTotal.mulUnsafe(lpTokenRatio);
    const quoteTokenAmountMcFixedByTokenAmount = tokenAmountMcFixed.mulUnsafe(bignumber_.FixedNumber.from(tokenPriceVsQuote));
    const lpTotalInQuoteToken = quoteTokenAmountMcFixed.addUnsafe(quoteTokenAmountMcFixedByTokenAmount);
    return {
        tokenAmountTotal: tokenAmountTotal.toString(),
        quoteTokenAmountTotal: quoteTokenAmountTotal.toString(),
        lpTotalSupply: lpTotalSupply.toString(),
        lpTotalInQuoteToken: lpTotalInQuoteToken.toString(),
        tokenPriceVsQuote
    };
};
const formatClassicFarmResponse = (farmData)=>{
    const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply] = farmData;
    return {
        tokenBalanceLP: bignumber_.FixedNumber.from(tokenBalanceLP[0]),
        quoteTokenBalanceLP: bignumber_.FixedNumber.from(quoteTokenBalanceLP[0]),
        lpTokenBalanceMC: bignumber_.FixedNumber.from(lpTokenBalanceMC[0]),
        lpTotalSupply: bignumber_.FixedNumber.from(lpTotalSupply[0])
    };
};
const getFarmAllocation = ({ allocPoint , isRegular , totalRegularAllocPoint , totalSpecialAllocPoint  })=>{
    const _allocPoint = allocPoint ? bignumber_.FixedNumber.from(allocPoint) : FIXED_ZERO;
    const totalAlloc = isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint;
    const poolWeight = !totalAlloc.isZero() && !_allocPoint.isZero() ? _allocPoint.divUnsafe(bignumber_.FixedNumber.from(totalAlloc)) : FIXED_ZERO;
    return {
        poolWeight: poolWeight.toString(),
        multiplier: !_allocPoint.isZero() ? `${+_allocPoint.divUnsafe(bignumber_.FixedNumber.from(100)).toString()}X` : `0X`
    };
};
const getClassicFarmsDynamicData = ({ lpTokenBalanceMC , lpTotalSupply , quoteTokenBalanceLP , tokenBalanceLP , token0Decimals , token1Decimals  })=>{
    // Raw amount of token in the LP, including those not staked
    const tokenAmountTotal = getTokenAmount(tokenBalanceLP, token0Decimals);
    const quoteTokenAmountTotal = getTokenAmount(quoteTokenBalanceLP, token1Decimals);
    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation
    const lpTokenRatio = !lpTotalSupply.isZero() && !lpTokenBalanceMC.isZero() ? lpTokenBalanceMC.divUnsafe(lpTotalSupply) : FIXED_ZERO;
    // // Amount of quoteToken in the LP that are staked in the MC
    const quoteTokenAmountMcFixed = quoteTokenAmountTotal.mulUnsafe(lpTokenRatio);
    // // Total staked in LP, in quote token value
    const lpTotalInQuoteToken = quoteTokenAmountMcFixed.mulUnsafe(FIXED_TWO);
    return {
        tokenAmountTotal: tokenAmountTotal.toString(),
        quoteTokenAmountTotal: quoteTokenAmountTotal.toString(),
        lpTotalSupply: lpTotalSupply.toString(),
        lpTotalInQuoteToken: lpTotalInQuoteToken.toString(),
        tokenPriceVsQuote: !quoteTokenAmountTotal.isZero() && !tokenAmountTotal.isZero() ? quoteTokenAmountTotal.divUnsafe(tokenAmountTotal).toString() : FIXED_ZERO.toString()
    };
};

;// CONCATENATED MODULE: ../../packages/farms/src/index.ts





const supportedChainId = [
    dist.ChainId.GOERLI,
    dist.ChainId.BSC,
    dist.ChainId.BSC_TESTNET,
    dist.ChainId.ETHEREUM
];
const bCakeSupportedChainId = [
    dist.ChainId.BSC,
    dist.ChainId.BSC_TESTNET
];
function createFarmFetcher(multicallv2) {
    const fetchFarms = async (params)=>{
        const { isTestnet , farms , chainId  } = params;
        const masterChefAddress = isTestnet ? masterChefAddresses[dist.ChainId.BSC_TESTNET] : masterChefAddresses[dist.ChainId.BSC];
        const { poolLength , totalRegularAllocPoint , totalSpecialAllocPoint , cakePerBlock  } = await fetchMasterChefV2Data({
            isTestnet,
            multicallv2,
            masterChefAddress
        });
        const regularCakePerBlock = (0,units_.formatEther)(cakePerBlock);
        const farmsWithPrice = await farmV2FetchFarms({
            multicallv2,
            masterChefAddress,
            isTestnet,
            chainId,
            farms: farms.filter((f)=>!f.pid || poolLength.gt(f.pid)),
            totalRegularAllocPoint,
            totalSpecialAllocPoint
        });
        return {
            farmsWithPrice,
            poolLength: poolLength.toNumber(),
            regularCakePerBlock: +regularCakePerBlock
        };
    };
    return {
        fetchFarms,
        isChainSupported: (chainId)=>supportedChainId.includes(chainId),
        supportedChainId,
        isTestnet: (chainId)=>![
                dist.ChainId.BSC,
                dist.ChainId.ETHEREUM
            ].includes(chainId)
    };
}






/***/ }),

/***/ 26626:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ isStableFarm)
/* harmony export */ });
function isStableFarm(farmConfig) {
    return "stableSwapAddress" in farmConfig && typeof farmConfig.stableSwapAddress === "string";
}


/***/ }),

/***/ 92764:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$8": () => (/* binding */ addList),
/* harmony export */   "Dn": () => (/* binding */ fetchTokenList),
/* harmony export */   "J_": () => (/* binding */ removeList),
/* harmony export */   "K$": () => (/* binding */ disableList),
/* harmony export */   "Lr": () => (/* binding */ updateListVersion),
/* harmony export */   "ic": () => (/* binding */ enableList),
/* harmony export */   "xJ": () => (/* binding */ acceptListUpdate)
/* harmony export */ });
/* unused harmony export rejectVersionUpdate */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);

const fetchTokenList = {
    pending: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/fetchTokenList/pending"),
    fulfilled: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/fetchTokenList/fulfilled"),
    rejected: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/fetchTokenList/rejected")
};
// add and remove from list options
const addList = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/addList");
const removeList = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/removeList");
// select which lists to search across from loaded lists
const enableList = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/enableList");
const disableList = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/disableList");
// versioning
const acceptListUpdate = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/acceptListUpdate");
const rejectVersionUpdate = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/rejectVersionUpdate");
const updateListVersion = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)("lists/updateListVersion");


/***/ }),

/***/ 3256:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DT": () => (/* reexport safe */ _wrappedTokenInfo__WEBPACK_IMPORTED_MODULE_4__.D),
/* harmony export */   "J_": () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.J_),
/* harmony export */   "K$": () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.K$),
/* harmony export */   "Pu": () => (/* reexport safe */ _reducer__WEBPACK_IMPORTED_MODULE_0__.P),
/* harmony export */   "g6": () => (/* reexport safe */ _reducer__WEBPACK_IMPORTED_MODULE_0__.g),
/* harmony export */   "iG": () => (/* reexport safe */ _wrappedTokenInfo__WEBPACK_IMPORTED_MODULE_4__.i),
/* harmony export */   "ic": () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ic),
/* harmony export */   "jn": () => (/* reexport safe */ _useFetchListCallback__WEBPACK_IMPORTED_MODULE_3__.Z),
/* harmony export */   "jy": () => (/* reexport safe */ _lists__WEBPACK_IMPORTED_MODULE_2__.j),
/* harmony export */   "xJ": () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.xJ)
/* harmony export */ });
/* harmony import */ var _reducer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25443);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92764);
/* harmony import */ var _lists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27608);
/* harmony import */ var _useFetchListCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79633);
/* harmony import */ var _wrappedTokenInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26168);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lists__WEBPACK_IMPORTED_MODULE_2__]);
_lists__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];






__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 27608:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "j": () => (/* binding */ createListsAtom)
/* harmony export */ });
/* harmony import */ var jotai_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2752);
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3182);
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(localforage__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98936);
/* harmony import */ var redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_2__);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jotai_utils__WEBPACK_IMPORTED_MODULE_0__]);
jotai_utils__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];



const createListsAtom = (storeName, reducer, initialState)=>{
    let gotOnce = false;
    /**
   * Persist you redux state using IndexedDB
   * @param {string} dbName - IndexedDB database name
   */ function IndexedDBStorage(dbName) {
        if (false) {}
        return (redux_persist_lib_storage__WEBPACK_IMPORTED_MODULE_2___default());
    }
    const listsAtom = (0,jotai_utils__WEBPACK_IMPORTED_MODULE_0__.atomWithStorage)("lists", initialState, // @ts-ignore
    IndexedDBStorage("lists"));
    function useListState() {
        return (0,jotai_utils__WEBPACK_IMPORTED_MODULE_0__.useReducerAtom)(listsAtom, reducer);
    }
    return {
        listsAtom,
        useListState
    };
};

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ 25443:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => (/* binding */ NEW_LIST_STATE),
/* harmony export */   "g": () => (/* binding */ createTokenListReducer)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _uniswap_token_lists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51554);
/* harmony import */ var _uniswap_token_lists__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_uniswap_token_lists__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92764);


// import { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS, DEFAULT_LIST_OF_LISTS } from '../../config/constants/lists'
// import { updateVersion } from '../global/actions'

const NEW_LIST_STATE = {
    error: null,
    current: null,
    loadingRequestId: null,
    pendingUpdate: null
};
const createTokenListReducer = (initialState, DEFAULT_LIST_OF_LISTS, DEFAULT_ACTIVE_LIST_URLS)=>(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createReducer)(initialState, (builder)=>builder.addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.pending */ .Dn.pending, (state, { payload: { requestId , url  }  })=>{
            const current = state.byUrl[url]?.current ?? null;
            const pendingUpdate = state.byUrl[url]?.pendingUpdate ?? null;
            state.byUrl[url] = {
                current,
                pendingUpdate,
                loadingRequestId: requestId,
                error: null
            };
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.fulfilled */ .Dn.fulfilled, (state, { payload: { requestId , tokenList , url  }  })=>{
            const current = state.byUrl[url]?.current;
            const loadingRequestId = state.byUrl[url]?.loadingRequestId;
            // no-op if update does nothing
            if (current) {
                const upgradeType = (0,_uniswap_token_lists__WEBPACK_IMPORTED_MODULE_1__.getVersionUpgrade)(current.version, tokenList.version);
                if (upgradeType === _uniswap_token_lists__WEBPACK_IMPORTED_MODULE_1__.VersionUpgrade.NONE) return;
                if (loadingRequestId === null || loadingRequestId === requestId) {
                    state.byUrl[url] = {
                        ...state.byUrl[url],
                        loadingRequestId: null,
                        error: null,
                        current,
                        pendingUpdate: tokenList
                    };
                }
            } else {
                // activate if on default active
                if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {
                    state.activeListUrls?.push(url);
                }
                state.byUrl[url] = {
                    ...state.byUrl[url],
                    loadingRequestId: null,
                    error: null,
                    current: tokenList,
                    pendingUpdate: null
                };
            }
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.rejected */ .Dn.rejected, (state, { payload: { url , requestId , errorMessage  }  })=>{
            if (state.byUrl[url]?.loadingRequestId !== requestId) {
                // no-op since it's not the latest request
                return;
            }
            state.byUrl[url] = {
                ...state.byUrl[url],
                loadingRequestId: null,
                error: errorMessage,
                current: null,
                pendingUpdate: null
            };
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .addList */ .$8, (state, { payload: url  })=>{
            if (!state.byUrl[url]) {
                state.byUrl[url] = NEW_LIST_STATE;
            }
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .removeList */ .J_, (state, { payload: url  })=>{
            if (state.byUrl[url]) {
                delete state.byUrl[url];
            }
            // remove list from active urls if needed
            if (state.activeListUrls && state.activeListUrls.includes(url)) {
                state.activeListUrls = state.activeListUrls.filter((u)=>u !== url);
            }
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .enableList */ .ic, (state, { payload: url  })=>{
            if (!state.byUrl[url]) {
                state.byUrl[url] = NEW_LIST_STATE;
            }
            if (state.activeListUrls && !state.activeListUrls.includes(url)) {
                state.activeListUrls.push(url);
            }
            if (!state.activeListUrls) {
                state.activeListUrls = [
                    url
                ];
            }
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .disableList */ .K$, (state, { payload: url  })=>{
            if (state.activeListUrls && state.activeListUrls.includes(url)) {
                state.activeListUrls = state.activeListUrls.filter((u)=>u !== url);
            }
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .acceptListUpdate */ .xJ, (state, { payload: url  })=>{
            if (!state.byUrl[url]?.pendingUpdate) {
                throw new Error("accept list update called without pending update");
            }
            state.byUrl[url] = {
                ...state.byUrl[url],
                pendingUpdate: null,
                current: state.byUrl[url].pendingUpdate
            };
        }).addCase(_actions__WEBPACK_IMPORTED_MODULE_2__/* .updateListVersion */ .Lr, (state)=>{
            // state loaded from localStorage, but new lists have never been initialized
            if (!state.lastInitializedDefaultListOfLists) {
                state.byUrl = initialState.byUrl;
                state.activeListUrls = initialState.activeListUrls;
            } else if (state.lastInitializedDefaultListOfLists) {
                const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l)=>s.add(l), new Set());
                const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce((s, l)=>s.add(l), new Set());
                DEFAULT_LIST_OF_LISTS.forEach((listUrl)=>{
                    if (!lastInitializedSet.has(listUrl)) {
                        state.byUrl[listUrl] = NEW_LIST_STATE;
                    }
                });
                state.lastInitializedDefaultListOfLists.forEach((listUrl)=>{
                    if (!newListOfListsSet.has(listUrl)) {
                        delete state.byUrl[listUrl];
                    }
                });
            }
            state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS;
            // if no active lists, activate defaults
            if (!state.activeListUrls) {
                state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS;
                // for each list on default list, initialize if needed
                DEFAULT_ACTIVE_LIST_URLS.forEach((listUrl)=>{
                    if (!state.byUrl[listUrl]) {
                        state.byUrl[listUrl] = NEW_LIST_STATE;
                    }
                    return true;
                });
            }
        }));


/***/ }),

/***/ 79633:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75184);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16689);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92764);



function useFetchListCallback(dispatch) {
    // note: prevent dispatch if using for list search or unsupported list
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (listUrl, sendDispatch = true)=>{
        const requestId = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.nanoid)();
        if (sendDispatch) {
            dispatch(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.pending */ .Dn.pending({
                requestId,
                url: listUrl
            }));
        }
        // lazy load avj and token list schema
        const getTokenList = (await Promise.all(/* import() */[__webpack_require__.e(4704), __webpack_require__.e(4126)]).then(__webpack_require__.bind(__webpack_require__, 4126))).default;
        return getTokenList(listUrl).then((tokenList)=>{
            if (sendDispatch) {
                dispatch(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.fulfilled */ .Dn.fulfilled({
                    url: listUrl,
                    tokenList,
                    requestId
                }));
            }
            return tokenList;
        }).catch((error)=>{
            console.error(`Failed to get list at url ${listUrl}`, error);
            if (sendDispatch) {
                dispatch(_actions__WEBPACK_IMPORTED_MODULE_2__/* .fetchTokenList.rejected */ .Dn.rejected({
                    url: listUrl,
                    requestId,
                    errorMessage: error.message
                }));
            }
            throw error;
        });
    }, [
        dispatch
    ]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useFetchListCallback);


/***/ }),

/***/ 26168:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ WrappedTokenInfo),
/* harmony export */   "i": () => (/* binding */ deserializeToken)
/* harmony export */ });
/* harmony import */ var _pancakeswap_swap_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46539);
/* harmony import */ var _pancakeswap_swap_sdk_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pancakeswap_swap_sdk_core__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Token instances created from token info.
 */ class WrappedTokenInfo extends _pancakeswap_swap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Token {
    constructor(tokenInfo){
        super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name);
        this.logoURI = tokenInfo.logoURI;
    }
    get serialize() {
        return {
            address: this.address,
            chainId: this.chainId,
            decimals: this.decimals,
            symbol: this.symbol,
            name: this.name,
            projectLink: this.projectLink,
            logoURI: this.logoURI
        };
    }
}
function deserializeToken(serializedToken) {
    if (serializedToken.logoURI) {
        return new WrappedTokenInfo({
            chainId: serializedToken.chainId,
            address: serializedToken.address,
            decimals: serializedToken.decimals,
            symbol: serializedToken.symbol || "Unknown",
            name: serializedToken.name || "Unknown",
            logoURI: serializedToken.logoURI
        });
    }
    return new _pancakeswap_swap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name, serializedToken.projectLink);
}


/***/ }),

/***/ 72502:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "lz": () => (/* reexport */ BUSD),
  "cr": () => (/* reexport */ CAKE),
  "rP": () => (/* reexport */ EMPTY_LIST),
  "gn": () => (/* reexport */ USDC),
  "AA": () => (/* reexport */ USDT),
  "Zn": () => (/* reexport */ WBTC_ETH),
  "dI": () => (/* reexport */ bscTestnetTokens),
  "ds": () => (/* reexport */ bscTokens),
  "uR": () => (/* reexport */ ethereumTokens),
  "On": () => (/* reexport */ goerliTestnetTokens)
});

// UNUSED EXPORTS: BUSD_BSC, BUSD_ETH, BUSD_GOERLI, BUSD_RINKEBY, BUSD_TESTNET, CAKE_MAINNET, CAKE_TESTNET, USDC_BSC, USDC_ETH, USDC_GOERLI, USDC_RINKEBY, USDC_TESTNET, USDT_BSC, USDT_ETH, serializeTokens

// EXTERNAL MODULE: ../../packages/swap-sdk/dist/index.js
var dist = __webpack_require__(43086);
;// CONCATENATED MODULE: ../../packages/tokens/src/common.ts

const CAKE_MAINNET = new dist.ERC20Token(dist.ChainId.BSC, "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82", 18, "CAKE", "PancakeSwap Token", "https://pancakeswap.finance/");
const CAKE_TESTNET = new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0xFa60D973F7642B748046464e165A65B7323b0DEE", 18, "CAKE", "PancakeSwap Token", "https://pancakeswap.finance/");
const USDC_BSC = new dist.ERC20Token(dist.ChainId.BSC, "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d", 18, "USDC", "Binance-Peg USD Coin", "https://www.centre.io/usdc");
const USDC_TESTNET = new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0x64544969ed7EBf5f083679233325356EbE738930", 18, "USDC", "Binance-Peg USD Coin", "https://www.centre.io/usdc");
const USDC_ETH = new dist.ERC20Token(dist.ChainId.ETHEREUM, "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", 6, "USDC", "USD Coin");
const USDC_RINKEBY = new dist.ERC20Token(dist.ChainId.RINKEBY, "0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b", 6, "tUSDC", "test USD Coin");
const USDC_GOERLI = new dist.ERC20Token(dist.ChainId.GOERLI, "0x07865c6E87B9F70255377e024ace6630C1Eaa37F", 6, "tUSDC", "test USD Coin");
const USDT_BSC = new dist.ERC20Token(dist.ChainId.BSC, "0x55d398326f99059fF775485246999027B3197955", 18, "USDT", "Tether USD", "https://tether.to/");
const USDT_ETH = new dist.ERC20Token(dist.ChainId.ETHEREUM, "0xdAC17F958D2ee523a2206206994597C13D831ec7", 6, "USDT", "Tether USD", "https://tether.to/");
const BUSD_BSC = new dist.ERC20Token(dist.ChainId.BSC, "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56", 18, "BUSD", "Binance USD", "https://www.paxos.com/busd/");
const BUSD_TESTNET = new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814", 18, "BUSD", "Binance USD", "https://www.paxos.com/busd/");
const BUSD_ETH = new dist.ERC20Token(dist.ChainId.ETHEREUM, "0x4Fabb145d64652a948d72533023f6E7A623C7C53", 18, "BUSD", "Binance USD", "https://www.paxos.com/busd/");
const BUSD_RINKEBY = new dist.ERC20Token(dist.ChainId.RINKEBY, "0x4e2442A6f7AeCE64Ca33d31756B5390860BF973E", 18, "BUSD", "Binance USD", "https://www.paxos.com/busd/");
const BUSD_GOERLI = new dist.ERC20Token(dist.ChainId.GOERLI, "0xb809b9B2dc5e93CB863176Ea2D565425B03c0540", 18, "BUSD", "Binance USD", "https://www.paxos.com/busd/");
const BUSD = {
    [dist.ChainId.ETHEREUM]: BUSD_ETH,
    [dist.ChainId.RINKEBY]: BUSD_RINKEBY,
    [dist.ChainId.GOERLI]: BUSD_GOERLI,
    [dist.ChainId.BSC]: BUSD_BSC,
    [dist.ChainId.BSC_TESTNET]: BUSD_TESTNET
};
const CAKE = {
    [dist.ChainId.BSC]: CAKE_MAINNET,
    [dist.ChainId.BSC_TESTNET]: CAKE_TESTNET
};
const USDC = {
    [dist.ChainId.BSC]: USDC_BSC,
    [dist.ChainId.BSC_TESTNET]: USDC_TESTNET,
    [dist.ChainId.ETHEREUM]: USDC_ETH,
    [dist.ChainId.RINKEBY]: USDC_RINKEBY,
    [dist.ChainId.GOERLI]: USDC_GOERLI
};
const USDT = {
    [dist.ChainId.BSC]: USDT_BSC,
    [dist.ChainId.ETHEREUM]: USDT_ETH
};
const WBTC_ETH = new dist.ERC20Token(dist.ChainId.ETHEREUM, "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599", 8, "WBTC", "Wrapped BTC");

;// CONCATENATED MODULE: ../../packages/tokens/src/helpers.ts

/**
 * An empty result, useful as a default.
 */ const EMPTY_LIST = {
    [dist.ChainId.ETHEREUM]: {},
    [dist.ChainId.RINKEBY]: {},
    [dist.ChainId.GOERLI]: {},
    [dist.ChainId.BSC]: {},
    [dist.ChainId.BSC_TESTNET]: {}
};
function serializeTokens(unserializedTokens) {
    const serializedTokens = Object.keys(unserializedTokens).reduce((accum, key)=>{
        return {
            ...accum,
            [key]: unserializedTokens[key].serialize
        };
    }, {});
    return serializedTokens;
}

;// CONCATENATED MODULE: ../../packages/tokens/src/5.ts


const goerliTestnetTokens = {
    weth: dist.WETH9[dist.ChainId.GOERLI],
    celr: new dist.ERC20Token(dist.ChainId.GOERLI, "0x5D3c0F4cA5EE99f8E8F59Ff9A5fAb04F6a7e007f", 18, "CELR", "CelerToken", ""),
    leet: new dist.ERC20Token(dist.ChainId.GOERLI, "0xBd509651E6374c327d24b9d7E3Ea46704f6F31E8", 18, "LEET", "Leet Token", ""),
    usdc: USDC_GOERLI
};

;// CONCATENATED MODULE: ../../packages/tokens/src/56.ts


const bscTokens = {
    wbnb: dist.WBNB[dist.ChainId.BSC],
    // bnb here points to the wbnb contract. Wherever the currency BNB is required, conditional checks for the symbol 'BNB' can be used
    bnb: new dist.ERC20Token(dist.ChainId.BSC, "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c", 18, "BNB", "BNB", "https://www.binance.com/"),
    cake: CAKE_MAINNET,
    gmi: new dist.ERC20Token(dist.ChainId.BSC, "0x93D8d25E3C9A847a5Da79F79ecaC89461FEcA846", 18, "GMI", "Gamifi", "https://gamifi.gg/"),
    tlos: new dist.ERC20Token(dist.ChainId.BSC, "0xb6C53431608E626AC81a9776ac3e999c5556717c", 18, "TLOS", "Telos", "https://www.telos.net/"),
    beta: new dist.ERC20Token(dist.ChainId.BSC, "0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28", 18, "BETA", "Beta Finance", "https://betafinance.org"),
    nft: new dist.ERC20Token(dist.ChainId.BSC, "0x1fC9004eC7E5722891f5f38baE7678efCB11d34D", 6, "NFT", "APENFT", "https://apenft.org"),
    stephero: new dist.ERC20Token(dist.ChainId.BSC, "0xE8176d414560cFE1Bf82Fd73B986823B89E4F545", 18, "HERO", "StepHero", "https://stephero.io/"),
    pros: new dist.ERC20Token(dist.ChainId.BSC, "0xEd8c8Aa8299C10f067496BB66f8cC7Fb338A3405", 18, "PROS", "Prosper", "https://prosper.so/"),
    qbt: new dist.ERC20Token(dist.ChainId.BSC, "0x17B7163cf1Dbd286E262ddc68b553D899B93f526", 18, "QBT", "Qubit Token", "https://qbt.fi/"),
    cvp: new dist.ERC20Token(dist.ChainId.BSC, "0x5Ec3AdBDae549Dce842e24480Eb2434769e22B2E", 18, "CVP", "Concentrated Voting Power Token", "https://powerpool.finance/"),
    bscdefi: new dist.ERC20Token(dist.ChainId.BSC, "0x40E46dE174dfB776BB89E04dF1C47d8a66855EB3", 18, "BSCDEFI", "ChainId.BSC Defi blue chips token", "https://powerpool.finance/"),
    busd: BUSD_BSC,
    dai: new dist.ERC20Token(dist.ChainId.BSC, "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3", 18, "DAI", "Dai Stablecoin", "https://www.makerdao.com/"),
    usdt: USDT_BSC,
    btcb: new dist.ERC20Token(dist.ChainId.BSC, "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c", 18, "BTCB", "Binance BTC", "https://bitcoin.org/"),
    ust: new dist.ERC20Token(dist.ChainId.BSC, "0x23396cF899Ca06c4472205fC903bDB4de249D6fC", 18, "UST", "Wrapped UST Token", "https://mirror.finance/"),
    eth: new dist.ERC20Token(dist.ChainId.BSC, "0x2170Ed0880ac9A755fd29B2688956BD959F933F8", 18, "ETH", "Binance-Peg Ethereum Token", "https://ethereum.org/en/"),
    usdc: new dist.ERC20Token(dist.ChainId.BSC, "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d", 18, "USDC", "Binance-Peg USD Coin", "https://www.centre.io/usdc"),
    kalm: new dist.ERC20Token(dist.ChainId.BSC, "0x4BA0057f784858a48fe351445C672FF2a3d43515", 18, "KALM", "Kalmar Token", "https://kalmar.io/"),
    dkt: new dist.ERC20Token(dist.ChainId.BSC, "0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7", 18, "DKT", "Duelist King", "https://duelistking.com/"),
    hotcross: new dist.ERC20Token(dist.ChainId.BSC, "0x4FA7163E153419E0E1064e418dd7A99314Ed27b6", 18, "HOTCROSS", "Hotcross Token", "https://www.hotcross.com/"),
    belt: new dist.ERC20Token(dist.ChainId.BSC, "0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f", 18, "BELT", "Belt Token", "https://beta.belt.fi/"),
    watch: new dist.ERC20Token(dist.ChainId.BSC, "0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0", 18, "WATCH", "Yieldwatch Token", "https://yieldwatch.net/"),
    bry: new dist.ERC20Token(dist.ChainId.BSC, "0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830", 18, "BRY", "Berry Token", "https://berrydata.co/"),
    wsote: new dist.ERC20Token(dist.ChainId.BSC, "0x541E619858737031A1244A5d0Cd47E5ef480342c", 18, "wSOTE", "Soteria Token", "https://soteria.finance/"),
    helmet: new dist.ERC20Token(dist.ChainId.BSC, "0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8", 18, "Helmet", "Helmet Token", "https://www.helmet.insure/"),
    ten: new dist.ERC20Token(dist.ChainId.BSC, "0xdFF8cb622790b7F92686c722b02CaB55592f152C", 18, "TEN", "Tenet Token", "https://www.tenet.farm/"),
    ditto: new dist.ERC20Token(dist.ChainId.BSC, "0x233d91A0713155003fc4DcE0AFa871b508B3B715", 9, "DITTO", "Ditto Token", "https://ditto.money/"),
    blink: new dist.ERC20Token(dist.ChainId.BSC, "0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F", 6, "BLINK", "Blink Token", "https://blink.wink.org"),
    syrup: new dist.ERC20Token(dist.ChainId.BSC, "0x009cF7bC57584b7998236eff51b98A168DceA9B0", 18, "SYRUP", "SyrupBar Token", "https://pancakeswap.finance/"),
    pha: new dist.ERC20Token(dist.ChainId.BSC, "0x0112e557d400474717056C4e6D40eDD846F38351", 18, "PHA", "Phala Token", "https://phala.network"),
    babycake: new dist.ERC20Token(dist.ChainId.BSC, "0xdB8D30b74bf098aF214e862C90E647bbB1fcC58c", 18, "BABYCAKE", "Baby Cake Token", "https://babycake.app/"),
    bmon: new dist.ERC20Token(dist.ChainId.BSC, "0x08ba0619b1e7A582E0BCe5BBE9843322C954C340", 18, "BMON", "Binamon Token", "https://binamon.org/"),
    hero: new dist.ERC20Token(dist.ChainId.BSC, "0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13", 18, "HERO", "Metahero Token", "https://metahero.io/"),
    wsg: new dist.ERC20Token(dist.ChainId.BSC, "0xA58950F05FeA2277d2608748412bf9F802eA4901", 18, "WSG", "Wall Street Games Token", "https://wsg.gg/"),
    mcrn: new dist.ERC20Token(dist.ChainId.BSC, "0xacb2d47827C9813AE26De80965845D80935afd0B", 18, "MCRN", "Macaronswap Token", "https://www.macaronswap.finance/"),
    revv: new dist.ERC20Token(dist.ChainId.BSC, "0x833F307aC507D47309fD8CDD1F835BeF8D702a93", 18, "REVV", "REVV Token", "https://revvmotorsport.com/"),
    skill: new dist.ERC20Token(dist.ChainId.BSC, "0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab", 18, "SKILL", "Cryptoblades Token", "https://www.cryptoblades.io/"),
    if: new dist.ERC20Token(dist.ChainId.BSC, "0xB0e1fc65C1a741b4662B813eB787d369b8614Af1", 18, "IF", "Impossible Finance Token", "https://impossible.finance/"),
    sps: new dist.ERC20Token(dist.ChainId.BSC, "0x1633b7157e7638C4d6593436111Bf125Ee74703F", 18, "SPS", "Splinterlands Token", "https://splinterlands.com"),
    chess: new dist.ERC20Token(dist.ChainId.BSC, "0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6", 18, "CHESS", "Chess Token", "https://tranchess.com/"),
    titan: new dist.ERC20Token(dist.ChainId.BSC, "0xe898EDc43920F357A93083F1d4460437dE6dAeC2", 18, "TITAN", "Titanswap Token", "https://titanswap.org"),
    harmony: new dist.ERC20Token(dist.ChainId.BSC, "0x03fF0ff224f904be3118461335064bB48Df47938", 18, "ONE", "Harmony ONE Token", "https://www.harmony.one/"),
    mask: new dist.ERC20Token(dist.ChainId.BSC, "0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3", 18, "MASK", "Mask Token", "https://mask.io/"),
    dvi: new dist.ERC20Token(dist.ChainId.BSC, "0x758FB037A375F17c7e195CC634D77dA4F554255B", 18, "DVI", "Dvision Network Token", "https://dvision.network/"),
    adx: new dist.ERC20Token(dist.ChainId.BSC, "0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819", 18, "ADX", "Adex Network Token", "https://www.adex.network"),
    bscpad: new dist.ERC20Token(dist.ChainId.BSC, "0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700", 18, "BSCPAD", "Bscpad Token", "https://bscpad.com/"),
    rabbit: new dist.ERC20Token(dist.ChainId.BSC, "0x95a1199EBA84ac5f19546519e287d43D2F0E1b41", 18, "RABBIT", "Rabbit Finance Token", "https://rabbitfinance.io/earn"),
    form: new dist.ERC20Token(dist.ChainId.BSC, "0x25A528af62e56512A19ce8c3cAB427807c28CC19", 18, "FORM", "Formation Token", "https://formation.fi/"),
    txl: new dist.ERC20Token(dist.ChainId.BSC, "0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5", 18, "TXL", "Tixl Token", "https://tixl.org/"),
    orbs: new dist.ERC20Token(dist.ChainId.BSC, "0xeBd49b26169e1b52c04cFd19FCf289405dF55F80", 18, "ORBS", "Orbs Token", "https://www.orbs.com/"),
    cos: new dist.ERC20Token(dist.ChainId.BSC, "0x96Dd399F9c3AFda1F194182F71600F1B65946501", 18, "COS", "Contentos Token", "https://www.contentos.io/"),
    bunny: new dist.ERC20Token(dist.ChainId.BSC, "0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51", 18, "BUNNY", "Pancakebunny Token", "https://pancakebunny.finance/"),
    alice: new dist.ERC20Token(dist.ChainId.BSC, "0xAC51066d7bEC65Dc4589368da368b212745d63E8", 6, "ALICE", "My Neighbor Alice Token", "https://www.myneighboralice.com/"),
    for: new dist.ERC20Token(dist.ChainId.BSC, "0x658A109C5900BC6d2357c87549B651670E5b0539", 18, "FOR", "Fortube Token", "https://www.for.tube/home"),
    bux: new dist.ERC20Token(dist.ChainId.BSC, "0x211FfbE424b90e25a15531ca322adF1559779E45", 18, "BUX", "Bux Crypto Token", "https://getbux.com/bux-crypto/"),
    nuls: new dist.ERC20Token(dist.ChainId.BSC, "0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B", 8, "NULS", "Nuls Token", "https://www.nuls.io/"),
    ramp: new dist.ERC20Token(dist.ChainId.BSC, "0x8519EA49c997f50cefFa444d240fB655e89248Aa", 18, "RAMP", "RAMP DEFI Token", "https://rampdefi.com/"),
    bfi: new dist.ERC20Token(dist.ChainId.BSC, "0x81859801b01764D4f0Fa5E64729f5a6C3b91435b", 18, "BFI", "bearn.fi Token", "https://bearn.fi/"),
    dexe: new dist.ERC20Token(dist.ChainId.BSC, "0x039cB485212f996A9DBb85A9a75d898F94d38dA6", 18, "DEXE", "DeXe Token", "https://dexe.network/"),
    bel: new dist.ERC20Token(dist.ChainId.BSC, "0x8443f091997f06a61670B735ED92734F5628692F", 18, "BEL", "Bella Protocol Token", "https://bella.fi/"),
    tpt: new dist.ERC20Token(dist.ChainId.BSC, "0xECa41281c24451168a37211F0bc2b8645AF45092", 4, "TPT", "Tokenpocket Token", "https://www.tokenpocket.pro/"),
    xmark: new dist.ERC20Token(dist.ChainId.BSC, "0x26A5dFab467d4f58fB266648CAe769503CEC9580", 9, "xMARK", "Benchmark Protocol Token", "https://benchmarkprotocol.finance/"),
    bmxx: new dist.ERC20Token(dist.ChainId.BSC, "0x4131b87F74415190425ccD873048C708F8005823", 18, "bMXX", "Multiplier Token", "https://multiplier.finance/"),
    iotx: new dist.ERC20Token(dist.ChainId.BSC, "0x9678E42ceBEb63F23197D726B29b1CB20d0064E5", 18, "IOTX", "Binance-Peg IoTeX Network Token", "https://iotex.io/"),
    bor: new dist.ERC20Token(dist.ChainId.BSC, "0x92D7756c60dcfD4c689290E8A9F4d263b3b32241", 18, "BOR", "BoringDAO Token", "https://www.boringdao.com/"),
    bopen: new dist.ERC20Token(dist.ChainId.BSC, "0xF35262a9d427F96d2437379eF090db986eaE5d42", 18, "bOPEN", "OPEN Governance Token", "https://opendao.io/"),
    dodo: new dist.ERC20Token(dist.ChainId.BSC, "0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2", 18, "DODO", "Dodo Token", "https://dodoex.io/"),
    swingby: new dist.ERC20Token(dist.ChainId.BSC, "0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739", 18, "SWINGBY", "Swingby Network Token", "https://swingby.network/"),
    zee: new dist.ERC20Token(dist.ChainId.BSC, "0x44754455564474A89358B2C2265883DF993b12F0", 18, "ZEE", "Zeroswap Token", "https://zeroswap.io/"),
    swgb: new dist.ERC20Token(dist.ChainId.BSC, "0xE40255C5d7fa7ceEc5120408C78C787CECB4cfdb", 18, "SWGb", "SWGb Token", "https://swirgepay.com/"),
    swg: new dist.ERC20Token(dist.ChainId.BSC, "0xe792f64C582698b8572AAF765bDC426AC3aEfb6B", 18, "SWG", "SWG Token", "https://swirgepay.com/"),
    sfp: new dist.ERC20Token(dist.ChainId.BSC, "0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb", 18, "SFP", "Safepal Token", "https://www.safepal.io/"),
    lina: new dist.ERC20Token(dist.ChainId.BSC, "0x762539b45A1dCcE3D36d080F74d1AED37844b878", 18, "LINA", "Linear Finance Token", "https://linear.finance/"),
    lit: new dist.ERC20Token(dist.ChainId.BSC, "0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723", 18, "LIT", "Litentry Token", "https://www.litentry.com/"),
    hget: new dist.ERC20Token(dist.ChainId.BSC, "0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731", 6, "HGET", "Hedget Token", "https://www.hedget.com/"),
    bdo: new dist.ERC20Token(dist.ChainId.BSC, "0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454", 18, "BDO", "Bdollar Token", "https://bdollar.fi/"),
    egld: new dist.ERC20Token(dist.ChainId.BSC, "0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe", 18, "EGLD", "Elrond Token", "https://elrond.com/"),
    front: new dist.ERC20Token(dist.ChainId.BSC, "0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b", 18, "FRONT", "Frontier Token", "https://frontier.xyz/"),
    btcst: new dist.ERC20Token(dist.ChainId.BSC, "0x78650B139471520656b9E7aA7A5e9276814a38e9", 17, "BTCST", "StandardBTCHashrate Token", "https://www.1-b.tc/"),
    bscx: new dist.ERC20Token(dist.ChainId.BSC, "0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587", 18, "BSCX", "BSCX Token", "https://bscex.org/"),
    balbt: new dist.ERC20Token(dist.ChainId.BSC, "0x72fAa679E1008Ad8382959FF48E392042A8b06f7", 18, "bALBT", "AllianceBlock Token", "https://allianceblock.io/"),
    asr: new dist.ERC20Token(dist.ChainId.BSC, "0x80D5f92C2c8C682070C95495313dDB680B267320", 2, "ASR", "AS Roma Token", "https://www.chiliz.com"),
    atm: new dist.ERC20Token(dist.ChainId.BSC, "0x25E9d05365c867E59C1904E7463Af9F312296f9E", 2, "ATM", "Athletico Madrid Token", "https://www.chiliz.com"),
    og: new dist.ERC20Token(dist.ChainId.BSC, "0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c", 2, "OG", "OG Nice Token", "https://www.chiliz.com"),
    reef: new dist.ERC20Token(dist.ChainId.BSC, "0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e", 18, "REEF", "Reef.finance Token", "https://reef.finance/"),
    juv: new dist.ERC20Token(dist.ChainId.BSC, "0xC40C9A843E1c6D01b7578284a9028854f6683b1B", 2, "JUV", "Juventus Token", "https://www.chiliz.com"),
    psg: new dist.ERC20Token(dist.ChainId.BSC, "0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1", 2, "PSG", "Paris Saint-Germain Token", "https://www.chiliz.com"),
    vai: new dist.ERC20Token(dist.ChainId.BSC, "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7", 18, "VAI", "VAI Stablecoin", "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7"),
    unfi: new dist.ERC20Token(dist.ChainId.BSC, "0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B", 18, "UNFI", "UNFI Token", "https://unifiprotocol.com"),
    twt: new dist.ERC20Token(dist.ChainId.BSC, "0x4B0F1812e5Df2A09796481Ff14017e6005508003", 18, "TWT", "Trust Wallet Token", "https://trustwallet.com/"),
    hard: new dist.ERC20Token(dist.ChainId.BSC, "0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4", 6, "HARD", "HARD Token", "https://hard.kava.io"),
    broobee: new dist.ERC20Token(dist.ChainId.BSC, "0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe", 18, "bROOBEE", "ROOBEE Token", "https://roobee.io/"),
    stax: new dist.ERC20Token(dist.ChainId.BSC, "0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4", 18, "STAX", "StableX Token", "https://stablexswap.com/"),
    nar: new dist.ERC20Token(dist.ChainId.BSC, "0xA1303E6199b319a891b79685F0537D289af1FC83", 18, "NAR", "Narwhalswap Token", "https://narwhalswap.org/"),
    nya: new dist.ERC20Token(dist.ChainId.BSC, "0xbFa0841F7a90c4CE6643f651756EE340991F99D5", 18, "NYA", "Nyanswop Token", "https://nyanswop.org/"),
    ctk: new dist.ERC20Token(dist.ChainId.BSC, "0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929", 6, "CTK", "Certik Token", "https://www.certik.foundation/"),
    inj: new dist.ERC20Token(dist.ChainId.BSC, "0xa2B726B1145A4773F68593CF171187d8EBe4d495", 18, "INJ", "Injective Protocol Token", "https://injectiveprotocol.com/"),
    sxp: new dist.ERC20Token(dist.ChainId.BSC, "0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A", 18, "SXP", "Swipe Token", "https://swipe.io/"),
    alpha: new dist.ERC20Token(dist.ChainId.BSC, "0xa1faa113cbE53436Df28FF0aEe54275c13B40975", 18, "ALPHA", "Alpha Finance Token", "https://alphafinance.io/"),
    xvs: new dist.ERC20Token(dist.ChainId.BSC, "0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63", 18, "XVS", "Venus Token", "https://venus.io/"),
    sushi: new dist.ERC20Token(dist.ChainId.BSC, "0x947950BcC74888a40Ffa2593C5798F11Fc9124C4", 18, "SUSHI", "Binance-Peg SushiToken", "https://sushi.com/"),
    comp: new dist.ERC20Token(dist.ChainId.BSC, "0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8", 18, "COMP", "Compound Finance Token", "https://compound.finance/"),
    bifi: new dist.ERC20Token(dist.ChainId.BSC, "0xCa3F508B8e4Dd382eE878A314789373D80A5190A", 18, "BIFI", "Beefy Finance Token", "https://beefy.finance/"),
    dusk: new dist.ERC20Token(dist.ChainId.BSC, "0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C", 18, "DUSK", "Dusk Network Token", "https://dusk.network/"),
    beth: new dist.ERC20Token(dist.ChainId.BSC, "0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B", 18, "BETH", "Binance Beacon ETH", "https://ethereum.org/en/eth2/beacon-chain/"),
    mamzn: new dist.ERC20Token(dist.ChainId.BSC, "0x3947B992DC0147D2D89dF0392213781b04B25075", 18, "mAMZN", "Wrapped Mirror AMZN Token", "https://mirror.finance/"),
    mgoogl: new dist.ERC20Token(dist.ChainId.BSC, "0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f", 18, "mGOOGL", "Wrapped Mirror GOOGL Token", "https://mirror.finance/"),
    mnflx: new dist.ERC20Token(dist.ChainId.BSC, "0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc", 18, "mNFLX", "Wrapped Mirror NFLX Token", "https://mirror.finance/"),
    mtsla: new dist.ERC20Token(dist.ChainId.BSC, "0xF215A127A196e3988C09d052e16BcFD365Cd7AA3", 18, "mTSLA", "Wrapped Mirror TSLA Token", "https://mirror.finance/"),
    ltc: new dist.ERC20Token(dist.ChainId.BSC, "0x4338665CBB7B2485A8855A139b75D5e34AB0DB94", 18, "LTC", "Binance-Peg Litecoin Token", "https://litecoin.org/"),
    ada: new dist.ERC20Token(dist.ChainId.BSC, "0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47", 18, "ADA", "Binance-Peg Cardano Token", "https://www.cardano.org/"),
    band: new dist.ERC20Token(dist.ChainId.BSC, "0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18", 18, "BAND", "Binance-Peg Band Protocol Token", "https://bandprotocol.com/"),
    dot: new dist.ERC20Token(dist.ChainId.BSC, "0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402", 18, "DOT", "Binance-Peg Polkadot Token", "https://polkadot.network/"),
    eos: new dist.ERC20Token(dist.ChainId.BSC, "0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6", 18, "EOS", "Binance-Peg EOS Token", "https://eos.io/"),
    link: new dist.ERC20Token(dist.ChainId.BSC, "0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD", 18, "LINK", "Binance-Peg Chainlink Token", "https://chain.link/"),
    xrp: new dist.ERC20Token(dist.ChainId.BSC, "0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE", 18, "XRP", "Binance-Peg XRP Token", "https://ripple.com/xrp/"),
    atom: new dist.ERC20Token(dist.ChainId.BSC, "0x0Eb3a705fc54725037CC9e008bDede697f62F335", 18, "ATOM", "Binance-Peg Cosmos Token", "https://cosmos.network/"),
    yfii: new dist.ERC20Token(dist.ChainId.BSC, "0x7F70642d88cf1C4a3a7abb072B53B929b653edA5", 18, "YFII", "Binance-Peg YFII.finance Token", "https://dfi.money/#/"),
    xtz: new dist.ERC20Token(dist.ChainId.BSC, "0x16939ef78684453bfDFb47825F8a5F714f12623a", 18, "XTZ", "Binance-Peg Tezos Token", "https://www.tezos.com/"),
    bch: new dist.ERC20Token(dist.ChainId.BSC, "0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf", 18, "BCH", "Binance-Peg Bitcoin Cash Token", "https://bch.info/"),
    yfi: new dist.ERC20Token(dist.ChainId.BSC, "0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e", 18, "YFI", "Binance-Peg yearn.finance Token", "https://yearn.finance/"),
    uni: new dist.ERC20Token(dist.ChainId.BSC, "0xBf5140A22578168FD562DCcF235E5D43A02ce9B1", 18, "UNI", "Binance-Peg Uniswap Token", "https://uniswap.org/"),
    fil: new dist.ERC20Token(dist.ChainId.BSC, "0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153", 18, "FIL", "Binance-Peg Filecoin Token", "https://filecoin.io/"),
    bake: new dist.ERC20Token(dist.ChainId.BSC, "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5", 18, "BAKE", "Bakeryswap Token", "https://www.bakeryswap.org/"),
    burger: new dist.ERC20Token(dist.ChainId.BSC, "0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f", 18, "BURGER", "Burgerswap Token", "https://burgerswap.org/"),
    bdigg: new dist.ERC20Token(dist.ChainId.BSC, "0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA", 18, "bDIGG", "Badger Sett Digg Token", "https://badger.finance/"),
    bbadger: new dist.ERC20Token(dist.ChainId.BSC, "0x1F7216fdB338247512Ec99715587bb97BBf96eae", 18, "bBadger", "Badger Sett Badger Token", "https://badger.finance/"),
    trade: new dist.ERC20Token(dist.ChainId.BSC, "0x7af173F350D916358AF3e218Bdf2178494Beb748", 18, "TRADE", "Unitrade Token", "https://unitrade.app/"),
    pnt: new dist.ERC20Token(dist.ChainId.BSC, "0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92", 18, "PNT", "pNetwork Token", "https://ptokens.io/"),
    mir: new dist.ERC20Token(dist.ChainId.BSC, "0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9", 18, "MIR", "Mirror Protocol Token", "https://mirror.finance/"),
    pbtc: new dist.ERC20Token(dist.ChainId.BSC, "0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C", 18, "pBTC", "pTokens BTC Token", "https://ptokens.io/"),
    lto: new dist.ERC20Token(dist.ChainId.BSC, "0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd", 18, "LTO", "LTO Network Token", "https://ltonetwork.com/"),
    pcws: new dist.ERC20Token(dist.ChainId.BSC, "0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd", 18, "pCWS", "PolyCrowns Token", "https://game.seascape.network/"),
    zil: new dist.ERC20Token(dist.ChainId.BSC, "0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787", 12, "ZIL", "Zilliqa Token", "https://www.zilliqa.com/"),
    lien: new dist.ERC20Token(dist.ChainId.BSC, "0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3", 8, "LIEN", "Lien Finance Token", "https://lien.finance/"),
    swth: new dist.ERC20Token(dist.ChainId.BSC, "0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C", 8, "SWTH", "Switcheo Network Token", "https://switcheo.network/"),
    dft: new dist.ERC20Token(dist.ChainId.BSC, "0x42712dF5009c20fee340B245b510c0395896cF6e", 18, "DFT", "Dfuture Token", "https://www.dfuture.com/home"),
    gum: new dist.ERC20Token(dist.ChainId.BSC, "0xc53708664b99DF348dd27C3Ac0759d2DA9c40462", 18, "GUM", "GourmetGalaxy Token", "https://gourmetgalaxy.io/"),
    dego: new dist.ERC20Token(dist.ChainId.BSC, "0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC", 18, "DEGO", "Dego Finance Token", "https://bsc.dego.finance/home"),
    nrv: new dist.ERC20Token(dist.ChainId.BSC, "0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096", 18, "NRV", "Nerve Finance Token", "https://nerve.fi/"),
    easy: new dist.ERC20Token(dist.ChainId.BSC, "0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B", 18, "EASY", "EASY Token", "https://easyfi.network/"),
    oddz: new dist.ERC20Token(dist.ChainId.BSC, "0xCD40F2670CF58720b694968698A5514e924F742d", 18, "ODDZ", "Oddz Token", "https://oddz.fi/"),
    hoo: new dist.ERC20Token(dist.ChainId.BSC, "0xE1d1F66215998786110Ba0102ef558b22224C016", 8, "HOO", "Hoo Token", "https://hoo.com/"),
    apys: new dist.ERC20Token(dist.ChainId.BSC, "0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7", 18, "APYS", "APY Swap Token", "https://apyswap.com/"),
    bondly: new dist.ERC20Token(dist.ChainId.BSC, "0x96058f8C3e16576D9BD68766f3836d9A33158f89", 18, "BONDLY", "Bondly Token", "https://www.bondly.finance/"),
    tko: new dist.ERC20Token(dist.ChainId.BSC, "0x9f589e3eabe42ebC94A44727b3f3531C0c877809", 18, "TKO", "Tokocrypto Token", "https://www.tokocrypto.com/"),
    itam: new dist.ERC20Token(dist.ChainId.BSC, "0x04C747b40Be4D535fC83D09939fb0f626F32800B", 18, "ITAM", "Itam Network Token", "https://itam.network/"),
    arpa: new dist.ERC20Token(dist.ChainId.BSC, "0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e", 18, "ARPA", "Arpachain Token", "https://arpachain.io/"),
    eps: new dist.ERC20Token(dist.ChainId.BSC, "0xA7f552078dcC247C2684336020c03648500C6d9F", 18, "EPS", "Ellipsis Finance Token", "https://ellipsis.finance/"),
    jgn: new dist.ERC20Token(dist.ChainId.BSC, "0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75", 18, "JGN", "Juggernaut DeFi Token", "https://jgndefi.com/"),
    tlm: new dist.ERC20Token(dist.ChainId.BSC, "0x2222227E22102Fe3322098e4CBfE18cFebD57c95", 4, "TLM", "Alien Worlds Trilium Token", "https://alienworlds.io/"),
    perl: new dist.ERC20Token(dist.ChainId.BSC, "0x0F9E4D49f25de22c2202aF916B681FBB3790497B", 18, "PERL", "Perlin", "https://perlinx.finance/"),
    alpa: new dist.ERC20Token(dist.ChainId.BSC, "0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03", 18, "ALPA", "AlpaToken", "https://bsc.alpaca.city/"),
    hzn: new dist.ERC20Token(dist.ChainId.BSC, "0xC0eFf7749b125444953ef89682201Fb8c6A917CD", 18, "HZN", "Horizon Protocol Token", "https://horizonprotocol.com/"),
    suter: new dist.ERC20Token(dist.ChainId.BSC, "0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055", 18, "SUTER", "Suterusu Token", "https://shield.suterusu.io/"),
    cgg: new dist.ERC20Token(dist.ChainId.BSC, "0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2", 18, "CGG", "pTokens CGG Token", "https://chainguardians.io/"),
    mix: new dist.ERC20Token(dist.ChainId.BSC, "0xB67754f5b4C704A24d2db68e661b2875a4dDD197", 18, "MIX", "Mix Token", "https://mixie.chainguardians.io/"),
    hakka: new dist.ERC20Token(dist.ChainId.BSC, "0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC", 18, "HAKKA", "Hakka Token", "https://hakka.finance/"),
    xed: new dist.ERC20Token(dist.ChainId.BSC, "0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f", 18, "XED", "Exeedme Token", "https://www.exeedme.com/"),
    τbtc: new dist.ERC20Token(dist.ChainId.BSC, "0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c", 9, "τBTC", "τBitcoin Token", "https://www.btcst.finance/"),
    alpaca: new dist.ERC20Token(dist.ChainId.BSC, "0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F", 18, "ALPACA", "AlpacaToken", "https://www.alpacafinance.org/"),
    dfd: new dist.ERC20Token(dist.ChainId.BSC, "0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff", 18, "DFD", "DefiDollar DAO", "https://dusd.finance/"),
    lmt: new dist.ERC20Token(dist.ChainId.BSC, "0x9617857E191354dbEA0b714d78Bc59e57C411087", 18, "LMT", "Lympo Market Token", "https://lympo.io/lmt/"),
    bttold: new dist.ERC20Token(dist.ChainId.BSC, "0x8595F9dA7b868b1822194fAEd312235E43007b49", 18, "BTTOLD", "Binance-Peg BitTorrent Token (Old)", "https://www.bittorrent.com/"),
    trx: new dist.ERC20Token(dist.ChainId.BSC, "0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B", 18, "TRX", "TRON Token", "https://tron.network/"),
    win: new dist.ERC20Token(dist.ChainId.BSC, "0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99", 18, "WIN", "WIN Token", "https://winklink.org/"),
    mcoin: new dist.ERC20Token(dist.ChainId.BSC, "0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f", 18, "MCOIN", "Wrapped Mirror COIN Token", "https://mirror.finance/"),
    math: new dist.ERC20Token(dist.ChainId.BSC, "0xF218184Af829Cf2b0019F8E6F0b2423498a36983", 18, "MATH", "MATH Token", "https://mathwallet.org/"),
    kun: new dist.ERC20Token(dist.ChainId.BSC, "0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584", 18, "KUN", "QIAN governance token", "https://chemix.io/home"),
    qsd: new dist.ERC20Token(dist.ChainId.BSC, "0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2", 18, "QSD", "QIAN second generation dollar", "https://chemix.io/home"),
    hyfi: new dist.ERC20Token(dist.ChainId.BSC, "0x9a319b959e33369C5eaA494a770117eE3e585318", 18, "HYFI", "HYFI Token", "https://hyfi.pro/#/"),
    oin: new dist.ERC20Token(dist.ChainId.BSC, "0x658E64FFcF40D240A43D52CA9342140316Ae44fA", 8, "OIN", "oinfinance Token", "https://oin.finance/"),
    doge: new dist.ERC20Token(dist.ChainId.BSC, "0xbA2aE424d960c26247Dd6c32edC70B295c744C43", 8, "DOGE", "Binance-Peg Dogecoin", "https://dogecoin.com/"),
    fine: new dist.ERC20Token(dist.ChainId.BSC, "0x4e6415a5727ea08aAE4580057187923aeC331227", 18, "FINE", "Refinable Token", "https://refinable.com/"),
    one: new dist.ERC20Token(dist.ChainId.BSC, "0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0", 18, "ONE", "BigONE Token", "https://www.bigone.com/"),
    pmon: new dist.ERC20Token(dist.ChainId.BSC, "0x1796ae0b0fa4862485106a0de9b654eFE301D0b2", 18, "PMON", "Polkamon Token", "https://polkamon.com/"),
    τdoge: new dist.ERC20Token(dist.ChainId.BSC, "0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A", 8, "τDOGE", "τDogecoin", "https://www.btcst.finance/"),
    btr: new dist.ERC20Token(dist.ChainId.BSC, "0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3", 18, "BTR", "Bitrue Token", "https://www.bitrue.com/"),
    ubxt: new dist.ERC20Token(dist.ChainId.BSC, "0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811", 18, "UBXT", "UpBots Token", "https://upbots.com/"),
    wmass: new dist.ERC20Token(dist.ChainId.BSC, "0x7e396BfC8a2f84748701167c2d622F041A1D7a17", 8, "WMASS", "Wrapped MASS Token", "https://massnet.org/en/"),
    rfox: new dist.ERC20Token(dist.ChainId.BSC, "0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5", 18, "RFOX", "RFOX Token", "https://www.redfoxlabs.io/"),
    xend: new dist.ERC20Token(dist.ChainId.BSC, "0x4a080377f83D669D7bB83B3184a8A5E61B500608", 18, "XEND", "XEND Token", "https://xend.finance/"),
    cyc: new dist.ERC20Token(dist.ChainId.BSC, "0x810EE35443639348aDbbC467b33310d2AB43c168", 18, "CYC", "CYC Token", "https://cyclone.xyz/"),
    chr: new dist.ERC20Token(dist.ChainId.BSC, "0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE", 6, "CHR", "Chroma Token", "https://chromia.com/"),
    deri: new dist.ERC20Token(dist.ChainId.BSC, "0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5", 18, "DERI", "Deri Token", "https://deri.finance/#/index"),
    well: new dist.ERC20Token(dist.ChainId.BSC, "0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5", 18, "WELL", "BitWell Token", "https://www.bitwellex.com/"),
    wex: new dist.ERC20Token(dist.ChainId.BSC, "0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90", 18, "WEX", "WaultSwap Token", "https://wault.finance/"),
    waultx: new dist.ERC20Token(dist.ChainId.BSC, "0xB64E638E60D154B43f660a6BF8fD8a3b249a6a21", 18, "WAULTx", "Wault Token", "https://wault.finance/"),
    popen: new dist.ERC20Token(dist.ChainId.BSC, "0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5", 18, "pOPEN", "OPEN Governance Token", "https://opendao.io/"),
    ez: new dist.ERC20Token(dist.ChainId.BSC, "0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83", 18, "EZ", "Easy V2 Token", "https://easyfi.network/"),
    vrt: new dist.ERC20Token(dist.ChainId.BSC, "0x5F84ce30DC3cF7909101C69086c50De191895883", 18, "VRT", "Venus Reward Token", "https://venus.io/"),
    tusd: new dist.ERC20Token(dist.ChainId.BSC, "0x14016E85a25aeb13065688cAFB43044C2ef86784", 18, "TUSD", "Binance-Peg TrueUSD Token", "https://www.trueusd.com/"),
    mtrg: new dist.ERC20Token(dist.ChainId.BSC, "0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F", 18, "MTRG", "Wrapped MTRG Token", "https://www.meter.io/"),
    ktn: new dist.ERC20Token(dist.ChainId.BSC, "0xDAe6c2A48BFAA66b43815c5548b10800919c993E", 18, "KTN", "Kattana Token", "https://kattana.io/"),
    qkc: new dist.ERC20Token(dist.ChainId.BSC, "0xA1434F1FC3F437fa33F7a781E041961C0205B5Da", 18, "QKC", "QuarkChain Token", "https://quarkchain.io/"),
    bcfx: new dist.ERC20Token(dist.ChainId.BSC, "0x045c4324039dA91c52C55DF5D785385Aab073DcF", 18, "bCFX", "ChainId.BSC Conflux Token", "https://www.confluxnetwork.org/"),
    mx: new dist.ERC20Token(dist.ChainId.BSC, "0x9F882567A62a5560d147d64871776EeA72Df41D3", 18, "MX", "MX Token", "https://www.mxc.com/"),
    ata: new dist.ERC20Token(dist.ChainId.BSC, "0xA2120b9e674d3fC3875f415A7DF52e382F141225", 18, "ATA", "Automata Token", "https://www.ata.network/"),
    mbox: new dist.ERC20Token(dist.ChainId.BSC, "0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377", 18, "MBOX", "Mobox Token", "https://www.mobox.io/#/"),
    boring: new dist.ERC20Token(dist.ChainId.BSC, "0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F", 18, "BORING", "BoringDAO Token", "https://www.boringdao.com/"),
    marsh: new dist.ERC20Token(dist.ChainId.BSC, "0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256", 18, "MARSH", "Unmarshal Token", "https://unmarshal.io/"),
    ampl: new dist.ERC20Token(dist.ChainId.BSC, "0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F", 9, "AMPL", "AMPL Token", "https://www.ampleforth.org/"),
    o3: new dist.ERC20Token(dist.ChainId.BSC, "0xEe9801669C6138E84bD50dEB500827b776777d28", 18, "O3", "O3 Swap Token", "https://o3swap.com/"),
    hai: new dist.ERC20Token(dist.ChainId.BSC, "0xaA9E582e5751d703F85912903bacADdFed26484C", 8, "HAI", "Hacken Token", "https://hacken.io/"),
    htb: new dist.ERC20Token(dist.ChainId.BSC, "0x4e840AADD28DA189B9906674B4Afcb77C128d9ea", 18, "HTB", "Hotbit Token", "https://www.hotbit.io/"),
    woo: new dist.ERC20Token(dist.ChainId.BSC, "0x4691937a7508860F876c9c0a2a617E7d9E945D4B", 18, "WOO", "Wootrade Network Token", "https://woo.network/"),
    $dg: new dist.ERC20Token(dist.ChainId.BSC, "0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19", 18, "$DG", "Decentral Games Token", "https://decentral.games/"),
    axs: new dist.ERC20Token(dist.ChainId.BSC, "0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0", 18, "AXS", "Binance-Pegged Axie Infinity Shard", "https://axieinfinity.com/"),
    c98: new dist.ERC20Token(dist.ChainId.BSC, "0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6", 18, "c98", "Coin98 Token", "https://coin98.com/"),
    pots: new dist.ERC20Token(dist.ChainId.BSC, "0x3Fcca8648651E5b974DD6d3e50F61567779772A8", 18, "POTS", "Moonpot Token", "https://moonpot.com/"),
    gnt: new dist.ERC20Token(dist.ChainId.BSC, "0xF750A26EB0aCf95556e8529E72eD530f3b60f348", 18, "GNT", "GreenTrust Token", "https://www.greentrusttoken.com/"),
    rusd: new dist.ERC20Token(dist.ChainId.BSC, "0x07663837218A003e66310a01596af4bf4e44623D", 18, "rUSD", "rUSD Token", "https://appv2.rampdefi.com/#/"),
    bp: new dist.ERC20Token(dist.ChainId.BSC, "0xACB8f52DC63BB752a51186D1c55868ADbFfEe9C1", 18, "BP", "BunnyPark Token", "https://www.bunnypark.com/"),
    sfund: new dist.ERC20Token(dist.ChainId.BSC, "0x477bC8d23c634C154061869478bce96BE6045D12", 18, "SFUND", "Seedify Fund Token", "https://seedify.fund/"),
    naos: new dist.ERC20Token(dist.ChainId.BSC, "0x758d08864fB6cCE3062667225ca10b8F00496cc2", 18, "NAOS", "NAOSToken", "https://naos.finance/"),
    cart: new dist.ERC20Token(dist.ChainId.BSC, "0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e", 18, "CART", "CryptoArt.ai", "https://cryptoart.ai/"),
    light: new dist.ERC20Token(dist.ChainId.BSC, "0x037838b556d9c9d654148a284682C55bB5f56eF4", 18, "LIGHT", "Lightning", "https://lightningprotocol.finance/"),
    rpg: new dist.ERC20Token(dist.ChainId.BSC, "0xc2098a8938119A52B1F7661893c0153A6CB116d5", 18, "RPG", "Rangers Protocol", "https://www.rangersprotocol.com/"),
    mcb: new dist.ERC20Token(dist.ChainId.BSC, "0x5fE80d2CD054645b9419657d3d10d26391780A7B", 18, "MCB", "MCDEX", "https://mcdex.io/homepage/"),
    lazio: new dist.ERC20Token(dist.ChainId.BSC, "0x77d547256A2cD95F32F67aE0313E450Ac200648d", 8, "LAZIO", "FC Lazio Fan Token", "https://launchpad.binance.com/en/subscription/LAZIO_BNB"),
    arv: new dist.ERC20Token(dist.ChainId.BSC, "0x6679eB24F59dFe111864AEc72B443d1Da666B360", 8, "ARV", "ARIVA", "https://ariva.digital"),
    moni: new dist.ERC20Token(dist.ChainId.BSC, "0x9573c88aE3e37508f87649f87c4dd5373C9F31e0", 18, "MONI", "Monsta Infinite", "https://monstainfinite.com/"),
    xms: new dist.ERC20Token(dist.ChainId.BSC, "0x7859B01BbF675d67Da8cD128a50D155cd881B576", 18, "XMS", "Mars Ecosystem", "https://marsecosystem.com/"),
    zoo: new dist.ERC20Token(dist.ChainId.BSC, "0x1D229B958D5DDFca92146585a8711aECbE56F095", 18, "ZOO", "ZOO Crypto World", "https://zoogame.finance/"),
    fina: new dist.ERC20Token(dist.ChainId.BSC, "0x426c72701833fdDBdFc06c944737C6031645c708", 18, "FINA", "Defina Finance", "https://defina.finance/"),
    dar: new dist.ERC20Token(dist.ChainId.BSC, "0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978", 6, "DAR", "Mines of Dalarnia", "https://www.minesofdalarnia.com/"),
    xwg: new dist.ERC20Token(dist.ChainId.BSC, "0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc", 18, "XWG", "X World Games", "https://xwg.games/"),
    eternal: new dist.ERC20Token(dist.ChainId.BSC, "0xD44FD09d74cd13838F137B590497595d6b3FEeA4", 18, "ETERNAL", "CryptoMines Eternal", "https://cryptomines.app/"),
    porto: new dist.ERC20Token(dist.ChainId.BSC, "0x49f2145d6366099e13B10FbF80646C0F377eE7f6", 8, "PORTO", "FC Porto Fan Token", "https://launchpad.binance.com/en/subscription/PORTO_BNB"),
    kart: new dist.ERC20Token(dist.ChainId.BSC, "0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10", 18, "KART", "Dragon Kart", "https://dragonkart.com/"),
    qi: new dist.ERC20Token(dist.ChainId.BSC, "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5", 18, "QI", "BENQI", "https://benqi.fi/"),
    sheesha: new dist.ERC20Token(dist.ChainId.BSC, "0x232FB065D9d24c34708eeDbF03724f2e95ABE768", 18, "SHEESHA", "Sheesha Finance", "https://www.sheeshafinance.io/"),
    bcoin: new dist.ERC20Token(dist.ChainId.BSC, "0x00e1656e45f18ec6747F5a8496Fd39B50b38396D", 18, "BCOIN", "Bomb Crypto", "https://bombcrypto.io/"),
    quidd: new dist.ERC20Token(dist.ChainId.BSC, "0x7961Ade0a767c0E5B67Dd1a1F78ba44F727642Ed", 18, "QUIDD", "Quidd Token", "https://www.quiddtoken.com/"),
    santos: new dist.ERC20Token(dist.ChainId.BSC, "0xA64455a4553C9034236734FadDAddbb64aCE4Cc7", 8, "SANTOS", "FC Santos Fan Token", "https://launchpad.binance.com/en/launchpool/SANTOS_BNB"),
    nabox: new dist.ERC20Token(dist.ChainId.BSC, "0x755f34709E369D37C6Fa52808aE84A32007d1155", 18, "NABOX", "Nabox Token", "https://nabox.io/"),
    xcv: new dist.ERC20Token(dist.ChainId.BSC, "0x4be63a9b26EE89b9a3a13fd0aA1D0b2427C135f8", 18, "XCV", "XCarnival", "https://xcarnival.fi/"),
    idia: new dist.ERC20Token(dist.ChainId.BSC, "0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89", 18, "IDIA", "Impossible Decentralized Incubator Access Token", "https://impossible.finance/"),
    tt: new dist.ERC20Token(dist.ChainId.BSC, "0x990E7154bB999FAa9b2fa5Ed29E822703311eA85", 18, "TT", "ThunderCore", "https://www.thundercore.com/"),
    gmee: new dist.ERC20Token(dist.ChainId.BSC, "0x84e9a6F9D240FdD33801f7135908BfA16866939A", 18, "GMEE", "GAMEE", "https://www.gamee.com/token"),
    htd: new dist.ERC20Token(dist.ChainId.BSC, "0x5E2689412Fae5c29BD575fbe1d5C1CD1e0622A8f", 18, "HTD", "HeroesTD", "https://heroestd.io/"),
    dpt: new dist.ERC20Token(dist.ChainId.BSC, "0xE69cAef10A488D7AF31Da46c89154d025546e990", 18, "DPT", "Diviner Protocol", "https://diviner.finance/"),
    thg: new dist.ERC20Token(dist.ChainId.BSC, "0x9fD87aEfe02441B123c3c32466cD9dB4c578618f", 18, "THG", "Thetan Gem", "https://thetanarena.com/"),
    ccar: new dist.ERC20Token(dist.ChainId.BSC, "0x50332bdca94673F33401776365b66CC4e81aC81d", 18, "CCAR", "CryptoCars", "https://cryptocars.me/"),
    high: new dist.ERC20Token(dist.ChainId.BSC, "0x5f4Bde007Dc06b867f86EBFE4802e34A1fFEEd63", 18, "HIGH", "Highstreet Token", "https://highstreet.market/"),
    sdao: new dist.ERC20Token(dist.ChainId.BSC, "0x90Ed8F1dc86388f14b64ba8fb4bbd23099f18240", 18, "SDAO", "Singularity Dao", "https://app.singularitydao.ai/"),
    antex: new dist.ERC20Token(dist.ChainId.BSC, "0xCA1aCAB14e85F30996aC83c64fF93Ded7586977C", 8, "ANTEX", "Antex", "https://antex.org/"),
    bbt: new dist.ERC20Token(dist.ChainId.BSC, "0xD48474E7444727bF500a32D5AbE01943f3A59A64", 8, "BBT", "BitBook", "https://www.bitbook.network/"),
    woop: new dist.ERC20Token(dist.ChainId.BSC, "0x8b303d5BbfBbf46F1a4d9741E491e06986894e18", 18, "WOOP", "Woonkly Power", "https://www.woonkly.com/"),
    gm: new dist.ERC20Token(dist.ChainId.BSC, "0xe2604C9561D490624AA35e156e65e590eB749519", 18, "GM", "GoldMiner", "https://goldminer.games/"),
    aog: new dist.ERC20Token(dist.ChainId.BSC, "0x40C8225329Bd3e28A043B029E0D07a5344d2C27C", 18, "AOG", "AgeOfGods", "https://ageofgods.net/"),
    "8pay": new dist.ERC20Token(dist.ChainId.BSC, "0xFeea0bDd3D07eb6FE305938878C0caDBFa169042", 18, "8PAY", "8PAY Network", "https://8pay.network/"),
    bath: new dist.ERC20Token(dist.ChainId.BSC, "0x0bc89aa98Ad94E6798Ec822d0814d934cCD0c0cE", 18, "BATH", "Battle Hero", "https://battlehero.io/"),
    insur: new dist.ERC20Token(dist.ChainId.BSC, "0x3192CCDdf1CDcE4Ff055EbC80f3F0231b86A7E30", 18, "INSUR", "Bsc-Peg INSUR Token", "https://www.insurace.io/"),
    froyo: new dist.ERC20Token(dist.ChainId.BSC, "0xe369fec23380f9F14ffD07a1DC4b7c1a9fdD81c9", 18, "FROYO", "Froyo Games", "https://froyo.games/"),
    apx: new dist.ERC20Token(dist.ChainId.BSC, "0x78F5d389F5CDCcFc41594aBaB4B0Ed02F31398b3", 18, "APX", "ApolloX Token", "https://www.apollox.finance/"),
    prl: new dist.ERC20Token(dist.ChainId.BSC, "0xd07e82440A395f3F3551b42dA9210CD1Ef4f8B24", 18, "PRL", "Parallel Token", "https://theparallel.io"),
    fuse: new dist.ERC20Token(dist.ChainId.BSC, "0x5857c96DaE9cF8511B08Cb07f85753C472D36Ea3", 18, "FUSE", "Fuse Token", "https://fuse.io/"),
    ertha: new dist.ERC20Token(dist.ChainId.BSC, "0x62823659d09F9F9D2222058878f89437425eB261", 18, "ERTHA", "Ertha Token", "https://ertha.io/"),
    raca: new dist.ERC20Token(dist.ChainId.BSC, "0x12BB890508c125661E03b09EC06E404bc9289040", 18, "RACA", "Radio Caca V2", "https://www.radiocaca.com/#/home"),
    gear: new dist.ERC20Token(dist.ChainId.BSC, "0xb4404DaB7C0eC48b428Cf37DeC7fb628bcC41B36", 18, "GEAR", "MetaGear Token", "https://metagear.game/"),
    ach: new dist.ERC20Token(dist.ChainId.BSC, "0xBc7d6B50616989655AfD682fb42743507003056D", 8, "ACH", "Alchemy Token", "https://alchemytech.io/"),
    btt: new dist.ERC20Token(dist.ChainId.BSC, "0x352Cb5E19b12FC216548a2677bD0fce83BaE434B", 18, "BTT", "BitTorrent", "https://bittorrent.com/"),
    era: new dist.ERC20Token(dist.ChainId.BSC, "0x6f9F0c4ad9Af7EbD61Ac5A1D4e0F2227F7B0E5f9", 18, "ERA", "Era Token", "https://www.era7.io/"),
    fight: new dist.ERC20Token(dist.ChainId.BSC, "0x4f39c3319188A723003670c3F9B9e7EF991E52F3", 18, "FIGHT", "Fight Token", "https://www.cryptofightclub.io/"),
    loa: new dist.ERC20Token(dist.ChainId.BSC, "0x94b69263FCA20119Ae817b6f783Fc0F13B02ad50", 18, "LOA", "League Of Ancients", "https://www.leagueofancients.com/"),
    duet: new dist.ERC20Token(dist.ChainId.BSC, "0x95EE03e1e2C5c4877f9A298F1C0D6c98698FAB7B", 18, "DUET", "Duet Governance Token", "https://duet.finance"),
    gmt: new dist.ERC20Token(dist.ChainId.BSC, "0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1", 8, "GMT", "Green Metaverse Token", "https://www.stepn.com/"),
    bsw: new dist.ERC20Token(dist.ChainId.BSC, "0x965F527D9159dCe6288a2219DB51fc6Eef120dD1", 18, "BSW", "Biswap", "https://biswap.org/"),
    tem: new dist.ERC20Token(dist.ChainId.BSC, "0x19e6BfC1A6e4B042Fb20531244D47E252445df01", 9, "TEM", "TemplarDAO", "https://templar.finance/"),
    pex: new dist.ERC20Token(dist.ChainId.BSC, "0x6a0b66710567b6beb81A71F7e9466450a91a384b", 18, "PEX", "PearDAO", "https://peardao.io/"),
    yel: new dist.ERC20Token(dist.ChainId.BSC, "0xD3b71117E6C1558c1553305b44988cd944e97300", 18, "YEL", "YEL", "https://yel.finance/"),
    tinc: new dist.ERC20Token(dist.ChainId.BSC, "0x05aD6E30A855BE07AfA57e08a4f30d00810a402e", 18, "TINC", "Tiny Coin", "https://tinyworlds.io/"),
    happy: new dist.ERC20Token(dist.ChainId.BSC, "0xF5d8A096CcCb31b9D7bcE5afE812BE23e3D4690d", 18, "Happy", "HappyFans", "https://happyfans.club/"),
    wzrd: new dist.ERC20Token(dist.ChainId.BSC, "0xFa40d8FC324bcdD6Bbae0e086De886c571C225d4", 18, "WZRD", "Wizardia Token", "https://wizardia.io/"),
    ceek: new dist.ERC20Token(dist.ChainId.BSC, "0xe0F94Ac5462997D2BC57287Ac3a3aE4C31345D66", 18, "CEEK", "CEEK", "https://www.ceek.com/"),
    abnbc: new dist.ERC20Token(dist.ChainId.BSC, "0xE85aFCcDaFBE7F2B096f268e31ccE3da8dA2990A", 18, "aBNBc", "Ankr BNB Reward Bearing Certificate", "https://www.ankr.com/"),
    ankr: new dist.ERC20Token(dist.ChainId.BSC, "0xf307910A4c7bbc79691fD374889b36d8531B08e3", 18, "ANKR", "Ankr", "https://www.ankr.com/"),
    gal: new dist.ERC20Token(dist.ChainId.BSC, "0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5", 18, "GAL", "Galxe", "https://galaxy.eco/"),
    xcn: new dist.ERC20Token(dist.ChainId.BSC, "0x7324c7C0d95CEBC73eEa7E85CbAac0dBdf88a05b", 18, "XCN", "Chain", "https://chain.com/"),
    metis: new dist.ERC20Token(dist.ChainId.BSC, "0xe552Fb52a4F19e44ef5A967632DBc320B0820639", 18, "Metis", "Metis Token", "https://www.metis.io/"),
    MIX: new dist.ERC20Token(dist.ChainId.BSC, "0x398f7827DcCbeFe6990478876bBF3612D93baF05", 18, "MIX", "MixMarvel Token", "https://www.mixmarvel.com/"),
    peak: new dist.ERC20Token(dist.ChainId.BSC, "0x630d98424eFe0Ea27fB1b3Ab7741907DFFEaAd78", 8, "PEAK", "PEAKDEFI", "https://peakdefi.com/"),
    nbt: new dist.ERC20Token(dist.ChainId.BSC, "0x1D3437E570e93581Bd94b2fd8Fbf202d4a65654A", 18, "NBT", "NanoByte Token", "https://www.nanobyte.finance/"),
    trivia: new dist.ERC20Token(dist.ChainId.BSC, "0xb465f3cb6Aba6eE375E12918387DE1eaC2301B05", 3, "TRIVIA", "Trivian Token", "https://trivians.io/"),
    mhunt: new dist.ERC20Token(dist.ChainId.BSC, "0x2C717059b366714d267039aF8F59125CAdce6D8c", 18, "MHUNT", "MetaShooter", "https://metashooter.gg/"),
    ole: new dist.ERC20Token(dist.ChainId.BSC, "0xa865197A84E780957422237B5D152772654341F3", 18, "OLE", "OpenLeverage", "https://openleverage.finance/"),
    xcad: new dist.ERC20Token(dist.ChainId.BSC, "0x431e0cD023a32532BF3969CddFc002c00E98429d", 18, "XCAD", "Chainport.io-Peg XCAD Token", "https://xcadnetwork.com/"),
    shell: new dist.ERC20Token(dist.ChainId.BSC, "0x208cfEc94d2BA8B8537da7A9BB361c6baAD77272", 18, "SHELL", "Meta Apes Shell", "https://metaapesgame.com/"),
    peel: new dist.ERC20Token(dist.ChainId.BSC, "0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB", 18, "PEEL", "Meta Apes Peel", "https://metaapesgame.com/"),
    stkbnb: new dist.ERC20Token(dist.ChainId.BSC, "0xc2E9d07F66A89c44062459A47a0D2Dc038E4fb16", 18, "stkBNB", "Staked BNB", "https://pstake.finance/bnb"),
    pstake: new dist.ERC20Token(dist.ChainId.BSC, "0x4C882ec256823eE773B25b414d36F92ef58a7c0C", 18, "PSTAKE", "pStake Finance", "https://pstake.finance/"),
    wom: new dist.ERC20Token(dist.ChainId.BSC, "0xAD6742A35fB341A9Cc6ad674738Dd8da98b94Fb1", 18, "WOM", "Wombat Token", "https://www.wombat.exchange/"),
    hay: new dist.ERC20Token(dist.ChainId.BSC, "0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5", 18, "HAY", "Hay Destablecoin", "https://helio.money/"),
    spin: new dist.ERC20Token(dist.ChainId.BSC, "0x6AA217312960A21aDbde1478DC8cBCf828110A67", 18, "SPIN", "Spintop", "https://spintop.network/"),
    snfts: new dist.ERC20Token(dist.ChainId.BSC, "0x6f51A1674BEFDD77f7ab1246b83AdB9f13613762", 18, "SNFTS", "Seedify NFT Space", "https://snfts.seedify.fund/"),
    gq: new dist.ERC20Token(dist.ChainId.BSC, "0xF700D4c708C2be1463E355F337603183D20E0808", 18, "GQ", "Galactic Quadrant", "https://outerringmmo.com/"),
    hoop: new dist.Token(dist.ChainId.BSC, "0xF19cfb40B3774dF6Eed83169Ad5aB0Aaf6865F25", 18, "HOOP", "Chibi Dinos", "https://www.chibidinos.io/"),
    co: new dist.Token(dist.ChainId.BSC, "0x936B6659Ad0C1b244Ba8Efe639092acae30dc8d6", 6, "CO", "CO", "https://corite.com/"),
    krs: new dist.Token(dist.ChainId.BSC, "0x37b53894e7429f794B56F22a32E1695567Ee9913", 18, "KRS", "Kingdom Raids", "https://kingdomraids.io/"),
    wmx: new dist.Token(dist.ChainId.BSC, "0xa75d9ca2a0a1D547409D82e1B06618EC284A2CeD", 18, "WMX", "Wombex Token", "https://wombex.finance/"),
    mgp: new dist.Token(dist.ChainId.BSC, "0xD06716E1Ff2E492Cc5034c2E81805562dd3b45fa", 18, "MGP", "Magpie Token", "https://www.magpiexyz.io/")
};

;// CONCATENATED MODULE: ../../packages/tokens/src/97.ts


const bscTestnetTokens = {
    wbnb: dist.WBNB[dist.ChainId.BSC_TESTNET],
    cake: CAKE_TESTNET,
    busd: BUSD_TESTNET,
    syrup: new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9", 18, "SYRUP", "SyrupBar Token", "https://pancakeswap.finance/"),
    bake: new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5", 18, "BAKE", "Bakeryswap Token", "https://www.bakeryswap.org/"),
    hbtc: new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0x3Fb6a6C06c7486BD194BB99a078B89B9ECaF4c82", 18, "HBTC", "Huobi BTC"),
    wbtc: new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0xfC8bFbe9644e1BC836b8821660593e7de711e564", 8, "WBTC", "Wrapped BTC"),
    usdc: new dist.ERC20Token(dist.ChainId.BSC_TESTNET, "0x2fB98DCc527c1403F92c6Bed05a50725d3005636", 18, "USDC", "Binance-Peg USD Coin")
};

;// CONCATENATED MODULE: ../../packages/tokens/src/1.ts


const ethereumTokens = {
    weth: dist.WETH9[dist.ChainId.ETHEREUM],
    usdt: USDT[dist.ChainId.ETHEREUM],
    usdc: USDC[dist.ChainId.ETHEREUM],
    wbtc: WBTC_ETH
};

;// CONCATENATED MODULE: ../../packages/tokens/src/index.ts








/***/ }),

/***/ 85306:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ Button_Button)
});

// EXTERNAL MODULE: external "react/jsx-runtime"
var jsx_runtime_ = __webpack_require__(20997);
// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(16689);
// EXTERNAL MODULE: ../../packages/uikit/src/util/externalLinkProps.ts
var externalLinkProps = __webpack_require__(58592);
// EXTERNAL MODULE: external "styled-components"
var external_styled_components_ = __webpack_require__(57518);
var external_styled_components_default = /*#__PURE__*/__webpack_require__.n(external_styled_components_);
// EXTERNAL MODULE: external "styled-system"
var external_styled_system_ = __webpack_require__(95834);
// EXTERNAL MODULE: ../../packages/uikit/src/components/Button/types.ts
var types = __webpack_require__(82223);
;// CONCATENATED MODULE: ../../packages/uikit/src/components/Button/theme.ts

const scaleVariants = {
    [types/* scales.MD */.Q.MD]: {
        height: "48px",
        padding: "0 24px"
    },
    [types/* scales.SM */.Q.SM]: {
        height: "32px",
        padding: "0 16px"
    },
    [types/* scales.XS */.Q.XS]: {
        height: "20px",
        fontSize: "12px",
        padding: "0 8px"
    }
};
const styleVariants = {
    [types/* variants.PRIMARY */.o.PRIMARY]: {
        backgroundColor: "primary",
        color: "white"
    },
    [types/* variants.SECONDARY */.o.SECONDARY]: {
        backgroundColor: "transparent",
        border: "2px solid",
        borderColor: "primary",
        boxShadow: "none",
        color: "primary",
        ":disabled": {
            backgroundColor: "transparent"
        }
    },
    [types/* variants.TERTIARY */.o.TERTIARY]: {
        backgroundColor: "tertiary",
        boxShadow: "none",
        color: "primary"
    },
    [types/* variants.SUBTLE */.o.SUBTLE]: {
        backgroundColor: "textSubtle",
        color: "backgroundAlt"
    },
    [types/* variants.DANGER */.o.DANGER]: {
        backgroundColor: "failure",
        color: "white"
    },
    [types/* variants.SUCCESS */.o.SUCCESS]: {
        backgroundColor: "success",
        color: "white"
    },
    [types/* variants.TEXT */.o.TEXT]: {
        backgroundColor: "transparent",
        color: "primary",
        boxShadow: "none"
    },
    [types/* variants.LIGHT */.o.LIGHT]: {
        backgroundColor: "input",
        color: "textSubtle",
        boxShadow: "none"
    }
};

;// CONCATENATED MODULE: ../../packages/uikit/src/components/Button/StyledButton.tsx



const getDisabledStyles = ({ $isLoading , theme  })=>{
    if ($isLoading === true) {
        return `
      &:disabled,
      &.pancake-button--disabled {
        cursor: not-allowed;
      }
    `;
    }
    return `
    &:disabled,
    &.pancake-button--disabled {
      background-color: ${theme.colors.backgroundDisabled};
      border-color: ${theme.colors.backgroundDisabled};
      box-shadow: none;
      color: ${theme.colors.textDisabled};
      cursor: not-allowed;
    }
  `;
};
/**
 * This is to get around an issue where if you use a Link component
 * React will throw a invalid DOM attribute error
 * @see https://github.com/styled-components/styled-components/issues/135
 */ const getOpacity = ({ $isLoading =false  })=>{
    return $isLoading ? ".5" : "1";
};
const StyledButton = external_styled_components_default().button.withConfig({
    componentId: "sc-a8cf5f33-0"
})`
  position: relative;
  align-items: center;
  border: 0;
  border-radius: 16px;
  box-shadow: 0px -1px 0px 0px rgba(14, 14, 44, 0.4) inset;
  cursor: pointer;
  display: inline-flex;
  font-family: inherit;
  font-size: 16px;
  font-weight: 600;
  justify-content: center;
  letter-spacing: 0.03em;
  line-height: 1;
  opacity: ${getOpacity};
  outline: 0;
  transition: background-color 0.2s, opacity 0.2s;

  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {
    opacity: 0.65;
  }

  &:active:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled) {
    opacity: 0.85;
    transform: translateY(1px);
    box-shadow: none;
  }

  ${getDisabledStyles}
  ${(0,external_styled_system_.variant)({
    prop: "scale",
    variants: scaleVariants
})}
  ${(0,external_styled_system_.variant)({
    variants: styleVariants
})}
  ${external_styled_system_.layout}
  ${external_styled_system_.space}
  ${({ decorator , theme  })=>decorator && external_styled_components_.css`
      &::before {
        content: "${decorator.text}";
        position: absolute;
        border-bottom: 20px solid ${decorator.backgroundColor ?? theme.colors.secondary};
        border-left: 34px solid transparent;
        border-right: 12px solid transparent;
        height: 0;
        top: -1px;
        right: -12px;
        width: 75px;
        text-align: center;
        padding-right: 30px;
        line-height: 20px;
        font-size: 12px;
        font-weight: 400;
        transform: rotate(31.17deg);
        color: ${decorator.color ?? "white"};
      }
    `}
`;
/* harmony default export */ const Button_StyledButton = (StyledButton);

;// CONCATENATED MODULE: ../../packages/uikit/src/components/Button/Button.tsx





const Button = (props)=>{
    const { startIcon , endIcon , external , className , isLoading , disabled , children , ...rest } = props;
    const internalProps = external ? externalLinkProps/* default */.Z : {};
    const isDisabled = isLoading || disabled;
    const classNames = className ? [
        className
    ] : [];
    if (isLoading) {
        classNames.push("pancake-button--loading");
    }
    if (isDisabled && !isLoading) {
        classNames.push("pancake-button--disabled");
    }
    return /*#__PURE__*/ jsx_runtime_.jsx(Button_StyledButton, {
        $isLoading: isLoading,
        className: classNames.join(" "),
        disabled: isDisabled,
        ...internalProps,
        ...rest,
        children: /*#__PURE__*/ (0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
            children: [
                /*#__PURE__*/ (0,external_react_.isValidElement)(startIcon) && /*#__PURE__*/ (0,external_react_.cloneElement)(startIcon, {
                    // @ts-ignore
                    mr: "0.5rem"
                }),
                children,
                /*#__PURE__*/ (0,external_react_.isValidElement)(endIcon) && /*#__PURE__*/ (0,external_react_.cloneElement)(endIcon, {
                    // @ts-ignore
                    ml: "0.5rem"
                })
            ]
        })
    });
};
Button.defaultProps = {
    isLoading: false,
    external: false,
    variant: types/* variants.PRIMARY */.o.PRIMARY,
    scale: types/* scales.MD */.Q.MD,
    disabled: false
};
/* harmony default export */ const Button_Button = (Button);


/***/ }),

/***/ 82223:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": () => (/* binding */ scales),
/* harmony export */   "o": () => (/* binding */ variants)
/* harmony export */ });
const scales = {
    MD: "md",
    SM: "sm",
    XS: "xs"
};
const variants = {
    PRIMARY: "primary",
    SECONDARY: "secondary",
    TERTIARY: "tertiary",
    TEXT: "text",
    DANGER: "danger",
    SUBTLE: "subtle",
    SUCCESS: "success",
    LIGHT: "light"
};


/***/ }),

/***/ 58592:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const EXTERNAL_LINK_PROPS = {
    target: "_blank",
    rel: "noreferrer noopener"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EXTERNAL_LINK_PROPS);


/***/ }),

/***/ 85576:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HW": () => (/* binding */ BIG_ZERO),
/* harmony export */   "L8": () => (/* binding */ ethersToSerializedBigNumber),
/* harmony export */   "cQ": () => (/* binding */ BIG_ONE),
/* harmony export */   "i9": () => (/* binding */ ethersToBigNumber),
/* harmony export */   "ju": () => (/* binding */ BIG_TWO),
/* harmony export */   "xp": () => (/* binding */ BIG_TEN)
/* harmony export */ });
/* unused harmony export BIG_NINE */
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);

const BIG_ZERO = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(0);
const BIG_ONE = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(1);
const BIG_TWO = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(2);
const BIG_NINE = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(9);
const BIG_TEN = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(10);
const ethersToSerializedBigNumber = (ethersBn)=>ethersToBigNumber(ethersBn).toJSON();
const ethersToBigNumber = (ethersBn)=>new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(ethersBn.toString());


/***/ }),

/***/ 24671:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NJ": () => (/* binding */ getFullDisplayBalance),
/* harmony export */   "O$": () => (/* binding */ formatLpBalance),
/* harmony export */   "Qe": () => (/* binding */ getDecimalAmount),
/* harmony export */   "U1": () => (/* binding */ formatBigNumberToFixed),
/* harmony export */   "U4": () => (/* binding */ getBalanceAmount),
/* harmony export */   "dp": () => (/* binding */ formatBigNumber),
/* harmony export */   "mW": () => (/* binding */ getBalanceNumber),
/* harmony export */   "uI": () => (/* binding */ formatLocalisedCompactNumber),
/* harmony export */   "uf": () => (/* binding */ formatNumber),
/* harmony export */   "w$": () => (/* binding */ formatFixedNumber)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34215);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65757);
/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ethersproject_units__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93138);
/* harmony import */ var _ethersproject_units__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ethersproject_units__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _pancakeswap_localization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(24953);
/* harmony import */ var _pancakeswap_utils_getFullDecimalMultiplier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38766);





/**
 * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000
 */ const getDecimalAmount = (amount, decimals = 18)=>{
    return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(amount).times((0,_pancakeswap_utils_getFullDecimalMultiplier__WEBPACK_IMPORTED_MODULE_4__/* .getFullDecimalMultiplier */ .t)(decimals));
};
const getBalanceAmount = (amount, decimals = 18)=>{
    return new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(amount).dividedBy((0,_pancakeswap_utils_getFullDecimalMultiplier__WEBPACK_IMPORTED_MODULE_4__/* .getFullDecimalMultiplier */ .t)(decimals));
};
/**
 * This function is not really necessary but is used throughout the site.
 */ const getBalanceNumber = (balance, decimals = 18)=>{
    return getBalanceAmount(balance, decimals).toNumber();
};
const getFullDisplayBalance = (balance, decimals = 18, displayDecimals)=>{
    return getBalanceAmount(balance, decimals).toFixed(displayDecimals);
};
/**
 * Don't use the result to convert back to number.
 * It uses undefined locale which uses host language as a result.
 * Languages have different decimal separators which results in inconsistency when converting back this result to number.
 */ const formatNumber = (number, minPrecision = 2, maxPrecision = 2)=>{
    const options = {
        minimumFractionDigits: minPrecision,
        maximumFractionDigits: maxPrecision
    };
    return number.toLocaleString(undefined, options);
};
/**
 * Method to format the display of wei given an EthersBigNumber object
 * Note: does NOT round
 */ const formatBigNumber = (number, displayDecimals = 18, decimals = 18)=>{
    const remainder = number.mod(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(10).pow(decimals - displayDecimals));
    return (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(number.sub(remainder), decimals);
};
/**
 * Method to format the display of wei given an EthersBigNumber object with toFixed
 * Note: rounds
 */ const formatBigNumberToFixed = (number, displayDecimals = 18, decimals = 18)=>{
    const formattedString = (0,_ethersproject_units__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(number, decimals);
    return (+formattedString).toFixed(displayDecimals);
};
/**
 * Formats a FixedNumber like BigNumber
 * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)
 */ const formatFixedNumber = (number, displayDecimals = 18, decimals = 18)=>{
    // Remove decimal
    const [leftSide] = number.toString().split(".");
    return formatBigNumber(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(leftSide), displayDecimals, decimals);
};
const formatLocalisedCompactNumber = (number)=>{
    const codeFromStorage = (0,_pancakeswap_localization__WEBPACK_IMPORTED_MODULE_3__/* .getLanguageCodeFromLS */ .jq)();
    const isClient = "undefined" === "object";
    const isSupported = window?.Intl;
    // For clients do not support Intl, just return number
    if (isClient && !isSupported) {
        return `${number}`;
    }
    return new Intl.NumberFormat(codeFromStorage, {
        notation: "compact",
        compactDisplay: "long",
        maximumSignificantDigits: 2
    }).format(number);
};
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (formatLocalisedCompactNumber)));
const formatLpBalance = (balance)=>{
    const stakedBalanceBigNumber = getBalanceAmount(balance);
    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.00001)) {
        return "< 0.00001";
    }
    return stakedBalanceBigNumber.toFixed(5, (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default().ROUND_DOWN));
};


/***/ }),

/***/ 38766:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => (/* binding */ getFullDecimalMultiplier)
/* harmony export */ });
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50541);
/* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_memoize__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _bigNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85576);


const getFullDecimalMultiplier = lodash_memoize__WEBPACK_IMPORTED_MODULE_0___default()((decimals)=>{
    return _bigNumber__WEBPACK_IMPORTED_MODULE_1__/* .BIG_TEN.pow */ .xp.pow(decimals);
});


/***/ }),

/***/ 60092:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./1.ts": [
		68861,
		8861
	],
	"./5.ts": [
		3272,
		3272
	],
	"./56.ts": [
		36134,
		6134
	],
	"./97.ts": [
		66205,
		6205
	],
	"./common.ts": [
		9886,
		9886
	],
	"./index.ts": [
		65498
	],
	"./priceHelperLps/1.ts": [
		98515
	],
	"./priceHelperLps/5.ts": [
		51973
	],
	"./priceHelperLps/56.ts": [
		81347
	],
	"./priceHelperLps/97.ts": [
		25373
	],
	"./priceHelperLps/getFarmsPriceHelperLpFiles.ts": [
		17970
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = 60092;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 82466:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DW": () => (/* reexport safe */ wagmi_chains__WEBPACK_IMPORTED_MODULE_0__.rinkeby),
/* harmony export */   "LC": () => (/* binding */ bscTest),
/* harmony export */   "RJ": () => (/* reexport safe */ wagmi_chains__WEBPACK_IMPORTED_MODULE_0__.mainnet),
/* harmony export */   "eG": () => (/* binding */ bsc),
/* harmony export */   "ws": () => (/* reexport safe */ wagmi_chains__WEBPACK_IMPORTED_MODULE_0__.goerli)
/* harmony export */ });
/* unused harmony exports avalandche, avalandcheFuji, fantomOpera, fantomTestnet */
/* harmony import */ var wagmi_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22216);
// chains/chains.ts

var avalandche = {
  id: 43114,
  name: "Avalanche C-Chain",
  network: "avalanche",
  rpcUrls: {
    default: "https://rpc.ankr.com/avalanche"
  },
  nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
  blockExplorers: {
    default: {
      name: "snowtrace",
      url: "https://snowtrace.io/"
    }
  }
};
var avalandcheFuji = {
  id: 43113,
  name: "Avalanche Fuji",
  network: "avalanche-fuji",
  rpcUrls: {
    default: "https://rpc.ankr.com/avalanche_fuji"
  },
  nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
  blockExplorers: {
    default: {
      name: "snowtrace",
      url: "https://testnet.snowtrace.io/"
    }
  },
  testnet: true
};
var fantomOpera = {
  id: 250,
  name: "Fantom Opera",
  network: "fantom",
  nativeCurrency: { name: "Fantom", symbol: "FTM", decimals: 18 },
  rpcUrls: {
    default: "https://rpc.ftm.tools"
  },
  blockExplorers: {
    default: {
      name: "FTMScan",
      url: "https://ftmscan.com"
    }
  }
};
var fantomTestnet = {
  id: 4002,
  name: "Fantom Testnet",
  network: "fantom-testnet",
  nativeCurrency: { name: "Fantom", symbol: "FTM", decimals: 18 },
  rpcUrls: {
    default: "https://rpc.testnet.fantom.network"
  },
  blockExplorers: {
    default: {
      name: "FTMScan",
      url: "https://testnet.ftmscan.com"
    }
  },
  testnet: true
};
var bscExplorer = { name: "BscScan", url: "https://bscscan.com" };
var bsc = {
  id: 56,
  name: "BNB Smart Chain",
  network: "bsc",
  rpcUrls: {
    public: "https://bsc-dataseed1.binance.org",
    default: "https://bsc-dataseed1.binance.org"
  },
  blockExplorers: {
    default: bscExplorer,
    etherscan: bscExplorer
  },
  nativeCurrency: {
    name: "Binance Chain Native Token",
    symbol: "BNB",
    decimals: 18
  },
  multicall: {
    address: "0xcA11bde05977b3631167028862bE2a173976CA11",
    blockCreated: 15921452
  }
};
var bscTest = {
  id: 8453,
  name: "Base Chain Mainnet",
  network: "base-mainnet",
  nativeCurrency: {
    decimals: 18,
    name: "Base Chain Native Token",
    symbol: "ETH"
  },
  rpcUrls: {
    public: "https://mainnet.base.org",
    default: "https://mainnet.base.org"
  },
  blockExplorers: {
    default: { name: "BaseScan", url: "https://basescan.org" }
  },
  multicall: {
    address: "0xcA11bde05977b3631167028862bE2a173976CA11",
    blockCreated: 17422483
  },
  testnet: true
};



/***/ }),

/***/ 93725:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 33373:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall2.Call[]","name":"calls","type":"tuple[]"}],"name":"aggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall2.Call[]","name":"calls","type":"tuple[]"}],"name":"blockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall2.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"getBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockCoinbase","outputs":[{"internalType":"address","name":"coinbase","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockDifficulty","outputs":[{"internalType":"uint256","name":"difficulty","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockGasLimit","outputs":[{"internalType":"uint256","name":"gaslimit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"getEthBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall2.Call[]","name":"calls","type":"tuple[]"}],"name":"tryAggregate","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall2.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall2.Call[]","name":"calls","type":"tuple[]"}],"name":"tryBlockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall2.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 93361:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DELEGATION_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"}],"name":"checkpoints","outputs":[{"internalType":"uint32","name":"fromBlock","type":"uint32"},{"internalType":"uint256","name":"votes","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegator","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getCurrentVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"getPriorVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"numCheckpoints","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 93293:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"contract IMasterChefV2","name":"_masterchefV2","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_operator","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lastDepositedTime","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[],"name":"Init","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"lockedAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lockedDuration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"name":"Lock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"name":"Unlock","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"BOOST_WEIGHT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOST_WEIGHT_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DURATION_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DURATION_FACTOR_OVERDUE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CALL_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_LOCK_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_LOCK_DURATION_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_PERFORMANCE_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WITHDRAW_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_WITHDRAW_FEE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DEPOSIT_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_LOCK_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_WITHDRAW_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRECISION_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRECISION_FACTOR_SHARE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UNLOCK_FREE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"available","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"boostContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakePoolPID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"calculateOverdueFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"calculatePerformanceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"calculateTotalPendingCakeRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"calculateWithdrawFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_lockDuration","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"freeFeeUsers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricePerFullShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"inCaseTokensGetStuck","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"dummyToken","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lastHarvestedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"masterchefV2","outputs":[{"internalType":"contract IMasterChefV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"overdueFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"performanceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"performanceFeeContract","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_boostContract","type":"address"}],"name":"setBoostContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_boostWeight","type":"uint256"}],"name":"setBoostWeight","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_durationFactor","type":"uint256"}],"name":"setDurationFactor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_durationFactorOverdue","type":"uint256"}],"name":"setDurationFactorOverdue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"bool","name":"_free","type":"bool"}],"name":"setFreeFeeUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxLockDuration","type":"uint256"}],"name":"setMaxLockDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_performanceFee","type":"uint256"}],"name":"setPerformanceFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_performanceFeeContract","type":"uint256"}],"name":"setPerformanceFeeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_treasury","type":"address"}],"name":"setTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_unlockFreeDuration","type":"uint256"}],"name":"setUnlockFreeDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawFee","type":"uint256"}],"name":"setWithdrawFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawFeeContract","type":"uint256"}],"name":"setWithdrawFeeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_withdrawFeePeriod","type":"uint256"}],"name":"setWithdrawFeePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBoostDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockedAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"uint256","name":"lastDepositedTime","type":"uint256"},{"internalType":"uint256","name":"cakeAtLastUserAction","type":"uint256"},{"internalType":"uint256","name":"lastUserActionTime","type":"uint256"},{"internalType":"uint256","name":"lockStartTime","type":"uint256"},{"internalType":"uint256","name":"lockEndTime","type":"uint256"},{"internalType":"uint256","name":"userBoostedShare","type":"uint256"},{"internalType":"bool","name":"locked","type":"bool"},{"internalType":"uint256","name":"lockedAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawByAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawFeeContract","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawFeePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 93324:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]');

/***/ }),

/***/ 53400:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"_name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"_approved","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"implementsERC721","outputs":[{"name":"_implementsERC721","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"_totalSupply","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"_owner","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"tokenMetadata","outputs":[{"name":"_infoUrl","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"_balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_tokenId","type":"uint256"},{"name":"_approvedAddress","type":"address"},{"name":"_metadata","type":"string"}],"name":"mint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"_symbol","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numTokensTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getOwnerTokens","outputs":[{"name":"_tokenIds","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":true,"name":"_tokenId","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_approved","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 70950:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_lpToken","type":"address"},{"internalType":"contract IBEP20","name":"_offeringToken","type":"address"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"},{"internalType":"uint256","name":"_offeringAmount","type":"uint256"},{"internalType":"uint256","name":"_raisingAmount","type":"uint256"},{"internalType":"address","name":"_adminAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"offeringAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"excessAmount","type":"uint256"}],"name":"Harvest","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"endBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lpAmount","type":"uint256"},{"internalType":"uint256","name":"_offerAmount","type":"uint256"}],"name":"finalWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getOfferingAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getRefundingAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getUserAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"hasHarvest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lpToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offeringAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offeringToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"raisingAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 4554:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_lpToken","type":"address"},{"internalType":"contract IBEP20","name":"_offeringToken","type":"address"},{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"},{"internalType":"address","name":"_adminAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"offeringAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"excessAmount","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"thresholdPoints","type":"uint256"}],"name":"PointParametersSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"offeringAmountPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"raisingAmountPool","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"PoolParametersSet","type":"event"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"campaignId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint8","name":"_pid","type":"uint8"}],"name":"depositPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"endBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lpAmount","type":"uint256"},{"internalType":"uint256","name":"_offerAmount","type":"uint256"}],"name":"finalWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"_pid","type":"uint8"}],"name":"harvestPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lpToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberPools","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offeringToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract PancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_offeringAmountPool","type":"uint256"},{"internalType":"uint256","name":"_raisingAmountPool","type":"uint256"},{"internalType":"uint256","name":"_limitPerUserInLP","type":"uint256"},{"internalType":"bool","name":"_hasTax","type":"bool"},{"internalType":"uint8","name":"_pid","type":"uint8"}],"name":"setPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"thresholdPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_campaignId","type":"uint256"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_thresholdPoints","type":"uint256"}],"name":"updatePointParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"viewPoolInformation","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"viewPoolTaxRateOverflow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserAllocationPools","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserInfo","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bool[]","name":"","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserOfferingAndRefundingAmountsForPools","outputs":[{"internalType":"uint256[3][]","name":"","type":"uint256[3][]"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 49795:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"tokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountTokens","type":"uint256"}],"name":"AdminTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amountLP","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOfferingToken","type":"uint256"}],"name":"AdminWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"offeringAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"excessAmount","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"CreateVestingSchedule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"offeringAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"excessAmount","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"startBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endBlock","type":"uint256"}],"name":"NewStartAndEndBlocks","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"thresholdPoints","type":"uint256"}],"name":"PointParametersSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"offeringAmountPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"raisingAmountPool","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"pid","type":"uint8"}],"name":"PoolParametersSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Released","type":"event"},{"anonymous":false,"inputs":[],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_user","type":"address"}],"name":"WhitelistedAddressAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_user","type":"address"}],"name":"WhitelistedAddressRemoved","type":"event"},{"inputs":[],"name":"IFO_FACTORY","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_BUFFER_BLOCKS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NUMBER_POOLS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"addAddressToWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"}],"name":"addAddressesToWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admissionProfile","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"campaignId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_holder","type":"address"}],"name":"computeNextVestingScheduleIdForHolder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_vestingScheduleId","type":"bytes32"}],"name":"computeReleasableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_holder","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"computeVestingScheduleIdForAddressAndIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_holder","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"computeVestingScheduleIdForAddressAndPid","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint8","name":"_pid","type":"uint8"}],"name":"depositPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"endBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lpAmount","type":"uint256"},{"internalType":"uint256","name":"_offerAmount","type":"uint256"}],"name":"finalWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_vestingScheduleId","type":"bytes32"}],"name":"getVestingSchedule","outputs":[{"components":[{"internalType":"bool","name":"isVestingInitialized","type":"bool"},{"internalType":"address","name":"beneficiary","type":"address"},{"internalType":"uint8","name":"pid","type":"uint8"},{"internalType":"uint256","name":"amountTotal","type":"uint256"},{"internalType":"uint256","name":"released","type":"uint256"}],"internalType":"struct IFOInitializableV5.VestingSchedule","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_holder","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getVestingScheduleByAddressAndIndex","outputs":[{"components":[{"internalType":"bool","name":"isVestingInitialized","type":"bool"},{"internalType":"address","name":"beneficiary","type":"address"},{"internalType":"uint8","name":"pid","type":"uint8"},{"internalType":"uint256","name":"amountTotal","type":"uint256"},{"internalType":"uint256","name":"released","type":"uint256"}],"internalType":"struct IFOInitializableV5.VestingSchedule","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getVestingScheduleIdAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVestingSchedulesCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"}],"name":"getVestingSchedulesCountByBeneficiary","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVestingSchedulesTotalAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWithdrawableOfferingTokenAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"_pid","type":"uint8"}],"name":"harvestPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hehe","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"iCake","outputs":[{"internalType":"contract ICake","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"address","name":"_offeringToken","type":"address"},{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"},{"internalType":"uint256","name":"_maxBufferBlocks","type":"uint256"},{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_iCakeAddress","type":"address"},{"internalType":"uint256","name":"_pointThreshold","type":"uint256"},{"internalType":"address","name":"_admissionProfile","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"isQualifiedNFT","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"isQualifiedPoints","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"isQualifiedWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"isWhitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lpToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offeringToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract PancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pointThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256","name":"_tokenAmount","type":"uint256"}],"name":"recoverWrongTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_vestingScheduleId","type":"bytes32"}],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removeAddressFromWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"}],"name":"removeAddressesFromWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_offeringAmountPool","type":"uint256"},{"internalType":"uint256","name":"_raisingAmountPool","type":"uint256"},{"internalType":"uint256","name":"_limitPerUserInLP","type":"uint256"},{"internalType":"bool","name":"_hasTax","type":"bool"},{"internalType":"uint8","name":"_pid","type":"uint8"},{"internalType":"bool","name":"_isSpecialSale","type":"bool"},{"internalType":"uint256","name":"_vestingPercentage","type":"uint256"},{"internalType":"uint256","name":"_vestingCliff","type":"uint256"},{"internalType":"uint256","name":"_vestingDuration","type":"uint256"},{"internalType":"uint256","name":"_vestingSlicePeriodSeconds","type":"uint256"}],"name":"setPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"thresholdPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdUsed","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTokensOffered","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_campaignId","type":"uint256"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_thresholdPoints","type":"uint256"}],"name":"updatePointParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"}],"name":"updateStartAndEndBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userCreditUsed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vestingRevoked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vestingStartTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"viewPoolInformation","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"viewPoolTaxRateOverflow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"viewPoolVestingInformation","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserAllocationPools","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserInfo","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bool[]","name":"","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint8[]","name":"_pids","type":"uint8[]"}],"name":"viewUserOfferingAndRefundingAmountsForPools","outputs":[{"internalType":"uint256[3][]","name":"","type":"uint256[3][]"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 48592:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_cakeTokenAddress","type":"address"},{"internalType":"address","name":"_randomGeneratorAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AdminTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"firstTicketIdNextLottery","type":"uint256"}],"name":"LotteryClose","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"injectedAmount","type":"uint256"}],"name":"LotteryInjection","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"finalNumber","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"countWinningTickets","type":"uint256"}],"name":"LotteryNumberDrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceTicketInCake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"firstTicketId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"injectedAmount","type":"uint256"}],"name":"LotteryOpen","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"treasury","type":"address"},{"indexed":false,"internalType":"address","name":"injector","type":"address"}],"name":"NewOperatorAndTreasuryAndInjectorAddresses","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"randomGenerator","type":"address"}],"name":"NewRandomGenerator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberTickets","type":"uint256"}],"name":"TicketsClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"uint256","name":"lotteryId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberTickets","type":"uint256"}],"name":"TicketsPurchase","type":"event"},{"inputs":[],"name":"MAX_LENGTH_LOTTERY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_TREASURY_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DISCOUNT_DIVISOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_LENGTH_LOTTERY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"uint32[]","name":"_ticketNumbers","type":"uint32[]"}],"name":"buyTickets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_discountDivisor","type":"uint256"},{"internalType":"uint256","name":"_priceTicket","type":"uint256"},{"internalType":"uint256","name":"_numberTickets","type":"uint256"}],"name":"calculateTotalPriceForBulkTickets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_randomGeneratorAddress","type":"address"}],"name":"changeRandomGenerator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"uint256[]","name":"_ticketIds","type":"uint256[]"},{"internalType":"uint32[]","name":"_brackets","type":"uint32[]"}],"name":"claimTickets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"}],"name":"closeLottery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentLotteryId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentTicketId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"bool","name":"_autoInjection","type":"bool"}],"name":"drawFinalNumberAndMakeLotteryClaimable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"injectFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"injectorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxNumberTicketsPerBuyOrClaim","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPriceTicketInCake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minPriceTicketInCake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingInjectionNextLottery","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"randomGenerator","outputs":[{"internalType":"contract IRandomNumberGenerator","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256","name":"_tokenAmount","type":"uint256"}],"name":"recoverWrongTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxNumberTicketsPerBuy","type":"uint256"}],"name":"setMaxNumberTicketsPerBuy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minPriceTicketInCake","type":"uint256"},{"internalType":"uint256","name":"_maxPriceTicketInCake","type":"uint256"}],"name":"setMinAndMaxTicketPriceInCake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operatorAddress","type":"address"},{"internalType":"address","name":"_treasuryAddress","type":"address"},{"internalType":"address","name":"_injectorAddress","type":"address"}],"name":"setOperatorAndTreasuryAndInjectorAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_priceTicketInCake","type":"uint256"},{"internalType":"uint256","name":"_discountDivisor","type":"uint256"},{"internalType":"uint256[6]","name":"_rewardsBreakdown","type":"uint256[6]"},{"internalType":"uint256","name":"_treasuryFee","type":"uint256"}],"name":"startLottery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"viewCurrentLotteryId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"}],"name":"viewLottery","outputs":[{"components":[{"internalType":"enum PancakeSwapLottery.Status","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"priceTicketInCake","type":"uint256"},{"internalType":"uint256","name":"discountDivisor","type":"uint256"},{"internalType":"uint256[6]","name":"rewardsBreakdown","type":"uint256[6]"},{"internalType":"uint256","name":"treasuryFee","type":"uint256"},{"internalType":"uint256[6]","name":"cakePerBracket","type":"uint256[6]"},{"internalType":"uint256[6]","name":"countWinnersPerBracket","type":"uint256[6]"},{"internalType":"uint256","name":"firstTicketId","type":"uint256"},{"internalType":"uint256","name":"firstTicketIdNextLottery","type":"uint256"},{"internalType":"uint256","name":"amountCollectedInCake","type":"uint256"},{"internalType":"uint32","name":"finalNumber","type":"uint32"}],"internalType":"struct PancakeSwapLottery.Lottery","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ticketIds","type":"uint256[]"}],"name":"viewNumbersAndStatusesForTicketIds","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"},{"internalType":"bool[]","name":"","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"uint256","name":"_ticketId","type":"uint256"},{"internalType":"uint32","name":"_bracket","type":"uint32"}],"name":"viewRewardsForTicketId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_lotteryId","type":"uint256"},{"internalType":"uint256","name":"_cursor","type":"uint256"},{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"viewUserInfoForLotteryId","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint32[]","name":"","type":"uint32[]"},{"internalType":"bool[]","name":"","type":"bool[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 84951:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IMasterChef","name":"_MASTER_CHEF","type":"address"},{"internalType":"contract IBEP20","name":"_CAKE","type":"address"},{"internalType":"uint256","name":"_MASTER_PID","type":"uint256"},{"internalType":"address","name":"_burnAdmin","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"allocPoint","type":"uint256"},{"indexed":true,"internalType":"contract IBEP20","name":"lpToken","type":"address"},{"indexed":false,"internalType":"bool","name":"isRegular","type":"bool"}],"name":"AddPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[],"name":"Init","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"allocPoint","type":"uint256"}],"name":"SetPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"boostContract","type":"address"}],"name":"UpdateBoostContract","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMultiplier","type":"uint256"}],"name":"UpdateBoostMultiplier","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldAdmin","type":"address"},{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"}],"name":"UpdateBurnAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"burnRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"regularFarmRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"specialFarmRate","type":"uint256"}],"name":"UpdateCakeRate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpSupply","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"accCakePerShare","type":"uint256"}],"name":"UpdatePool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"bool","name":"isValid","type":"bool"}],"name":"UpdateWhiteList","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"ACC_CAKE_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BOOST_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CAKE","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CAKE_RATE_TOTAL_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTERCHEF_CAKE_PER_BLOCK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTER_CHEF","outputs":[{"internalType":"contract IMasterChef","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MASTER_PID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_BOOST_PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_allocPoint","type":"uint256"},{"internalType":"contract IBEP20","name":"_lpToken","type":"address"},{"internalType":"bool","name":"_isRegular","type":"bool"},{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"add","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"boostContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"burnAdmin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"burnCake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_isRegular","type":"bool"}],"name":"cakePerBlock","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakePerBlockToBurn","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeRateToBurn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeRateToRegularFarm","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeRateToSpecialFarm","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"getBoostMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvestFromMasterChef","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IBEP20","name":"dummyToken","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lastBurnedBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lpToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"massUpdatePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"address","name":"_user","type":"address"}],"name":"pendingCake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"uint256","name":"accCakePerShare","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"totalBoostedShare","type":"uint256"},{"internalType":"bool","name":"isRegular","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLength","outputs":[{"internalType":"uint256","name":"pools","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_allocPoint","type":"uint256"},{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalRegularAllocPoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSpecialAllocPoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newBoostContract","type":"address"}],"name":"updateBoostContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_newMultiplier","type":"uint256"}],"name":"updateBoostMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newAdmin","type":"address"}],"name":"updateBurnAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_burnRate","type":"uint256"},{"internalType":"uint256","name":"_regularFarmRate","type":"uint256"},{"internalType":"uint256","name":"_specialFarmRate","type":"uint256"},{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"updateCakeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePool","outputs":[{"components":[{"internalType":"uint256","name":"accCakePerShare","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"totalBoostedShare","type":"uint256"},{"internalType":"bool","name":"isRegular","type":"bool"}],"internalType":"struct MasterChefV2.PoolInfo","name":"pool","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"bool","name":"_isValid","type":"bool"}],"name":"updateWhiteList","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"},{"internalType":"uint256","name":"boostMultiplier","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whiteList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 8028:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract CakeToken","name":"_cake","type":"address"},{"internalType":"contract SyrupBar","name":"_syrup","type":"address"},{"internalType":"address","name":"_devaddr","type":"address"},{"internalType":"uint256","name":"_cakePerBlock","type":"uint256"},{"internalType":"uint256","name":"_startBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"BONUS_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_allocPoint","type":"uint256"},{"internalType":"contract IBEP20","name":"_lpToken","type":"address"},{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"add","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cake","outputs":[{"internalType":"contract CakeToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakePerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_devaddr","type":"address"}],"name":"dev","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"devaddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"enterStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_from","type":"uint256"},{"internalType":"uint256","name":"_to","type":"uint256"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"leaveStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"massUpdatePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"migrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrator","outputs":[{"internalType":"contract IMigratorChef","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"address","name":"_user","type":"address"}],"name":"pendingCake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"contract IBEP20","name":"lpToken","type":"address"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"accCakePerShare","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_allocPoint","type":"uint256"},{"internalType":"bool","name":"_withUpdate","type":"bool"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IMigratorChef","name":"_migrator","type":"address"}],"name":"setMigrator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"syrup","outputs":[{"internalType":"contract SyrupBar","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAllocPoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"multiplierNumber","type":"uint256"}],"name":"updateMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 60290:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_treasuryAddress","type":"address"},{"internalType":"address","name":"_WBNBAddress","type":"address"},{"internalType":"uint256","name":"_minimumAskPrice","type":"uint256"},{"internalType":"uint256","name":"_maximumAskPrice","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"AskCancel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"askPrice","type":"uint256"}],"name":"AskNew","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"askPrice","type":"uint256"}],"name":"AskUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"}],"name":"CollectionClose","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":true,"internalType":"address","name":"whitelistChecker","type":"address"},{"indexed":false,"internalType":"uint256","name":"tradingFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"creatorFee","type":"uint256"}],"name":"CollectionNew","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":true,"internalType":"address","name":"whitelistChecker","type":"address"},{"indexed":false,"internalType":"uint256","name":"tradingFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"creatorFee","type":"uint256"}],"name":"CollectionUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"},{"indexed":true,"internalType":"address","name":"treasury","type":"address"}],"name":"NewAdminAndTreasuryAddresses","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minimumAskPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maximumAskPrice","type":"uint256"}],"name":"NewMinimumAndMaximumAskPrices","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"NonFungibleTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RevenueClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collection","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"address","name":"buyer","type":"address"},{"indexed":false,"internalType":"uint256","name":"askPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"netPrice","type":"uint256"},{"indexed":false,"internalType":"bool","name":"withBNB","type":"bool"}],"name":"Trade","type":"event"},{"inputs":[],"name":"TOTAL_MAX_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WBNB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_whitelistChecker","type":"address"},{"internalType":"uint256","name":"_tradingFee","type":"uint256"},{"internalType":"uint256","name":"_creatorFee","type":"uint256"}],"name":"addCollection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"buyTokenUsingBNB","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"buyTokenUsingWBNB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"calculatePriceAndFeesForCollection","outputs":[{"internalType":"uint256","name":"netPrice","type":"uint256"},{"internalType":"uint256","name":"tradingFee","type":"uint256"},{"internalType":"uint256","name":"creatorFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"}],"name":"canTokensBeListed","outputs":[{"internalType":"bool[]","name":"listingStatuses","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"cancelAskOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimPendingRevenue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"}],"name":"closeCollectionForTradingAndListing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_askPrice","type":"uint256"}],"name":"createAskOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maximumAskPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumAskPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_newPrice","type":"uint256"}],"name":"modifyAskOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_collection","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_whitelistChecker","type":"address"},{"internalType":"uint256","name":"_tradingFee","type":"uint256"},{"internalType":"uint256","name":"_creatorFee","type":"uint256"}],"name":"modifyCollection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"pendingRevenue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverFungibleTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"recoverNonFungibleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_treasuryAddress","type":"address"}],"name":"setAdminAndTreasuryAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumAskPrice","type":"uint256"},{"internalType":"uint256","name":"_maximumAskPrice","type":"uint256"}],"name":"updateMinimumAndMaximumPrices","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewAsksByCollection","outputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"}],"internalType":"struct ERC721NFTMarketV1.Ask[]","name":"askInfo","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"viewAsksByCollectionAndTokenIds","outputs":[{"internalType":"bool[]","name":"statuses","type":"bool[]"},{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"}],"internalType":"struct ERC721NFTMarketV1.Ask[]","name":"askInfo","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"collection","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewAsksByCollectionAndSeller","outputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"}],"internalType":"struct ERC721NFTMarketV1.Ask[]","name":"askInfo","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"viewCollections","outputs":[{"internalType":"address[]","name":"collectionAddresses","type":"address[]"},{"components":[{"internalType":"enum ERC721NFTMarketV1.CollectionStatus","name":"status","type":"uint8"},{"internalType":"address","name":"creatorAddress","type":"address"},{"internalType":"address","name":"whitelistChecker","type":"address"},{"internalType":"uint256","name":"tradingFee","type":"uint256"},{"internalType":"uint256","name":"creatorFee","type":"uint256"}],"internalType":"struct ERC721NFTMarketV1.Collection[]","name":"collectionDetails","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 3085:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeSquad","type":"address"},{"internalType":"uint256","name":"_maxReserveSupply","type":"uint256"},{"internalType":"uint256","name":"_pricePerTicket","type":"uint256"},{"internalType":"address","name":"_cakeToken","type":"address"},{"internalType":"address","name":"_pancakeProfile","type":"address"},{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_vrfCoordinator","type":"address"},{"internalType":"address","name":"_linkToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"users","type":"address[]"}],"name":"AddressesUnwhitelisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"users","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"numberTickets","type":"uint256[]"}],"name":"AddressesWhitelisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"numberTokens","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"NewOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"pricePerTicket","type":"uint256"}],"name":"NewPricePerTicket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxPerAddress","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxPerTransaction","type":"uint256"}],"name":"NewSaleProperties","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"latestRequestId","type":"bytes32"},{"indexed":false,"internalType":"enum NFTSale.Status","name":"currentStatus","type":"uint8"}],"name":"RandomnessRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum NFTSale.Status","name":"newStatus","type":"uint8"}],"name":"SaleStatusUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"numberTickets","type":"uint256"}],"name":"TicketsDistributed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"inputs":[{"internalType":"uint256","name":"_numberTickets","type":"uint256"}],"name":"buyTickets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_numberTickets","type":"uint256"}],"name":"buyTicketsInPreSaleForGen0","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ticketId","type":"uint256"}],"name":"calculateTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"canClaimForGen0","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"changeOwnershipPancakeSquad","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentStatus","outputs":[{"internalType":"enum NFTSale.Status","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"drawRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_numberTickets","type":"uint256"}],"name":"getReserveTickets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"keyHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRequestId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxPerAddress","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPerTransaction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxReserveSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ticketIds","type":"uint256[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"numberTicketsForGen0","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"numberTicketsUsedForGen0","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeSquad","outputs":[{"internalType":"contract PancakeSquad","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pricePerTicket","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"randomOffsetNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_keyHash","type":"bytes32"}],"name":"setFeeAndKeyHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"setOperatorAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startTimestamp","type":"uint256"},{"internalType":"uint256","name":"_maxPerAddress","type":"uint256"},{"internalType":"uint256","name":"_maxPerTransaction","type":"uint256"}],"name":"setSaleProperties","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pricePerTicket","type":"uint256"}],"name":"setTicketPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"ticketsOfUserBySize","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTicketsDistributed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"}],"name":"unwhitelistAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum NFTSale.Status","name":"_status","type":"uint8"}],"name":"updateSaleStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"viewNumberTicketsOfUser","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"},{"internalType":"uint256[]","name":"_numberTickets","type":"uint256[]"}],"name":"whitelistAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 31534:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint64","name":"_chainId","type":"uint64"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"AckEmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"AckWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"lpToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"mockPoolId","type":"uint256"}],"name":"AddedPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"AddedWhiteListPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"FallbackWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newOperator","type":"address"},{"indexed":true,"internalType":"address","name":"oldOperator","type":"address"}],"name":"OperatorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"BSC_CHAIN_ID","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CROSS_FARMING_RECEIVER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CROSS_FARMING_SENDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_mcv2pid","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"ackEmergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_mcv2pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"ackWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_mcv2PoolId","type":"uint256"}],"name":"add","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mcv2Pid","type":"uint256"}],"name":"addWhiteListPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"calcFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"enum DataTypes.MessageTypes","name":"_msgType","type":"uint8"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"encodeMessage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"fallbackWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"messageBus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"contract IERC20","name":"lpToken","type":"address"},{"internalType":"uint256","name":"mcv2PoolId","type":"uint256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolMapping","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"usedNonce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"lastActionTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"whitelistPool","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"}]');

/***/ }),

/***/ 60664:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"","type":"uint8"}],"name":"bunnyBurnCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"","type":"uint8"}],"name":"bunnyCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getBunnyId","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"getBunnyName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getBunnyNameOfTokenId","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"_bunnyId","type":"uint8"},{"internalType":"string","name":"_name","type":"string"}],"name":"setBunnyName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 92335:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_cakeToken","type":"address"},{"internalType":"uint256","name":"_numberCakeToReactivate","type":"uint256"},{"internalType":"uint256","name":"_numberCakeToRegister","type":"uint256"},{"internalType":"uint256","name":"_numberCakeToUpdate","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"string","name":"teamName","type":"string"}],"name":"TeamAdd","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"TeamPointIncrease","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldTeamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTeamId","type":"uint256"}],"name":"UserChangeTeam","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"address","name":"nftAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"UserNew","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"}],"name":"UserPause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"UserPointIncrease","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"numberPoints","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"UserPointIncreaseMultiple","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"address","name":"nftAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"UserReactivate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address","name":"nftAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"UserUpdate","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NFT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SPECIAL_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"}],"name":"addNftAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_teamName","type":"string"},{"internalType":"string","name":"_teamDescription","type":"string"}],"name":"addTeam","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"uint256","name":"_newTeamId","type":"uint256"}],"name":"changeTeam","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"createProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"}],"name":"getTeamProfile","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getUserProfile","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"hasRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_campaignId","type":"uint256"}],"name":"increaseTeamPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_campaignId","type":"uint256"}],"name":"increaseUserPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_userAddresses","type":"address[]"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"},{"internalType":"uint256","name":"_campaignId","type":"uint256"}],"name":"increaseUserPointsMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"}],"name":"makeTeamJoinable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"}],"name":"makeTeamNotJoinable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"numberActiveProfiles","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberCakeToReactivate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberCakeToRegister","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberCakeToUpdate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberTeams","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"reactivateProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"}],"name":"removeTeamPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"}],"name":"removeUserPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_userAddresses","type":"address[]"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"}],"name":"removeUserPointsMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"string","name":"_teamName","type":"string"},{"internalType":"string","name":"_teamDescription","type":"string"}],"name":"renameTeam","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newNumberCakeToReactivate","type":"uint256"},{"internalType":"uint256","name":"_newNumberCakeToRegister","type":"uint256"},{"internalType":"uint256","name":"_newNumberCakeToUpdate","type":"uint256"}],"name":"updateNumberCake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftAddress","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"updateProfile","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 58750:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfileAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"_contractAddress","type":"address"},{"internalType":"uint256","name":"_campaignId","type":"uint256"},{"internalType":"uint256","name":"_thresholdToClaim","type":"uint256"},{"internalType":"uint256","name":"_numberPoints","type":"uint256"}],"name":"addIFOAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"address","name":"_contractAddress","type":"address"}],"name":"checkClaimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"},{"internalType":"address[]","name":"_contractAddresses","type":"address[]"}],"name":"checkClaimStatuses","outputs":[{"internalType":"bool[]","name":"","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_contractAddress","type":"address"}],"name":"getPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"ifos","outputs":[{"internalType":"uint256","name":"thresholdToClaim","type":"uint256"},{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"uint256","name":"numberPoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 98265:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IERC20","name":"_cake","type":"address"},{"internalType":"contract ICakePool","name":"_cakePool","type":"address"},{"internalType":"contract IPancakeSwapPotteryDraw","name":"_potteryDraw","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_keeper","type":"address"},{"internalType":"uint256","name":"_lockTime","type":"uint256"},{"internalType":"uint256","name":"_maxTotalDeposit","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"},{"indexed":true,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lockAmount","type":"uint256"}],"name":"Lock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"uint16","name":"burnPercentage","type":"uint16"}],"name":"SetBurnPercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"address","name":"keeper","type":"address"}],"name":"SetKeeper","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"},{"indexed":true,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"earnAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"burnAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"apyAmount","type":"uint256"}],"name":"Unlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"LOCK_PERIOD","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_LOCK_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"burnPercentage","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assets","type":"uint256"},{"internalType":"address","name":"_receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_nums","type":"uint256[]"}],"name":"draw","outputs":[{"internalType":"address[]","name":"users","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"generateUserId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getLockTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxTotalDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getNumberOfTickets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Vault.Status","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lockCake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lockEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lockStartTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"},{"internalType":"address","name":"_receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passLockTime","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_shares","type":"uint256"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_burnPercentage","type":"uint16"}],"name":"setBurnPercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_keeper","type":"address"}],"name":"setKeeper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockCake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockCake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assets","type":"uint256"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 45883:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_oracleAddress","type":"address"},{"internalType":"address","name":"_adminAddress","type":"address"},{"internalType":"address","name":"_operatorAddress","type":"address"},{"internalType":"uint256","name":"_intervalSeconds","type":"uint256"},{"internalType":"uint256","name":"_bufferSeconds","type":"uint256"},{"internalType":"uint256","name":"_minBetAmount","type":"uint256"},{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"},{"internalType":"uint256","name":"_treasuryFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBear","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BetBull","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"EndRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"}],"name":"LockRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"NewAdminAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bufferSeconds","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"intervalSeconds","type":"uint256"}],"name":"NewBufferAndIntervalSeconds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minBetAmount","type":"uint256"}],"name":"NewMinBetAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"NewOperatorAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oracle","type":"address"}],"name":"NewOracle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oracleUpdateAllowance","type":"uint256"}],"name":"NewOracleUpdateAllowance","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryFee","type":"uint256"}],"name":"NewTreasuryFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryAmount","type":"uint256"}],"name":"RewardsCalculated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"StartRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TreasuryClaim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"MAX_TREASURY_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"betBear","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"betBull","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"bufferSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"epochs","type":"uint256[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"claimable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executeRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisLockOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisLockRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"genesisStartOnce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"genesisStartRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"cursor","type":"uint256"},{"internalType":"uint256","name":"size","type":"uint256"}],"name":"getUserRounds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"components":[{"internalType":"enum PancakePredictionV2.Position","name":"position","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"internalType":"struct PancakePredictionV2.BetInfo[]","name":"","type":"tuple[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserRoundsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"intervalSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"ledger","outputs":[{"internalType":"enum PancakePredictionV2.Position","name":"position","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minBetAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"operatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"contract AggregatorV3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleLatestRoundId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracleUpdateAllowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"refundable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rounds","outputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"lockTimestamp","type":"uint256"},{"internalType":"uint256","name":"closeTimestamp","type":"uint256"},{"internalType":"int256","name":"lockPrice","type":"int256"},{"internalType":"int256","name":"closePrice","type":"int256"},{"internalType":"uint256","name":"lockOracleId","type":"uint256"},{"internalType":"uint256","name":"closeOracleId","type":"uint256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"bullAmount","type":"uint256"},{"internalType":"uint256","name":"bearAmount","type":"uint256"},{"internalType":"uint256","name":"rewardBaseCalAmount","type":"uint256"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"bool","name":"oracleCalled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bufferSeconds","type":"uint256"},{"internalType":"uint256","name":"_intervalSeconds","type":"uint256"}],"name":"setBufferAndIntervalSeconds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minBetAmount","type":"uint256"}],"name":"setMinBetAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operatorAddress","type":"address"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"setOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_oracleUpdateAllowance","type":"uint256"}],"name":"setOracleUpdateAllowance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_treasuryFee","type":"uint256"}],"name":"setTreasuryFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userRounds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 86477:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_syrup","type":"address"},{"internalType":"contract IBEP20","name":"_rewardToken","type":"address"},{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"bonusEndBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyRewardWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_from","type":"uint256"},{"internalType":"uint256","name":"_to","type":"uint256"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"massUpdatePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"pendingReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"contract IBEP20","name":"lpToken","type":"address"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"accCakePerShare","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stopReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"syrup","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 9022:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"contract IBEP20","name":"_stakedToken","type":"address"},{"internalType":"contract IBEP20","name":"_rewardToken","type":"address"},{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"},{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"},{"internalType":"uint256","name":"_poolLimitPerUser","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"tokenRecovered","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AdminTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"poolLimitPerUser","type":"uint256"}],"name":"NewPoolLimit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPerBlock","type":"uint256"}],"name":"NewRewardPerBlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"startBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endBlock","type":"uint256"}],"name":"NewStartAndEndBlocks","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"RewardsStop","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"PRECISION_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"accTokenPerShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bonusEndBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"emergencyRewardWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hasUserLimit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastRewardBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberBlocksForUserLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"pendingReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLimitPerUser","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256","name":"_tokenAmount","type":"uint256"}],"name":"recoverWrongTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakedToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stopReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_hasUserLimit","type":"bool"},{"internalType":"uint256","name":"_poolLimitPerUser","type":"uint256"}],"name":"updatePoolLimitPerUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardPerBlock","type":"uint256"}],"name":"updateRewardPerBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_bonusEndBlock","type":"uint256"}],"name":"updateStartAndEndBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ 66314:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_pancakeProfileAddress","type":"address"},{"internalType":"address","name":"_bunnyStationAddress","type":"address"},{"internalType":"address","name":"_cakeTokenAddress","type":"address"},{"internalType":"address","name":"_darTokenAddress","type":"address"},{"internalType":"uint256","name":"_competitionId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum TradingCompV4.CompetitionStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"NewCompetitionStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"TeamRewardsUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserRegister","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"userAddresses","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"rewardGroup","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"UserUpdateMultiple","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"teamId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"competitionId","type":"uint256"}],"name":"WinningTeam","type":"event"},{"inputs":[],"name":"bunnyId","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyMintingStation","outputs":[{"internalType":"contract BunnyMintingStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bunnyTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cakeToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimCakeRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"claimDarRemainder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"claimInformation","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"competitionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentStatus","outputs":[{"internalType":"enum TradingCompV4.CompetitionStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"darToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numberTeams","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeProfile","outputs":[{"internalType":"contract IPancakeProfile","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TradingCompV4.CompetitionStatus","name":"_status","type":"uint8"}],"name":"updateCompetitionStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_teamId","type":"uint256"},{"internalType":"uint256[5]","name":"_userCampaignIds","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_darRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_pointRewards","type":"uint256[5]"}],"name":"updateTeamRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_addressesToUpdate","type":"address[]"},{"internalType":"uint256","name":"_rewardGroup","type":"uint256"}],"name":"updateUserStatusMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_winningTeamId","type":"uint256"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"uint8","name":"_bunnyId","type":"uint8"}],"name":"updateWinningTeamAndTokenURIAndBunnyId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userTradingStats","outputs":[{"internalType":"bool","name":"hasClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"viewRewardTeams","outputs":[{"components":[{"internalType":"uint256[5]","name":"userCampaignId","type":"uint256[5]"},{"internalType":"uint256[5]","name":"cakeRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"darRewards","type":"uint256[5]"},{"internalType":"uint256[5]","name":"pointUsers","type":"uint256[5]"}],"internalType":"struct TradingCompV4.CompetitionRewards[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winningTeamId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

/***/ }),

/***/ 69253:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"guy","type":"address"},{"name":"wad","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":true,"name":"guy","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":true,"name":"dst","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"dst","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Withdrawal","type":"event"}]');

/***/ }),

/***/ 5534:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"_WBNBAddress","type":"address"},{"internalType":"address","name":"_pancakeRouter","type":"address"},{"internalType":"uint256","name":"_maxZapReverseRatio","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountTokens","type":"uint256"}],"name":"AdminTokenRecovery","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxZapReverseRatio","type":"uint256"}],"name":"NewMaxZapReverseRatio","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenToZap","type":"address"},{"indexed":true,"internalType":"address","name":"lpToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpTokenAmountReceived","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"ZapIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0ToZap","type":"address"},{"indexed":true,"internalType":"address","name":"token1ToZap","type":"address"},{"indexed":false,"internalType":"address","name":"lpToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"token0AmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"token1AmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpTokenAmountReceived","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"ZapInRebalancing","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"lpToken","type":"address"},{"indexed":true,"internalType":"address","name":"tokenToReceive","type":"address"},{"indexed":false,"internalType":"uint256","name":"lpTokenAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenAmountReceived","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"ZapOut","type":"event"},{"inputs":[],"name":"MAX_INT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WBNB","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token0ToZap","type":"address"},{"internalType":"address","name":"_token1ToZap","type":"address"},{"internalType":"uint256","name":"_token0AmountIn","type":"uint256"},{"internalType":"uint256","name":"_token1AmountIn","type":"uint256"},{"internalType":"address","name":"_lpToken","type":"address"}],"name":"estimateZapInRebalancingSwap","outputs":[{"internalType":"uint256","name":"swapAmountIn","type":"uint256"},{"internalType":"uint256","name":"swapAmountOut","type":"uint256"},{"internalType":"bool","name":"sellToken0","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenToZap","type":"address"},{"internalType":"uint256","name":"_tokenAmountIn","type":"uint256"},{"internalType":"address","name":"_lpToken","type":"address"}],"name":"estimateZapInSwap","outputs":[{"internalType":"uint256","name":"swapAmountIn","type":"uint256"},{"internalType":"uint256","name":"swapAmountOut","type":"uint256"},{"internalType":"address","name":"swapTokenOut","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_lpTokenAmount","type":"uint256"},{"internalType":"address","name":"_tokenToReceive","type":"address"}],"name":"estimateZapOutSwap","outputs":[{"internalType":"uint256","name":"swapAmountIn","type":"uint256"},{"internalType":"uint256","name":"swapAmountOut","type":"uint256"},{"internalType":"address","name":"swapTokenOut","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxZapReverseRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pancakeRouter","outputs":[{"internalType":"contract IPancakeRouter02","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256","name":"_tokenAmount","type":"uint256"}],"name":"recoverWrongTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxZapInverseRatio","type":"uint256"}],"name":"updateMaxZapInverseRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"}],"name":"zapInBNB","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_token1ToZap","type":"address"},{"internalType":"uint256","name":"_token1AmountIn","type":"uint256"},{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_tokenAmountInMax","type":"uint256"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"},{"internalType":"bool","name":"_isToken0Sold","type":"bool"}],"name":"zapInBNBRebalancing","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenToZap","type":"address"},{"internalType":"uint256","name":"_tokenAmountIn","type":"uint256"},{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"}],"name":"zapInToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token0ToZap","type":"address"},{"internalType":"address","name":"_token1ToZap","type":"address"},{"internalType":"uint256","name":"_token0AmountIn","type":"uint256"},{"internalType":"uint256","name":"_token1AmountIn","type":"uint256"},{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_tokenAmountInMax","type":"uint256"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"},{"internalType":"bool","name":"_isToken0Sold","type":"bool"}],"name":"zapInTokenRebalancing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_lpTokenAmount","type":"uint256"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"},{"internalType":"uint256","name":"_totalTokenAmountOutMin","type":"uint256"}],"name":"zapOutBNB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"address","name":"_tokenToReceive","type":"address"},{"internalType":"uint256","name":"_lpTokenAmount","type":"uint256"},{"internalType":"uint256","name":"_tokenAmountOutMin","type":"uint256"},{"internalType":"uint256","name":"_totalTokenAmountOutMin","type":"uint256"}],"name":"zapOutToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]');

/***/ })

};
;
//# sourceMappingURL=3579.js.map