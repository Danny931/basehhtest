{"version":3,"file":"6737.js","mappings":"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","sources":["webpack://web/./src/config/constants/nftsCollections/delist.ts","webpack://web/./src/state/nftMarket/queries.ts","webpack://web/./src/state/nftMarket/helpers.ts","webpack://web/./src/state/nftMarket/types.ts","webpack://web/./src/views/Nft/market/constants.ts"],"sourcesContent":["const DELIST_COLLECTIONS = {\n  '0x4D89eBf7b1F66806A4C99Df71D22b7b9efC6bB0b': {\n    active: false,\n    address: '0x4D89eBf7b1F66806A4C99Df71D22b7b9efC6bB0b',\n    avatar: '',\n    banner: {\n      large: '',\n      small: '',\n    },\n    createdAt: '',\n    creatorAddress: '',\n    creatorFee: '',\n    description: '',\n    id: '0x4d89ebf7b1f66806a4c99df71d22b7b9efc6bb0b',\n    name: 'Baked Potatoes',\n    numberTokensListed: '76',\n    owner: '0xCd1B0abBc3E55E91FCC5AEE393525e68478C2952',\n    symbol: 'POT',\n    totalSupply: '',\n    totalTrades: '',\n    totalVolumeBNB: '',\n    tradingFee: '',\n    updatedAt: '',\n    verified: true,\n    whitelistChecker: '',\n  },\n  '0xC448498DDC536ad6F5d437325725dCf504d2d964': {\n    active: false,\n    address: '0xC448498DDC536ad6F5d437325725dCf504d2d964',\n    avatar: '',\n    banner: {\n      large: '',\n      small: '',\n    },\n    createdAt: '',\n    creatorAddress: '',\n    creatorFee: '',\n    description: '',\n    id: '0xC448498DDC536ad6F5d437325725dCf504d2d964',\n    name: 'Catbread',\n    numberTokensListed: '9385',\n    owner: '0xC9A81c56eb07397989907fa6BcC121B593d8f141',\n    symbol: 'CATBREADNFT',\n    totalSupply: '',\n    totalTrades: '',\n    totalVolumeBNB: '',\n    tradingFee: '',\n    updatedAt: '',\n    verified: true,\n    whitelistChecker: '',\n  },\n  '0x44d85770aEa263F9463418708125Cd95e308299B': {\n    active: false,\n    address: '0x44d85770aEa263F9463418708125Cd95e308299B',\n    avatar: '',\n    banner: {\n      large: '',\n      small: '',\n    },\n    createdAt: '',\n    creatorAddress: '',\n    creatorFee: '',\n    description: '',\n    id: '0x44d85770aEa263F9463418708125Cd95e308299B',\n    name: 'BornBadBoys',\n    numberTokensListed: '1846',\n    owner: '0x952B8A6AC7957B769C6cAD934b128f2d27368565',\n    symbol: 'BBB',\n    totalSupply: '',\n    totalTrades: '',\n    totalVolumeBNB: '',\n    tradingFee: '',\n    updatedAt: '',\n    verified: true,\n    whitelistChecker: '',\n  },\n}\n\nexport default DELIST_COLLECTIONS\n","export const baseNftFields = `\n  tokenId\n  metadataUrl\n  currentAskPrice\n  currentSeller\n  latestTradedPriceInBNB\n  tradeVolumeBNB\n  totalTrades\n  isTradable\n  updatedAt\n  otherId\n  collection {\n    id\n  }\n`\n\nexport const baseTransactionFields = `\n  id\n  block\n  timestamp\n  askPrice\n  netPrice\n  withBNB\n  buyer {\n    id\n  }\n  seller {\n    id\n  }\n`\n\nexport const collectionBaseFields = `\n  id\n  name\n  symbol\n  active\n  totalTrades\n  totalVolumeBNB\n  numberTokensListed\n  creatorAddress\n  tradingFee\n  creatorFee\n  whitelistChecker\n`\n","import { gql, request } from 'graphql-request'\nimport { stringify } from 'querystring'\nimport { API_NFT, GRAPH_API_NFTMARKET } from 'config/constants/endpoints'\nimport { multicallv2 } from 'utils/multicall'\nimport { isAddress } from 'utils'\nimport erc721Abi from 'config/abi/erc721.json'\nimport range from 'lodash/range'\nimport groupBy from 'lodash/groupBy'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { getNftMarketContract } from 'utils/contractHelpers'\nimport { NOT_ON_SALE_SELLER } from 'config/constants'\nimport DELIST_COLLECTIONS from 'config/constants/nftsCollections/delist'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { formatBigNumber } from '@pancakeswap/utils/formatBalance'\nimport { getNftMarketAddress } from 'utils/addressHelpers'\nimport nftMarketAbi from 'config/abi/nftMarket.json'\nimport fromPairs from 'lodash/fromPairs'\nimport {\n  ApiCollection,\n  ApiCollections,\n  ApiResponseCollectionTokens,\n  ApiResponseSpecificToken,\n  AskOrderType,\n  Collection,\n  CollectionMarketDataBaseFields,\n  NftActivityFilter,\n  NftLocation,\n  NftToken,\n  TokenIdWithCollectionAddress,\n  TokenMarketData,\n  Transaction,\n  AskOrder,\n  ApiSingleTokenData,\n  NftAttribute,\n  ApiTokenFilterResponse,\n  ApiCollectionsResponse,\n  MarketEvent,\n  UserActivity,\n} from './types'\nimport { baseNftFields, collectionBaseFields, baseTransactionFields } from './queries'\n\n/**\n * API HELPERS\n */\n\n/**\n * Fetch static data from all collections using the API\n * @returns\n */\nexport const getCollectionsApi = async (): Promise<ApiCollectionsResponse> => {\n  const res = await fetch(`${API_NFT}/collections`)\n  if (res.ok) {\n    const json = await res.json()\n    return json\n  }\n  console.error('Failed to fetch NFT collections', res.statusText)\n  return null\n}\n\nconst fetchCollectionsTotalSupply = async (collections: ApiCollection[]): Promise<number[]> => {\n  const totalSupplyCalls = collections\n    .filter((collection) => collection?.address)\n    .map((collection) => ({\n      address: collection.address.toLowerCase(),\n      name: 'totalSupply',\n    }))\n  if (totalSupplyCalls.length > 0) {\n    const totalSupplyRaw = await multicallv2({\n      abi: erc721Abi,\n      calls: totalSupplyCalls,\n      options: { requireSuccess: false },\n    })\n    const totalSupply = totalSupplyRaw.flat()\n    return totalSupply.map((totalCount) => (totalCount ? totalCount.toNumber() : 0))\n  }\n  return []\n}\n\n/**\n * Fetch all collections data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\n */\nexport const getCollections = async (): Promise<Record<string, Collection>> => {\n  try {\n    const [collections, collectionsMarket] = await Promise.all([getCollectionsApi(), getCollectionsSg()])\n    const collectionApiData: ApiCollection[] = collections?.data ?? []\n    const collectionsTotalSupply = await fetchCollectionsTotalSupply(collectionApiData)\n    const collectionApiDataCombinedOnChain = collectionApiData.map((collection, index) => {\n      const totalSupplyFromApi = Number(collection?.totalSupply) || 0\n      const totalSupplyFromOnChain = collectionsTotalSupply[index]\n      return {\n        ...collection,\n        totalSupply: Math.max(totalSupplyFromApi, totalSupplyFromOnChain).toString(),\n      }\n    })\n\n    return combineCollectionData(collectionApiDataCombinedOnChain, collectionsMarket)\n  } catch (error) {\n    console.error('Unable to fetch data:', error)\n    return null\n  }\n}\n\n/**\n * Fetch collection data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\n */\nexport const getCollection = async (collectionAddress: string): Promise<Record<string, Collection> | null> => {\n  try {\n    const [collection, collectionMarket] = await Promise.all([\n      getCollectionApi(collectionAddress),\n      getCollectionSg(collectionAddress),\n    ])\n\n    const collectionsTotalSupply = await fetchCollectionsTotalSupply([collection])\n    const totalSupplyFromApi = Number(collection?.totalSupply) || 0\n    const totalSupplyFromOnChain = collectionsTotalSupply[0]\n    const collectionApiDataCombinedOnChain = {\n      ...collection,\n      totalSupply: Math.max(totalSupplyFromApi, totalSupplyFromOnChain).toString(),\n    }\n\n    return combineCollectionData([collectionApiDataCombinedOnChain], [collectionMarket])\n  } catch (error) {\n    console.error('Unable to fetch data:', error)\n    return null\n  }\n}\n\n/**\n * Fetch static data from a collection using the API\n * @returns\n */\nexport const getCollectionApi = async (collectionAddress: string): Promise<ApiCollection> => {\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}`)\n  if (res.ok) {\n    const json = await res.json()\n    return json.data\n  }\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\n  return null\n}\n\n/**\n * Fetch static data for all nfts in a collection using the API\n * @param collectionAddress\n * @param size\n * @param page\n * @returns\n */\nexport const getNftsFromCollectionApi = async (\n  collectionAddress: string,\n  size = 100,\n  page = 1,\n): Promise<ApiResponseCollectionTokens> => {\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\n  const requestPath = `${API_NFT}/collections/${collectionAddress}/tokens${\n    !isPBCollection ? `?page=${page}&size=${size}` : ``\n  }`\n\n  try {\n    const res = await fetch(requestPath)\n    if (res.ok) {\n      const data = await res.json()\n      const filteredAttributesDistribution = Object.entries(data.attributesDistribution).filter(([, value]) =>\n        Boolean(value),\n      )\n      const filteredData = Object.entries(data.data).filter(([, value]) => Boolean(value))\n      const filteredTotal = filteredData.length\n      return {\n        ...data,\n        total: filteredTotal,\n        attributesDistribution: fromPairs(filteredAttributesDistribution),\n        data: fromPairs(filteredData),\n      }\n    }\n    console.error(`API: Failed to fetch NFT tokens for ${collectionAddress} collection`, res.statusText)\n    return null\n  } catch (error) {\n    console.error(`API: Failed to fetch NFT tokens for ${collectionAddress} collection`, error)\n    return null\n  }\n}\n\n/**\n * Fetch a single NFT using the API\n * @param collectionAddress\n * @param tokenId\n * @returns NFT from API\n */\nexport const getNftApi = async (\n  collectionAddress: string,\n  tokenId: string,\n): Promise<ApiResponseSpecificToken['data']> => {\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}`)\n  if (res.ok) {\n    const json = await res.json()\n    return json.data\n  }\n\n  console.error(`API: Can't fetch NFT token ${tokenId} in ${collectionAddress}`, res.status)\n  return null\n}\n\n/**\n * Fetch a list of NFT from different collections\n * @param from Array of { collectionAddress: string; tokenId: string }\n * @returns Array of NFT from API\n */\nexport const getNftsFromDifferentCollectionsApi = async (\n  from: { collectionAddress: string; tokenId: string }[],\n): Promise<NftToken[]> => {\n  const promises = from.map((nft) => getNftApi(nft.collectionAddress, nft.tokenId))\n  const responses = await Promise.all(promises)\n  // Sometimes API can't find some tokens (e.g. 404 response)\n  // at least return the ones that returned successfully\n  return responses\n    .filter((resp) => resp)\n    .map((res, index) => ({\n      tokenId: res.tokenId,\n      name: res.name,\n      collectionName: res.collection.name,\n      collectionAddress: from[index].collectionAddress,\n      description: res.description,\n      attributes: res.attributes,\n      createdAt: res.createdAt,\n      updatedAt: res.updatedAt,\n      image: res.image,\n    }))\n}\n\n/**\n * SUBGRAPH HELPERS\n */\n\n/**\n * Fetch market data from a collection using the Subgraph\n * @returns\n */\nexport const getCollectionSg = async (collectionAddress: string): Promise<CollectionMarketDataBaseFields> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getCollectionData($collectionAddress: String!) {\n          collection(id: $collectionAddress) {\n            ${collectionBaseFields}\n          }\n        }\n      `,\n      { collectionAddress: collectionAddress.toLowerCase() },\n    )\n    return res.collection\n  } catch (error) {\n    console.error('Failed to fetch collection', error)\n    return null\n  }\n}\n\n/**\n * Fetch market data from all collections using the Subgraph\n * @returns\n */\nexport const getCollectionsSg = async (): Promise<CollectionMarketDataBaseFields[]> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        {\n          collections {\n            ${collectionBaseFields}\n          }\n        }\n      `,\n    )\n    return res.collections\n  } catch (error) {\n    console.error('Failed to fetch NFT collections', error)\n    return []\n  }\n}\n\n/**\n * Fetch market data for nfts in a collection using the Subgraph\n * @param collectionAddress\n * @param first\n * @param skip\n * @returns\n */\nexport const getNftsFromCollectionSg = async (\n  collectionAddress: string,\n  first = 1000,\n  skip = 0,\n): Promise<TokenMarketData[]> => {\n  // Squad to be sorted by tokenId as this matches the order of the paginated API return. For PBs - get the most recent,\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\n\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getNftCollectionMarketData($collectionAddress: String!) {\n          collection(id: $collectionAddress) {\n            id\n            nfts(orderBy:${isPBCollection ? 'updatedAt' : 'tokenId'}, skip: $skip, first: $first) {\n             ${baseNftFields}\n            }\n          }\n        }\n      `,\n      { collectionAddress: collectionAddress.toLowerCase(), skip, first },\n    )\n    return res.collection.nfts\n  } catch (error) {\n    console.error('Failed to fetch NFTs from collection', error)\n    return []\n  }\n}\n\n/**\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\n * @param bunnyId - bunny id to query\n * @param existingTokenIds - tokens that are already loaded into redux\n * @returns\n */\nexport const getNftsByBunnyIdSg = async (\n  bunnyId: string,\n  existingTokenIds: string[],\n  orderDirection: 'asc' | 'desc',\n): Promise<TokenMarketData[]> => {\n  try {\n    const where =\n      existingTokenIds.length > 0\n        ? { otherId: bunnyId, isTradable: true, tokenId_not_in: existingTokenIds }\n        : { otherId: bunnyId, isTradable: true }\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getNftsByBunnyIdSg($collectionAddress: String!, $where: NFT_filter, $orderDirection: String!) {\n          nfts(first: 30, where: $where, orderBy: currentAskPrice, orderDirection: $orderDirection) {\n            ${baseNftFields}\n          }\n        }\n      `,\n      {\n        collectionAddress: pancakeBunniesAddress.toLowerCase(),\n        where,\n        orderDirection,\n      },\n    )\n    return res.nfts\n  } catch (error) {\n    console.error(`Failed to fetch collection NFTs for bunny id ${bunnyId}`, error)\n    return []\n  }\n}\n\n/**\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\n * @param bunnyId - bunny id to query\n * @param existingTokenIds - tokens that are already loaded into redux\n * @returns\n */\nexport const getMarketDataForTokenIds = async (\n  collectionAddress: string,\n  existingTokenIds: string[],\n): Promise<TokenMarketData[]> => {\n  try {\n    if (existingTokenIds.length === 0) {\n      return []\n    }\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getMarketDataForTokenIds($collectionAddress: String!, $where: NFT_filter) {\n          collection(id: $collectionAddress) {\n            id\n            nfts(first: 1000, where: $where) {\n              ${baseNftFields}\n            }\n          }\n        }\n      `,\n      {\n        collectionAddress: collectionAddress.toLowerCase(),\n        where: { tokenId_in: existingTokenIds },\n      },\n    )\n    return res.collection.nfts\n  } catch (error) {\n    console.error(`Failed to fetch market data for NFTs stored tokens`, error)\n    return []\n  }\n}\n\nexport const getNftsOnChainMarketData = async (\n  collectionAddress: string,\n  tokenIds: string[],\n): Promise<TokenMarketData[]> => {\n  try {\n    const nftMarketContract = getNftMarketContract()\n    const response = await nftMarketContract.viewAsksByCollectionAndTokenIds(collectionAddress.toLowerCase(), tokenIds)\n    const askInfo = response?.askInfo\n\n    if (!askInfo) return []\n\n    return askInfo\n      .map((tokenAskInfo, index) => {\n        if (!tokenAskInfo.seller || !tokenAskInfo.price) return null\n        const currentSeller = tokenAskInfo.seller\n        const isTradable = currentSeller.toLowerCase() !== NOT_ON_SALE_SELLER\n        const currentAskPrice = tokenAskInfo.price && formatBigNumber(tokenAskInfo.price)\n\n        return {\n          collection: { id: collectionAddress.toLowerCase() },\n          tokenId: tokenIds[index],\n          currentSeller,\n          isTradable,\n          currentAskPrice,\n        }\n      })\n      .filter(Boolean)\n  } catch (error) {\n    console.error('Failed to fetch NFTs onchain market data', error)\n    return []\n  }\n}\n\nexport const getNftsUpdatedMarketData = async (\n  collectionAddress: string,\n  tokenIds: string[],\n): Promise<{ tokenId: string; currentSeller: string; currentAskPrice: BigNumber; isTradable: boolean }[]> => {\n  try {\n    const nftMarketContract = getNftMarketContract()\n    const response = await nftMarketContract.viewAsksByCollectionAndTokenIds(collectionAddress.toLowerCase(), tokenIds)\n    const askInfo = response?.askInfo\n\n    if (!askInfo) return null\n\n    return askInfo.map((tokenAskInfo, index) => {\n      const isTradable = tokenAskInfo.seller ? tokenAskInfo.seller.toLowerCase() !== NOT_ON_SALE_SELLER : false\n\n      return {\n        tokenId: tokenIds[index],\n        currentSeller: tokenAskInfo.seller,\n        isTradable,\n        currentAskPrice: tokenAskInfo.price,\n      }\n    })\n  } catch (error) {\n    console.error('Failed to fetch updated NFT market data', error)\n    return null\n  }\n}\n\nexport const getAccountNftsOnChainMarketData = async (\n  collections: ApiCollections,\n  account: string,\n): Promise<TokenMarketData[]> => {\n  try {\n    const nftMarketAddress = getNftMarketAddress()\n    const collectionList = Object.values(collections)\n    const askCalls = collectionList.map((collection) => {\n      const { address: collectionAddress } = collection\n      return {\n        address: nftMarketAddress,\n        name: 'viewAsksByCollectionAndSeller',\n        params: [collectionAddress, account, 0, 1000],\n      }\n    })\n\n    const askCallsResultsRaw = await multicallv2({\n      abi: nftMarketAbi,\n      calls: askCalls,\n      options: { requireSuccess: false },\n    })\n    const askCallsResults = askCallsResultsRaw\n      .map((askCallsResultRaw, askCallIndex) => {\n        if (!askCallsResultRaw?.tokenIds || !askCallsResultRaw?.askInfo || !collectionList[askCallIndex]?.address)\n          return null\n        return askCallsResultRaw.tokenIds\n          .map((tokenId, tokenIdIndex) => {\n            if (!tokenId || !askCallsResultRaw.askInfo[tokenIdIndex] || !askCallsResultRaw.askInfo[tokenIdIndex].price)\n              return null\n\n            const currentAskPrice = formatBigNumber(askCallsResultRaw.askInfo[tokenIdIndex].price)\n\n            return {\n              collection: { id: collectionList[askCallIndex].address.toLowerCase() },\n              tokenId: tokenId.toString(),\n              account,\n              isTradable: true,\n              currentAskPrice,\n            }\n          })\n          .filter(Boolean)\n      })\n      .flat()\n      .filter(Boolean)\n\n    return askCallsResults\n  } catch (error) {\n    console.error('Failed to fetch NFTs onchain market data', error)\n    return []\n  }\n}\n\nexport const getNftsMarketData = async (\n  where = {},\n  first = 1000,\n  orderBy = 'id',\n  orderDirection: 'asc' | 'desc' = 'desc',\n  skip = 0,\n): Promise<TokenMarketData[]> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getNftsMarketData($first: Int, $skip: Int!, $where: NFT_filter, $orderBy: NFT_orderBy, $orderDirection: OrderDirection) {\n          nfts(where: $where, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, skip: $skip) {\n            ${baseNftFields}\n            transactionHistory {\n              ${baseTransactionFields}\n            }\n          }\n        }\n      `,\n      { where, first, skip, orderBy, orderDirection },\n    )\n\n    return res.nfts\n  } catch (error) {\n    console.error('Failed to fetch NFTs market data', error)\n    return []\n  }\n}\n\nexport const getAllPancakeBunniesLowestPrice = async (bunnyIds: string[]): Promise<Record<string, number>> => {\n  try {\n    const singlePancakeBunnySubQueries = bunnyIds.map(\n      (\n        bunnyId,\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: currentAskPrice, orderDirection: asc) {\n        currentAskPrice\n      }\n    `,\n    )\n    const rawResponse: Record<string, { currentAskPrice: string }[]> = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getAllPancakeBunniesLowestPrice {\n          ${singlePancakeBunnySubQueries}\n        }\n      `,\n    )\n    return fromPairs(\n      Object.keys(rawResponse).map((subQueryKey) => {\n        const bunnyId = subQueryKey.split('b')[1]\n        return [\n          bunnyId,\n          rawResponse[subQueryKey].length > 0 ? parseFloat(rawResponse[subQueryKey][0].currentAskPrice) : Infinity,\n        ]\n      }),\n    )\n  } catch (error) {\n    console.error('Failed to fetch PancakeBunnies lowest prices', error)\n    return {}\n  }\n}\n\nexport const getAllPancakeBunniesRecentUpdatedAt = async (bunnyIds: string[]): Promise<Record<string, number>> => {\n  try {\n    const singlePancakeBunnySubQueries = bunnyIds.map(\n      (\n        bunnyId,\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: updatedAt, orderDirection: desc) {\n        updatedAt\n      }\n    `,\n    )\n    const rawResponse: Record<string, { updatedAt: string }[]> = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getAllPancakeBunniesLowestPrice {\n          ${singlePancakeBunnySubQueries}\n        }\n      `,\n    )\n    return fromPairs(\n      Object.keys(rawResponse).map((subQueryKey) => {\n        const bunnyId = subQueryKey.split('b')[1]\n        return [\n          bunnyId,\n          rawResponse[subQueryKey].length > 0 ? Number(rawResponse[subQueryKey][0].updatedAt) : -Infinity,\n        ]\n      }),\n    )\n  } catch (error) {\n    console.error('Failed to fetch PancakeBunnies latest market updates', error)\n    return {}\n  }\n}\n\n/**\n * Returns the lowest/highest price of any NFT in a collection\n */\nexport const getLeastMostPriceInCollection = async (\n  collectionAddress: string,\n  orderDirection: 'asc' | 'desc' = 'asc',\n) => {\n  try {\n    const response = await getNftsMarketData(\n      { collection: collectionAddress.toLowerCase(), isTradable: true },\n      1,\n      'currentAskPrice',\n      orderDirection,\n    )\n\n    if (response.length === 0) {\n      return 0\n    }\n\n    const [nftSg] = response\n    return parseFloat(nftSg.currentAskPrice)\n  } catch (error) {\n    console.error(`Failed to lowest price NFTs in collection ${collectionAddress}`, error)\n    return 0\n  }\n}\n\n/**\n * Fetch user trading data for buyTradeHistory, sellTradeHistory and askOrderHistory from the Subgraph\n * @param where a User_filter where condition\n * @returns a UserActivity object\n */\nexport const getUserActivity = async (address: string): Promise<UserActivity> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getUserActivity($address: String!) {\n          user(id: $address) {\n            buyTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\n              ${baseTransactionFields}\n              nft {\n                ${baseNftFields}\n              }\n            }\n            sellTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\n              ${baseTransactionFields}\n              nft {\n                ${baseNftFields}\n              }\n            }\n            askOrderHistory(first: 500, orderBy: timestamp, orderDirection: desc) {\n              id\n              block\n              timestamp\n              orderType\n              askPrice\n              nft {\n                ${baseNftFields}\n              }\n            }\n          }\n        }\n      `,\n      { address },\n    )\n\n    return res.user || { askOrderHistory: [], buyTradeHistory: [], sellTradeHistory: [] }\n  } catch (error) {\n    console.error('Failed to fetch user Activity', error)\n    return {\n      askOrderHistory: [],\n      buyTradeHistory: [],\n      sellTradeHistory: [],\n    }\n  }\n}\n\nexport const getCollectionActivity = async (\n  address: string,\n  nftActivityFilter: NftActivityFilter,\n  itemPerQuery,\n): Promise<{ askOrders?: AskOrder[]; transactions?: Transaction[] }> => {\n  const getAskOrderEvent = (orderType: MarketEvent): AskOrderType => {\n    switch (orderType) {\n      case MarketEvent.CANCEL:\n        return AskOrderType.CANCEL\n      case MarketEvent.MODIFY:\n        return AskOrderType.MODIFY\n      case MarketEvent.NEW:\n        return AskOrderType.NEW\n      default:\n        return AskOrderType.MODIFY\n    }\n  }\n\n  const isFetchAllCollections = address === ''\n\n  const hasCollectionFilter = nftActivityFilter.collectionFilters.length > 0\n\n  const collectionFilterGql = !isFetchAllCollections\n    ? `collection: ${JSON.stringify(address)}`\n    : hasCollectionFilter\n    ? `collection_in: ${JSON.stringify(nftActivityFilter.collectionFilters)}`\n    : ``\n\n  const askOrderTypeFilter = nftActivityFilter.typeFilters\n    .filter((marketEvent) => marketEvent !== MarketEvent.SELL)\n    .map((marketEvent) => getAskOrderEvent(marketEvent))\n\n  const askOrderIncluded = nftActivityFilter.typeFilters.length === 0 || askOrderTypeFilter.length > 0\n\n  const askOrderTypeFilterGql =\n    askOrderTypeFilter.length > 0 ? `orderType_in: ${JSON.stringify(askOrderTypeFilter)}` : ``\n\n  const transactionIncluded =\n    nftActivityFilter.typeFilters.length === 0 ||\n    nftActivityFilter.typeFilters.some(\n      (marketEvent) => marketEvent === MarketEvent.BUY || marketEvent === MarketEvent.SELL,\n    )\n\n  let askOrderQueryItem = itemPerQuery / 2\n  let transactionQueryItem = itemPerQuery / 2\n\n  if (!askOrderIncluded || !transactionIncluded) {\n    askOrderQueryItem = !askOrderIncluded ? 0 : itemPerQuery\n    transactionQueryItem = !transactionIncluded ? 0 : itemPerQuery\n  }\n\n  const askOrderGql = askOrderIncluded\n    ? `askOrders(first: ${askOrderQueryItem}, orderBy: timestamp, orderDirection: desc, where:{\n            ${collectionFilterGql}, ${askOrderTypeFilterGql}\n          }) {\n              id\n              block\n              timestamp\n              orderType\n              askPrice\n              seller {\n                id\n              }\n              nft {\n                ${baseNftFields}\n              }\n          }`\n    : ``\n\n  const transactionGql = transactionIncluded\n    ? `transactions(first: ${transactionQueryItem}, orderBy: timestamp, orderDirection: desc, where:{\n            ${collectionFilterGql}\n          }) {\n            ${baseTransactionFields}\n              nft {\n                ${baseNftFields}\n              }\n          }`\n    : ``\n\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getCollectionActivity {\n          ${askOrderGql}\n          ${transactionGql}\n        }\n      `,\n    )\n\n    return res || { askOrders: [], transactions: [] }\n  } catch (error) {\n    console.error('Failed to fetch collection Activity', error)\n    return {\n      askOrders: [],\n      transactions: [],\n    }\n  }\n}\n\nexport const getTokenActivity = async (\n  tokenId: string,\n  collectionAddress: string,\n): Promise<{ askOrders: AskOrder[]; transactions: Transaction[] }> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getCollectionActivity($tokenId: BigInt!, $address: ID!) {\n          nfts(where:{tokenId: $tokenId, collection: $address}) {\n            transactionHistory(orderBy: timestamp, orderDirection: desc) {\n              ${baseTransactionFields}\n                nft {\n                  ${baseNftFields}\n                }\n            }\n            askHistory(orderBy: timestamp, orderDirection: desc) {\n                id\n                block\n                timestamp\n                orderType\n                askPrice\n                seller {\n                  id\n                }\n                nft {\n                  ${baseNftFields}\n                }\n            }\n          }\n        }\n      `,\n      { tokenId, address: collectionAddress },\n    )\n\n    if (res.nfts.length > 0) {\n      return { askOrders: res.nfts[0].askHistory, transactions: res.nfts[0].transactionHistory }\n    }\n    return { askOrders: [], transactions: [] }\n  } catch (error) {\n    console.error('Failed to fetch token Activity', error)\n    return {\n      askOrders: [],\n      transactions: [],\n    }\n  }\n}\n\n/**\n * Get the most recently listed NFTs\n * @param first Number of nfts to retrieve\n * @returns NftTokenSg[]\n */\nexport const getLatestListedNfts = async (first: number): Promise<TokenMarketData[]> => {\n  try {\n    const res = await request(\n      GRAPH_API_NFTMARKET,\n      gql`\n        query getLatestNftMarketData($first: Int) {\n          nfts(where: { isTradable: true }, orderBy: updatedAt , orderDirection: desc, first: $first) {\n            ${baseNftFields}\n            collection {\n              id\n            }\n          }\n        }\n      `,\n      { first },\n    )\n\n    return res.nfts\n  } catch (error) {\n    console.error('Failed to fetch NFTs market data', error)\n    return []\n  }\n}\n\n/**\n * Filter NFTs from a collection\n * @param collectionAddress\n * @returns\n */\nexport const fetchNftsFiltered = async (\n  collectionAddress: string,\n  filters: Record<string, string | number>,\n): Promise<ApiTokenFilterResponse> => {\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/filter?${stringify(filters)}`)\n\n  if (res.ok) {\n    const data = await res.json()\n    return data\n  }\n\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\n  return null\n}\n\n/**\n * OTHER HELPERS\n */\n\nexport const getMetadataWithFallback = (apiMetadata: ApiResponseCollectionTokens['data'], bunnyId: string) => {\n  // The fallback is just for the testnet where some bunnies don't exist\n  return (\n    apiMetadata[bunnyId] ?? {\n      name: '',\n      description: '',\n      collection: { name: 'Pancake Bunnies' },\n      image: {\n        original: '',\n        thumbnail: '',\n      },\n    }\n  )\n}\n\nexport const getPancakeBunniesAttributesField = (bunnyId: string) => {\n  // Generating attributes field that is not returned by API\n  // but can be \"faked\" since objects are keyed with bunny id\n  return [\n    {\n      traitType: 'bunnyId',\n      value: bunnyId,\n      displayType: null,\n    },\n  ]\n}\n\nexport const combineApiAndSgResponseToNftToken = (\n  apiMetadata: ApiSingleTokenData,\n  marketData: TokenMarketData,\n  attributes: NftAttribute[],\n) => {\n  return {\n    tokenId: marketData.tokenId,\n    name: apiMetadata.name,\n    description: apiMetadata.description,\n    collectionName: apiMetadata.collection.name,\n    collectionAddress: pancakeBunniesAddress,\n    image: apiMetadata.image,\n    marketData,\n    attributes,\n  }\n}\n\nexport const fetchWalletTokenIdsForCollections = async (\n  account: string,\n  collections: ApiCollections,\n): Promise<TokenIdWithCollectionAddress[]> => {\n  const balanceOfCalls = Object.values(collections).map((collection) => {\n    const { address: collectionAddress } = collection\n    return {\n      address: collectionAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const balanceOfCallsResultRaw = await multicallv2({\n    abi: erc721Abi,\n    calls: balanceOfCalls,\n    options: { requireSuccess: false },\n  })\n  const balanceOfCallsResult = balanceOfCallsResultRaw.flat()\n\n  const tokenIdCalls = Object.values(collections)\n    .map((collection, index) => {\n      const balanceOf = balanceOfCallsResult[index]?.toNumber() ?? 0\n      const { address: collectionAddress } = collection\n\n      return range(balanceOf).map((tokenIndex) => {\n        return {\n          address: collectionAddress,\n          name: 'tokenOfOwnerByIndex',\n          params: [account, tokenIndex],\n        }\n      })\n    })\n    .flat()\n\n  const tokenIdResultRaw = await multicallv2({\n    abi: erc721Abi,\n    calls: tokenIdCalls,\n    options: { requireSuccess: false },\n  })\n  const tokenIdResult = tokenIdResultRaw.flat()\n\n  const nftLocation = NftLocation.WALLET\n\n  const walletNfts = tokenIdResult.reduce((acc, tokenIdBn, index) => {\n    if (tokenIdBn) {\n      const { address: collectionAddress } = tokenIdCalls[index]\n      acc.push({ tokenId: tokenIdBn.toString(), collectionAddress, nftLocation })\n    }\n    return acc\n  }, [])\n\n  return walletNfts\n}\n\n/**\n * Helper to combine data from the collections' API and subgraph\n */\nexport const combineCollectionData = (\n  collectionApiData: ApiCollection[],\n  collectionSgData: CollectionMarketDataBaseFields[],\n): Record<string, Collection> => {\n  const collectionsMarketObj: Record<string, CollectionMarketDataBaseFields> = fromPairs(\n    collectionSgData.map((current) => [current.id, current]),\n  )\n\n  return fromPairs(\n    collectionApiData\n      .filter((collection) => collection?.address)\n      .map((current) => {\n        const collectionMarket = collectionsMarketObj[current.address.toLowerCase()]\n        const collection: Collection = {\n          ...current,\n          ...collectionMarket,\n        }\n\n        if (current.name) {\n          collection.name = current.name\n        }\n\n        return [current.address, collection]\n      }),\n  )\n}\n\n/**\n * Evaluate whether a market NFT is in a users wallet, their profile picture, or on sale\n * @param tokenId string\n * @param tokenIdsInWallet array of tokenIds in wallet\n * @param tokenIdsForSale array of tokenIds on sale\n * @param profileNftId Optional tokenId of users' profile picture\n * @returns NftLocation enum value\n */\nexport const getNftLocationForMarketNft = (\n  tokenId: string,\n  tokenIdsInWallet: string[],\n  tokenIdsForSale: string[],\n  profileNftId?: string,\n): NftLocation => {\n  if (tokenId === profileNftId) {\n    return NftLocation.PROFILE\n  }\n  if (tokenIdsForSale.includes(tokenId)) {\n    return NftLocation.FORSALE\n  }\n  if (tokenIdsInWallet.includes(tokenId)) {\n    return NftLocation.WALLET\n  }\n  console.error(`Cannot determine location for tokenID ${tokenId}, defaulting to NftLocation.WALLET`)\n  return NftLocation.WALLET\n}\n\n/**\n * Construct complete TokenMarketData entities with a users' wallet NFT ids and market data for their wallet NFTs\n * @param walletNfts TokenIdWithCollectionAddress\n * @param marketDataForWalletNfts TokenMarketData[]\n * @returns TokenMarketData[]\n */\nexport const attachMarketDataToWalletNfts = (\n  walletNfts: TokenIdWithCollectionAddress[],\n  marketDataForWalletNfts: TokenMarketData[],\n): TokenMarketData[] => {\n  const walletNftsWithMarketData = walletNfts.map((walletNft) => {\n    const marketData = marketDataForWalletNfts.find(\n      (marketNft) =>\n        marketNft.tokenId === walletNft.tokenId &&\n        marketNft.collection.id.toLowerCase() === walletNft.collectionAddress.toLowerCase(),\n    )\n    return (\n      marketData ?? {\n        tokenId: walletNft.tokenId,\n        collection: {\n          id: walletNft.collectionAddress.toLowerCase(),\n        },\n        nftLocation: walletNft.nftLocation,\n        metadataUrl: null,\n        transactionHistory: null,\n        currentSeller: null,\n        isTradable: null,\n        currentAskPrice: null,\n        latestTradedPriceInBNB: null,\n        tradeVolumeBNB: null,\n        totalTrades: null,\n        otherId: null,\n      }\n    )\n  })\n  return walletNftsWithMarketData\n}\n\n/**\n * Attach TokenMarketData and location to NftToken\n * @param nftsWithMetadata NftToken[] with API metadata\n * @param nftsForSale  market data for nfts that are on sale (i.e. not in a user's wallet)\n * @param walletNfts market data for nfts in a user's wallet\n * @param tokenIdsInWallet array of token ids in user's wallet\n * @param tokenIdsForSale array of token ids of nfts that are on sale\n * @param profileNftId profile picture token id\n * @returns NFT[]\n */\nexport const combineNftMarketAndMetadata = (\n  nftsWithMetadata: NftToken[],\n  nftsForSale: TokenMarketData[],\n  walletNfts: TokenMarketData[],\n  tokenIdsInWallet: string[],\n  tokenIdsForSale: string[],\n  profileNftId?: string,\n): NftToken[] => {\n  const completeNftData = nftsWithMetadata.map<NftToken>((nft) => {\n    // Get metadata object\n    let marketData = nftsForSale.find(\n      (forSaleNft) =>\n        forSaleNft.tokenId === nft.tokenId &&\n        forSaleNft.collection &&\n        forSaleNft.collection.id === nft.collectionAddress,\n    )\n    if (!marketData) {\n      marketData = walletNfts.find(\n        (marketNft) =>\n          marketNft.collection &&\n          marketNft.collection.id === nft.collectionAddress &&\n          marketNft.tokenId === nft.tokenId,\n      )\n    }\n    const location = getNftLocationForMarketNft(nft.tokenId, tokenIdsInWallet, tokenIdsForSale, profileNftId)\n    return { ...nft, marketData, location }\n  })\n  return completeNftData\n}\n\nconst fetchWalletMarketData = async (walletNftsByCollection: {\n  [collectionAddress: string]: TokenIdWithCollectionAddress[]\n}): Promise<TokenMarketData[]> => {\n  const walletMarketDataRequests = Object.entries(walletNftsByCollection).map(\n    async ([collectionAddress, tokenIdsWithCollectionAddress]) => {\n      const tokenIdIn = tokenIdsWithCollectionAddress.map((walletNft) => walletNft.tokenId)\n      const [nftsOnChainMarketData, nftsMarketData] = await Promise.all([\n        getNftsOnChainMarketData(collectionAddress.toLowerCase(), tokenIdIn),\n        getNftsMarketData({\n          tokenId_in: tokenIdIn,\n          collection: collectionAddress.toLowerCase(),\n        }),\n      ])\n\n      return tokenIdIn\n        .map((tokenId) => {\n          const nftMarketData = nftsMarketData.find((tokenMarketData) => tokenMarketData.tokenId === tokenId)\n          const onChainMarketData = nftsOnChainMarketData.find(\n            (onChainTokenMarketData) => onChainTokenMarketData.tokenId === tokenId,\n          )\n\n          if (!nftMarketData && !onChainMarketData) return null\n\n          return { ...nftMarketData, ...onChainMarketData }\n        })\n        .filter(Boolean)\n    },\n  )\n\n  const walletMarketDataResponses = await Promise.all(walletMarketDataRequests)\n  return walletMarketDataResponses.flat()\n}\n\n/**\n * Get in-wallet, on-sale & profile pic NFT metadata, complete with market data for a given account\n * @param account\n * @param collections\n * @param profileNftWithCollectionAddress\n * @returns Promise<NftToken[]>\n */\nexport const getCompleteAccountNftData = async (\n  account: string,\n  collections: ApiCollections,\n  profileNftWithCollectionAddress?: TokenIdWithCollectionAddress,\n): Promise<NftToken[]> => {\n  // Add delist collections to allow user reclaim their NFTs\n  const collectionsWithDelist = { ...collections, ...DELIST_COLLECTIONS }\n\n  const [walletNftIdsWithCollectionAddress, onChainForSaleNfts] = await Promise.all([\n    fetchWalletTokenIdsForCollections(account, collectionsWithDelist),\n    getAccountNftsOnChainMarketData(collectionsWithDelist, account),\n  ])\n\n  if (profileNftWithCollectionAddress?.tokenId) {\n    walletNftIdsWithCollectionAddress.unshift(profileNftWithCollectionAddress)\n  }\n\n  const walletNftsByCollection = groupBy(\n    walletNftIdsWithCollectionAddress,\n    (walletNftId) => walletNftId.collectionAddress,\n  )\n\n  const walletMarketData = await fetchWalletMarketData(walletNftsByCollection)\n\n  const walletNftsWithMarketData = attachMarketDataToWalletNfts(walletNftIdsWithCollectionAddress, walletMarketData)\n\n  const walletTokenIds = walletNftIdsWithCollectionAddress\n    .filter((walletNft) => {\n      // Profile Pic NFT is no longer wanted in this array, hence the filter\n      return profileNftWithCollectionAddress?.tokenId !== walletNft.tokenId\n    })\n    .map((nft) => nft.tokenId)\n\n  const tokenIdsForSale = onChainForSaleNfts.map((nft) => nft.tokenId)\n\n  const forSaleNftIds = onChainForSaleNfts.map((nft) => {\n    return { collectionAddress: nft.collection.id, tokenId: nft.tokenId }\n  })\n\n  const metadataForAllNfts = await getNftsFromDifferentCollectionsApi([\n    ...forSaleNftIds,\n    ...walletNftIdsWithCollectionAddress,\n  ])\n\n  const completeNftData = combineNftMarketAndMetadata(\n    metadataForAllNfts,\n    onChainForSaleNfts,\n    walletNftsWithMarketData,\n    walletTokenIds,\n    tokenIdsForSale,\n    profileNftWithCollectionAddress?.tokenId,\n  )\n\n  return completeNftData\n}\n\n/**\n * Fetch distribution information for a collection\n * @returns\n */\nexport const getCollectionDistributionApi = async <T>(collectionAddress: string): Promise<T> => {\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/distribution`)\n  if (res.ok) {\n    const data = await res.json()\n    return data\n  }\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress} distribution`, res.statusText)\n  return null\n}\n","import { BigNumberish } from '@ethersproject/bignumber'\n\n// Collections -> Nfts -> Transactions\n// Users -> Nft tokens IDs\n\nexport interface Transaction {\n  id: string\n  block: string\n  timestamp: string\n  askPrice: string\n  netPrice: string\n  buyer: { id: string }\n  seller: { id: string }\n  withBNB: boolean\n  nft?: TokenMarketData\n}\n\nexport enum AskOrderType {\n  NEW = 'New',\n  MODIFY = 'Modify',\n  CANCEL = 'Cancel',\n}\n\nexport interface AskOrder {\n  id: string\n  block: string\n  timestamp: string\n  askPrice: string\n  orderType: AskOrderType\n  nft?: TokenMarketData\n  seller?: { id: string }\n}\n\nexport interface Image {\n  original: string\n  thumbnail: string\n  mp4?: string\n  webm?: string\n  gif?: string\n}\n\nexport enum NftLocation {\n  FORSALE = 'For Sale',\n  PROFILE = 'Profile Pic',\n  WALLET = 'In Wallet',\n}\n\n// Market data regarding specific token ID, acquired via subgraph\nexport interface TokenMarketData {\n  tokenId: string\n  collection: {\n    id: string\n  }\n  currentAskPrice: string\n  currentSeller: string\n  isTradable: boolean\n  metadataUrl?: string\n  latestTradedPriceInBNB?: string\n  tradeVolumeBNB?: string\n  totalTrades?: string\n  otherId?: string\n  updatedAt?: string\n  transactionHistory?: Transaction[]\n}\n\n// Represents single NFT token, either Squad-like NFT or single PancakeBunny.\nexport interface NftToken {\n  tokenId: string\n  name: string\n  description: string\n  collectionName: string\n  collectionAddress: string\n  image: Image\n  attributes?: NftAttribute[]\n  createdAt?: string // API createdAt\n  updatedAt?: string // API updatedAt\n  marketData?: TokenMarketData\n  location?: NftLocation\n  meta?: Record<string, string | number>\n}\n\nexport interface NftFilter {\n  activeFilters: Record<string, NftAttribute>\n  showOnlyOnSale: boolean\n  ordering: {\n    field: string\n    direction: 'asc' | 'desc'\n  }\n}\n\nexport interface NftActivityFilter {\n  typeFilters: MarketEvent[]\n  collectionFilters: string[]\n}\n\nexport interface TokenIdWithCollectionAddress {\n  collectionAddress: string\n  tokenId: string\n  nftLocation?: NftLocation\n}\n\nexport interface NftAttribute {\n  traitType: string\n  value: string | number\n  displayType: string\n}\n\n// Internal type used to refer to a collection\n// Most fields are populated from API (via ApiCollection type)\nexport interface Collection {\n  id: string\n  address: string\n  name: string\n  createdAt?: string\n  description?: string\n  symbol: string\n  active: boolean\n  totalVolumeBNB: string\n  numberTokensListed: string\n  tradingFee: string\n  creatorFee: string\n  owner: string\n  totalSupply: string\n  verified: boolean\n  avatar: string\n  banner: {\n    large: string\n    small: string\n  }\n  attributes?: NftAttribute[]\n}\n\nexport interface ApiCollections {\n  [key: string]: Collection\n}\n\nexport interface User {\n  address: string\n  numberTokensListed: BigNumberish\n  numberTokensPurchased: BigNumberish\n  numberTokensSold: BigNumberish\n  nfts: Record<string, BigNumberish> // String is an address, BigNumberish is a tokenID\n}\n\n/**\n * API RESPONSES\n */\n\nexport interface ApiCollection {\n  address: string\n  owner: string\n  name: string\n  description: string\n  symbol: string\n  totalSupply: string\n  verified: boolean\n  createdAt: string\n  updatedAt: string\n  avatar: string\n  banner: {\n    large: string\n    small: string\n  }\n  attributes?: NftAttribute[] // returned for specific collection but not for all collections\n}\n\n// Get all collections\n// ${API_NFT}/collections/\nexport interface ApiCollectionsResponse {\n  total: number\n  data: ApiCollection[]\n}\n\n// Get single collection\n// ${API_NFT}/collections/${collectionAddress}\nexport interface ApiSingleCollectionResponse {\n  data: ApiCollection\n}\n\n// Get single collection\n// ${API_NFT}/collections/${collectionAddress}\nexport interface ApiTokenFilterResponse {\n  total: number\n  data: Record<string, ApiSingleTokenData>\n}\n\nexport interface ApiSingleTokenData {\n  name: string\n  description: string\n  image: Image\n  collection: {\n    name: string\n  }\n  attributes?: NftAttribute[]\n  tokenId?: string\n}\n\n// Get tokens within collection\n// ${API_NFT}/collections/${collectionAddress}/tokens\nexport interface ApiResponseCollectionTokens {\n  total: number\n  attributesDistribution: Record<string, number>\n  data: Record<string, ApiSingleTokenData>\n}\n\n// Get specific token data\n// ${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}\nexport interface ApiResponseSpecificToken {\n  data: {\n    tokenId: string\n    name: string\n    description: string\n    image: Image\n    createdAt: string\n    updatedAt: string\n    attributes: NftAttribute[]\n    collection: {\n      name: string\n    }\n  }\n}\n\n// ${API_NFT}/collections/${collectionAddress}/distribution\nexport interface ApiCollectionDistribution {\n  total: number\n  data: Record<string, Record<string, number>>\n}\n\nexport interface ApiCollectionDistributionPB {\n  total: number\n  data: Record<string, number>\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n  buyer?: string\n  seller?: string\n}\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\n/**\n * SUBGRAPH RESPONSES\n */\n\nexport interface CollectionMarketDataBaseFields {\n  id: string\n  name: string\n  symbol: string\n  active: boolean\n  totalTrades: string\n  totalVolumeBNB: string\n  numberTokensListed: string\n  creatorAddress: string\n  tradingFee: string\n  creatorFee: string\n  whitelistChecked: string\n}\n\nexport interface UserActivity {\n  askOrderHistory: AskOrder[]\n  buyTradeHistory: Transaction[]\n  sellTradeHistory: Transaction[]\n}\n","import { getPancakeBunniesAddress } from 'utils/addressHelpers'\n\nexport const nftsBaseUrl = '/nfts'\nexport const pancakeBunniesAddress = getPancakeBunniesAddress()\n"],"names":["DELIST_COLLECTIONS","active","address","avatar","banner","large","small","createdAt","creatorAddress","creatorFee","description","id","name","numberTokensListed","owner","symbol","totalSupply","totalTrades","totalVolumeBNB","tradingFee","updatedAt","verified","whitelistChecker","baseNftFields","baseTransactionFields","collectionBaseFields","gql","request","stringify","API_NFT","GRAPH_API_NFTMARKET","multicallv2","isAddress","erc721Abi","range","groupBy","getNftMarketContract","NOT_ON_SALE_SELLER","pancakeBunniesAddress","formatBigNumber","getNftMarketAddress","nftMarketAbi","fromPairs","AskOrderType","NftLocation","MarketEvent","getCollectionsApi","res","fetch","ok","json","console","error","statusText","fetchCollectionsTotalSupply","collections","totalSupplyCalls","filter","collection","map","toLowerCase","length","totalSupplyRaw","abi","calls","options","requireSuccess","flat","totalCount","toNumber","getCollections","collectionsMarket","Promise","all","getCollectionsSg","collectionApiData","data","collectionsTotalSupply","collectionApiDataCombinedOnChain","index","totalSupplyFromApi","Number","totalSupplyFromOnChain","Math","max","toString","combineCollectionData","getCollection","collectionAddress","collectionMarket","getCollectionApi","getCollectionSg","getNftsFromCollectionApi","size","page","isPBCollection","requestPath","filteredAttributesDistribution","Object","entries","attributesDistribution","value","Boolean","filteredData","filteredTotal","total","getNftApi","tokenId","status","getNftsFromDifferentCollectionsApi","from","promises","nft","responses","resp","collectionName","attributes","image","getNftsFromCollectionSg","first","skip","nfts","getNftsByBunnyIdSg","bunnyId","existingTokenIds","orderDirection","where","otherId","isTradable","tokenId_not_in","getMarketDataForTokenIds","tokenId_in","getNftsOnChainMarketData","tokenIds","nftMarketContract","response","viewAsksByCollectionAndTokenIds","askInfo","tokenAskInfo","seller","price","currentSeller","currentAskPrice","getNftsUpdatedMarketData","getAccountNftsOnChainMarketData","account","nftMarketAddress","collectionList","values","askCalls","params","askCallsResultsRaw","askCallsResults","askCallsResultRaw","askCallIndex","tokenIdIndex","getNftsMarketData","orderBy","getAllPancakeBunniesLowestPrice","bunnyIds","singlePancakeBunnySubQueries","rawResponse","keys","subQueryKey","split","parseFloat","Infinity","getAllPancakeBunniesRecentUpdatedAt","getLeastMostPriceInCollection","nftSg","getUserActivity","user","askOrderHistory","buyTradeHistory","sellTradeHistory","getCollectionActivity","nftActivityFilter","itemPerQuery","getAskOrderEvent","orderType","CANCEL","MODIFY","NEW","isFetchAllCollections","hasCollectionFilter","collectionFilters","collectionFilterGql","JSON","askOrderTypeFilter","typeFilters","marketEvent","SELL","askOrderIncluded","askOrderTypeFilterGql","transactionIncluded","some","BUY","askOrderQueryItem","transactionQueryItem","askOrderGql","transactionGql","askOrders","transactions","getTokenActivity","askHistory","transactionHistory","getLatestListedNfts","fetchNftsFiltered","filters","getMetadataWithFallback","apiMetadata","original","thumbnail","getPancakeBunniesAttributesField","traitType","displayType","combineApiAndSgResponseToNftToken","marketData","fetchWalletTokenIdsForCollections","balanceOfCalls","balanceOfCallsResultRaw","balanceOfCallsResult","tokenIdCalls","balanceOf","tokenIndex","tokenIdResultRaw","tokenIdResult","nftLocation","WALLET","walletNfts","reduce","acc","tokenIdBn","push","collectionSgData","collectionsMarketObj","current","getNftLocationForMarketNft","tokenIdsInWallet","tokenIdsForSale","profileNftId","PROFILE","includes","FORSALE","attachMarketDataToWalletNfts","marketDataForWalletNfts","walletNftsWithMarketData","walletNft","find","marketNft","metadataUrl","latestTradedPriceInBNB","tradeVolumeBNB","combineNftMarketAndMetadata","nftsWithMetadata","nftsForSale","completeNftData","forSaleNft","location","fetchWalletMarketData","walletNftsByCollection","walletMarketDataRequests","tokenIdsWithCollectionAddress","tokenIdIn","nftsOnChainMarketData","nftsMarketData","nftMarketData","tokenMarketData","onChainMarketData","onChainTokenMarketData","walletMarketDataResponses","getCompleteAccountNftData","profileNftWithCollectionAddress","collectionsWithDelist","walletNftIdsWithCollectionAddress","onChainForSaleNfts","unshift","walletNftId","walletMarketData","walletTokenIds","forSaleNftIds","metadataForAllNfts","getCollectionDistributionApi","getPancakeBunniesAddress","nftsBaseUrl"],"sourceRoot":""}