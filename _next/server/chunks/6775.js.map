{"version":3,"file":"6775.js","mappings":"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","sources":["webpack://web/./src/config/constants/campaigns.ts","webpack://web/./src/config/constants/teams.ts","webpack://web/./src/state/achievements/helpers.ts","webpack://web/./src/state/profile/helpers.ts","webpack://web/./src/state/profile/hooks.ts","webpack://web/./src/state/teams/helpers.ts","webpack://web/./src/utils/achievements.ts"],"sourcesContent":["import { Campaign } from './types'\n\n/**\n * id: The campaign id (required)\n * type: The type of the achievement\n * title: A string or an object to be translated.\n * Note: If the value is a string it is likely used as data in a translation object\n *\n * badge: Achievement avatar\n */\n\nconst campaigns: Campaign[] = [\n  {\n    id: '511110000',\n    type: 'ifo',\n    title: 'Kalmar',\n    badge: 'ifo-kalm.svg',\n  },\n  {\n    id: '511100000',\n    type: 'ifo',\n    title: 'Hotcross',\n    badge: 'ifo-hotcross.svg',\n  },\n  {\n    id: '511090000',\n    type: 'ifo',\n    title: 'Horizon Protocol',\n    badge: 'ifo-hzn.svg',\n  },\n  {\n    id: '511080000',\n    type: 'ifo',\n    title: 'Belt',\n    badge: 'ifo-belt.svg',\n  },\n  {\n    id: '511070000',\n    type: 'ifo',\n    title: 'Yieldwatch',\n    badge: 'ifo-watch.svg',\n  },\n  {\n    id: '511060000',\n    type: 'ifo',\n    title: 'Berry',\n    badge: 'ifo-bry.svg',\n  },\n  {\n    id: '511050000',\n    type: 'ifo',\n    title: 'Soteria',\n    badge: 'ifo-wsote.svg',\n  },\n  {\n    id: '511040000',\n    type: 'ifo',\n    title: 'Helmet',\n    badge: 'ifo-helmet.svg',\n  },\n  {\n    id: '511030000',\n    type: 'ifo',\n    title: 'Tenet',\n    badge: 'ifo-ten.svg',\n  },\n  {\n    id: '511020000',\n    type: 'ifo',\n    title: 'Ditto',\n    badge: 'ifo-ditto.svg',\n  },\n  {\n    id: '511010000',\n    type: 'ifo',\n    title: 'Blink',\n    badge: 'ifo-blink.svg',\n  },\n  {\n    id: '512010001',\n    type: 'teambattle',\n    title: 'Easter Champion: Gold',\n    badge: 'easter-champion-gold.svg',\n  },\n  {\n    id: '512010002',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010003',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010004',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010005',\n    type: 'teambattle',\n    title: 'Easter Participant: Gold',\n    badge: 'easter-participant-gold.svg',\n  },\n  {\n    id: '512010006',\n    type: 'teambattle',\n    title: 'Easter Champion: Silver',\n    badge: 'easter-champion-silver.svg',\n  },\n  {\n    id: '512010007',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010008',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010009',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010010',\n    type: 'teambattle',\n    title: 'Easter Participant: Silver',\n    badge: 'easter-participant-silver.svg',\n  },\n  {\n    id: '512010011',\n    type: 'teambattle',\n    title: 'Easter Champion: Bronze',\n    badge: 'easter-champion-bronze.svg',\n  },\n  {\n    id: '512010012',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010013',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010014',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010015',\n    type: 'teambattle',\n    title: 'Easter Participant: Bronze',\n    badge: 'easter-participant-bronze.svg',\n  },\n  {\n    id: '513010001',\n    type: 'participation',\n    title: 'Syrup Soaker',\n    description: 'Took a dip in the early days of the Auto CAKE Pool',\n    badge: 'syrup-soaker.svg',\n  },\n  {\n    id: '514010001',\n    type: 'participation',\n    title: 'Clairvoyant',\n    description: 'Played a round of Prediction before round 12,120',\n    badge: 'clairvoyant.svg',\n  },\n  {\n    id: '515010001',\n    type: 'participation',\n    title: 'Lottie',\n    description: 'Joined a round in the early days of Lottery V2',\n    badge: 'lottie.svg',\n  },\n  {\n    id: '515020001',\n    type: 'participation',\n    title: 'Lucky',\n    description: 'Won a round in the early days of Lottery V2',\n    badge: 'lucky.svg',\n  },\n  {\n    id: '515030001',\n    type: 'participation',\n    title: 'Baller',\n    description: 'Top 100 ticket buyer in the early days of Lottery V2',\n    badge: 'baller.svg',\n  },\n  {\n    id: '516010001',\n    type: 'participation',\n    title: '1 Year',\n    description: 'Joined PancakeSwap during the first year of our journey!',\n    badge: '1-year.svg',\n  },\n  {\n    id: '516020001',\n    type: 'participation',\n    title: '2 Year',\n    description: 'Celebrate our 2nd birthday with us',\n    badge: '2-year.svg',\n  },\n  {\n    id: '511120000',\n    type: 'ifo',\n    title: 'Duelist King',\n    badge: 'ifo-dkt.svg',\n  },\n  {\n    id: '511130000',\n    type: 'ifo',\n    title: 'Mines of Dalarnia',\n    badge: 'ifo-dar.svg',\n  },\n  {\n    id: '511140000',\n    type: 'ifo',\n    title: 'FC Porto Fan Token',\n    badge: 'ifo-porto.svg',\n  },\n  {\n    id: '511150000',\n    type: 'ifo',\n    title: 'FC Santos Fan Token',\n    badge: 'ifo-santos.svg',\n  },\n  {\n    id: '512020001',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Gold',\n    badge: 'fan-token-champion-gold.svg',\n  },\n  {\n    id: '512020002',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Gold',\n    badge: 'fan-token-top-10-gold.svg',\n  },\n  {\n    id: '512020003',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Gold',\n    badge: 'fan-token-top-100-gold.svg',\n  },\n  {\n    id: '512020004',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Gold',\n    badge: 'fan-token-top-500-gold.svg',\n  },\n  {\n    id: '512020005',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Gold',\n    badge: 'fan-token-participant-gold.svg',\n  },\n  {\n    id: '512020006',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Silver',\n    badge: 'fan-token-champion-silver.svg',\n  },\n  {\n    id: '512020007',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Silver',\n    badge: 'fan-token-top-10-silver.svg',\n  },\n  {\n    id: '512020008',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Silver',\n    badge: 'fan-token-top-100-silver.svg',\n  },\n  {\n    id: '512020009',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Silver',\n    badge: 'fan-token-top-500-silver.svg',\n  },\n  {\n    id: '512020010',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Silver',\n    badge: 'fan-token-participant-silver.svg',\n  },\n  {\n    id: '512020011',\n    type: 'teambattle',\n    title: 'Fan Token Champion: Bronze',\n    badge: 'fan-token-champion-bronze.svg',\n  },\n  {\n    id: '512020012',\n    type: 'teambattle',\n    title: 'Fan Token Top 10: Bronze',\n    badge: 'fan-token-top-10-bronze.svg',\n  },\n  {\n    id: '512020013',\n    type: 'teambattle',\n    title: 'Fan Token Top 100: Bronze',\n    badge: 'fan-token-top-100-bronze.svg',\n  },\n  {\n    id: '512020014',\n    type: 'teambattle',\n    title: 'Fan Token Top 500: Bronze',\n    badge: 'fan-token-top-500-bronze.svg',\n  },\n  {\n    id: '512020015',\n    type: 'teambattle',\n    title: 'Fan Token Participant: Bronze',\n    badge: 'fan-token-participant-bronze.svg',\n  },\n  {\n    id: '511160000',\n    type: 'ifo',\n    title: 'Diviner Protocol',\n    badge: 'ifo-dpt.svg',\n  },\n  {\n    id: '511170000',\n    type: 'ifo',\n    title: 'Froyo Games',\n    badge: 'ifo-froyo.svg',\n  },\n  {\n    id: '511180000',\n    type: 'ifo',\n    title: 'Era7',\n    badge: 'ifo-era.svg',\n  },\n  {\n    id: '511190000',\n    type: 'ifo',\n    title: 'Duet',\n    badge: 'ifo-duet.svg',\n  },\n  {\n    id: '511200000',\n    type: 'ifo',\n    title: 'Trivia',\n    badge: 'ifo-trivia.svg',\n  },\n  {\n    id: '511300000',\n    type: 'ifo',\n    title: 'Peel',\n    badge: 'ifo-peel.svg',\n  },\n  {\n    id: '511400000',\n    type: 'ifo',\n    title: 'Wom',\n    badge: 'ifo-wom.svg',\n  },\n  {\n    id: '511500000',\n    type: 'ifo',\n    title: 'Hoop',\n    badge: 'ifo-hoop.svg',\n  },\n  {\n    id: '511600000',\n    type: 'ifo',\n    title: 'CO',\n    badge: 'ifo-co.svg',\n  },\n  {\n    id: '511700000',\n    type: 'ifo',\n    title: 'KRS',\n    badge: 'ifo-krs.svg',\n  },\n  {\n    id: '511800000',\n    type: 'ifo',\n    title: 'WMX',\n    badge: 'ifo-wmx.svg',\n  },\n  {\n    id: '511900000',\n    type: 'ifo',\n    title: 'MGP',\n    badge: 'ifo-mgp.svg',\n  },\n  {\n    id: '512030001',\n    type: 'teambattle',\n    title: 'Mobox Champion: Gold',\n    badge: 'MBOX-champion-gold.svg',\n  },\n  {\n    id: '512030002',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Gold',\n    badge: 'MBOX-top-10-gold.svg',\n  },\n  {\n    id: '512030003',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Gold',\n    badge: 'MBOX-top-100-gold.svg',\n  },\n  {\n    id: '512030004',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Gold',\n    badge: 'MBOX-top-500-gold.svg',\n  },\n  {\n    id: '512030005',\n    type: 'teambattle',\n    title: 'Mobox Participant: Gold',\n    badge: 'MBOX-participant-gold.svg',\n  },\n  {\n    id: '512030006',\n    type: 'teambattle',\n    title: 'Mobox Champion: Silver',\n    badge: 'MBOX-champion-silver.svg',\n  },\n  {\n    id: '512030007',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Silver',\n    badge: 'MBOX-top-10-silver.svg',\n  },\n  {\n    id: '512030008',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Silver',\n    badge: 'MBOX-top-100-silver.svg',\n  },\n  {\n    id: '512030009',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Silver',\n    badge: 'MBOX-top-500-silver.svg',\n  },\n  {\n    id: '512030010',\n    type: 'teambattle',\n    title: 'Mobox Participant: Silver',\n    badge: 'MBOX-participant-silver.svg',\n  },\n  {\n    id: '512030011',\n    type: 'teambattle',\n    title: 'Mobox Champion: Bronze',\n    badge: 'MBOX-champion-bronze.svg',\n  },\n  {\n    id: '512030012',\n    type: 'teambattle',\n    title: 'Mobox Top 10: Bronze',\n    badge: 'MBOX-top-10-bronze.svg',\n  },\n  {\n    id: '512030013',\n    type: 'teambattle',\n    title: 'Mobox Top 100: Bronze',\n    badge: 'MBOX-top-100-bronze.svg',\n  },\n  {\n    id: '512030014',\n    type: 'teambattle',\n    title: 'Mobox Top 500: Bronze',\n    badge: 'MBOX-top-500-bronze.svg',\n  },\n  {\n    id: '512030015',\n    type: 'teambattle',\n    title: 'Mobox Participant: Bronze',\n    badge: 'MBOX-participant-bronze.svg',\n  },\n  {\n    id: '512040001',\n    type: 'teambattle',\n    title: 'MoD Champion: Gold',\n    badge: 'MoD-champion-gold.svg',\n  },\n  {\n    id: '512040002',\n    type: 'teambattle',\n    title: 'MoD Top 10: Gold',\n    badge: 'MoD-top-10-gold.svg',\n  },\n  {\n    id: '512040003',\n    type: 'teambattle',\n    title: 'MoD Top 100: Gold',\n    badge: 'MoD-top-100-gold.svg',\n  },\n  {\n    id: '512040004',\n    type: 'teambattle',\n    title: 'MoD Top 500: Gold',\n    badge: 'MoD-top-500-gold.svg',\n  },\n  {\n    id: '512040005',\n    type: 'teambattle',\n    title: 'MoD Participant: Gold',\n    badge: 'MoD-participant-gold.svg',\n  },\n  {\n    id: '512040006',\n    type: 'teambattle',\n    title: 'MoD Champion: Silver',\n    badge: 'MoD-champion-silver.svg',\n  },\n  {\n    id: '512040007',\n    type: 'teambattle',\n    title: 'MoD Top 10: Silver',\n    badge: 'MoD-top-10-silver.svg',\n  },\n  {\n    id: '512040008',\n    type: 'teambattle',\n    title: 'MoD Top 100: Silver',\n    badge: 'MoD-top-100-silver.svg',\n  },\n  {\n    id: '512040009',\n    type: 'teambattle',\n    title: 'MoD Top 500: Silver',\n    badge: 'MoD-top-500-silver.svg',\n  },\n  {\n    id: '512040010',\n    type: 'teambattle',\n    title: 'MoD Participant: Silver',\n    badge: 'MoD-participant-silver.svg',\n  },\n  {\n    id: '512040011',\n    type: 'teambattle',\n    title: 'MoD Champion: Bronze',\n    badge: 'MoD-champion-bronze.svg',\n  },\n  {\n    id: '512040012',\n    type: 'teambattle',\n    title: 'MoD Top 10: Bronze',\n    badge: 'MoD-top-10-bronze.svg',\n  },\n  {\n    id: '512040013',\n    type: 'teambattle',\n    title: 'MoD Top 100: Bronze',\n    badge: 'MoD-top-100-bronze.svg',\n  },\n  {\n    id: '512040014',\n    type: 'teambattle',\n    title: 'MoD Top 500: Bronze',\n    badge: 'MoD-top-500-bronze.svg',\n  },\n  {\n    id: '512040015',\n    type: 'teambattle',\n    title: 'MoD Participant: Bronze',\n    badge: 'MoD-participant-bronze.svg',\n  },\n]\n\n/**\n * Transform the campaign config into a map. Keeps the config the same\n * as the others and allows easy access to a campaign by id\n */\nexport const campaignMap = new Map<string, Campaign>()\n\ncampaigns.forEach((campaign) => {\n  campaignMap.set(campaign.id, campaign)\n})\n\nexport default campaigns\n","import { IPFS_GATEWAY } from '../index'\nimport { Team } from './types'\n\nconst teams: Team[] = [\n  {\n    id: 1,\n    name: 'Syrup Storm',\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\n    images: {\n      lg: 'syrup-storm-lg.png',\n      md: 'syrup-storm-md.png',\n      sm: 'syrup-storm-sm.png',\n      alt: 'syrup-storm-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png`,\n    },\n    background: 'syrup-storm-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 2,\n    name: 'Fearsome Flippers',\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\n    images: {\n      lg: 'fearsome-flippers-lg.png',\n      md: 'fearsome-flippers-md.png',\n      sm: 'fearsome-flippers-sm.png',\n      alt: 'fearsome-flippers-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png`,\n    },\n    background: 'fearsome-flippers-bg.svg',\n    textColor: '#FFFFFF',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 3,\n    name: 'Chaotic Cakers',\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\n    images: {\n      lg: 'chaotic-cakers-lg.png',\n      md: 'chaotic-cakers-md.png',\n      sm: 'chaotic-cakers-sm.png',\n      alt: 'chaotic-cakers-alt.png',\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png`,\n    },\n    background: 'chaotic-cakers-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n]\n\nexport default teams\n","import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    if (!campaignMap.has(userPoint.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    accum.push({\n      id: userPoint.campaignId,\n      type: campaignMeta.type,\n      address: userPoint.id,\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(userPoint.points),\n    })\n    return accum\n  }, [])\n}\n","import { Profile } from 'state/types'\nimport { PancakeProfile } from 'config/abi/types/PancakeProfile'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport { getTeam } from 'state/teams/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getNftApi } from 'state/nftMarket/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst transformProfileResponse = (\n  profileResponse: Awaited<ReturnType<PancakeProfile['getUserProfile']>>,\n): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: userId.toNumber(),\n    points: numberPoints.toNumber(),\n    teamId: teamId.toNumber(),\n    tokenId: tokenId.toNumber(),\n    collectionAddress,\n    isActive,\n  }\n}\n\nexport const getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${API_PROFILE}/api/users/${address.toLowerCase()}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const profileCalls = ['hasRegistered', 'getUserProfile'].map((method) => {\n      return { address: getPancakeProfileAddress(), name: method, params: [address] }\n    })\n    const profileCallsResult = await multicallv2({\n      abi: profileABI,\n      calls: profileCalls,\n      options: { requireSuccess: false },\n    })\n    const [[hasRegistered], profileResponse] = profileCallsResult\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n    const [team, username, nftRes] = await Promise.all([\n      getTeam(teamId),\n      getUsername(address),\n      isActive ? getNftApi(collectionAddress, tokenId.toString()) : Promise.resolve(null),\n    ])\n    let nftToken: NftToken\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    if (nftRes) {\n      nftToken = {\n        tokenId: nftRes.tokenId,\n        name: nftRes.name,\n        collectionName: nftRes.collection.name,\n        collectionAddress,\n        description: nftRes.description,\n        attributes: nftRes.attributes,\n        createdAt: nftRes.createdAt,\n        updatedAt: nftRes.updatedAt,\n        image: {\n          original: nftRes.image?.original,\n          thumbnail: nftRes.image?.thumbnail,\n        },\n      }\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      collectionAddress,\n      isActive,\n      nft: nftToken,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n}\n","import { useWeb3React } from '@pancakeswap/wagmi'\nimport { getAchievements } from 'state/achievements/helpers'\nimport { FetchStatus } from 'config/constants/types'\nimport useSWR, { KeyedMutator } from 'swr'\nimport { localStorageMiddleware } from 'hooks/useSWRContract'\nimport useSWRImmutable from 'swr/immutable'\nimport { getProfile, GetProfileResponse } from './helpers'\nimport { Profile } from '../types'\n\nexport const useProfileForAddress = (\n  address: string,\n  fetchConfiguration = {\n    revalidateIfStale: true,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n  },\n): {\n  profile?: Profile\n  isFetching: boolean\n  isValidating: boolean\n  refresh: KeyedMutator<GetProfileResponse>\n} => {\n  const { data, status, mutate, isValidating } = useSWR(\n    address ? [address, 'profile'] : null,\n    () => getProfile(address),\n    fetchConfiguration,\n  )\n\n  const { profile } = data ?? { profile: null }\n\n  return {\n    profile,\n    isFetching: status === FetchStatus.Fetching,\n    isValidating,\n    refresh: mutate,\n  }\n}\n\nexport const useAchievementsForAddress = (address: string) => {\n  const { data, status, mutate } = useSWRImmutable(address ? [address, 'achievements'] : null, () =>\n    getAchievements(address),\n  )\n\n  return {\n    achievements: data || [],\n    isFetching: status === FetchStatus.Fetching,\n    refresh: mutate,\n  }\n}\n\nexport const useProfile = (): {\n  profile?: Profile\n  hasProfile: boolean\n  hasActiveProfile: boolean\n  isInitialized: boolean\n  isLoading: boolean\n  refresh: KeyedMutator<GetProfileResponse>\n} => {\n  const { account } = useWeb3React()\n  const { data, status, mutate } = useSWRImmutable(account ? [account, 'profile'] : null, () => getProfile(account), {\n    use: [localStorageMiddleware],\n  })\n\n  const { profile, hasRegistered } = data ?? ({ profile: null, hasRegistered: false } as GetProfileResponse)\n\n  const isLoading = status === FetchStatus.Fetching\n  const isInitialized = status === FetchStatus.Fetched || status === FetchStatus.Failed\n  const hasProfile = isInitialized && hasRegistered\n  const hasActiveProfile = hasProfile && profile?.isActive\n\n  return { profile, hasProfile, hasActiveProfile, isInitialized, isLoading, refresh: mutate }\n}\n","import merge from 'lodash/merge'\nimport teamsList from 'config/constants/teams'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Team } from 'config/constants/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { TeamsById } from 'state/types'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport fromPairs from 'lodash/fromPairs'\n\nconst profileContract = getProfileContract()\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers.toNumber(),\n      points: numberPoints.toNumber(),\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = fromPairs(teamsList.map((team) => [team.id, team]))\n    const nbTeams = await profileContract.numberTeams()\n\n    const calls = []\n    for (let i = 1; i <= nbTeams.toNumber(); i++) {\n      calls.push({\n        address: getPancakeProfileAddress(),\n        name: 'getTeamProfile',\n        params: [i],\n      })\n    }\n    const teamData = await multicallv2({ abi: profileABI, calls })\n\n    const onChainTeamData = fromPairs(\n      teamData.map((team, index) => {\n        const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n        return [\n          index + 1,\n          {\n            name: teamName,\n            users: numberUsers.toNumber(),\n            points: numberPoints.toNumber(),\n            isJoinable,\n          },\n        ]\n      }),\n    )\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Campaign, TranslatableText } from 'config/constants/types'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: BigNumber\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 in the %title% IFO',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address],\n    }\n  })\n\n  const claimStatuses = (await multicallv2({\n    abi: pointCenterIfoABI,\n    calls: claimStatusCalls,\n    options: { requireSuccess: false },\n  })) as [boolean][] | null\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await multicallv2({\n    abi: pointCenterIfoABI,\n    calls: claimStatuses.reduce((accum, claimStatusArr, index) => {\n      if (claimStatusArr === null) {\n        return accum\n      }\n\n      const [claimStatus] = claimStatusArr\n\n      if (claimStatus === true) {\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [ifoCampaigns[index].address] }]\n      }\n\n      return accum\n    }, []),\n  })) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    const claimableCampaignId = claimableIfoDataItem.campaignId.toString()\n    if (!campaignMap.has(claimableCampaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableCampaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableCampaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableCampaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: claimableIfoDataItem.numberPoints.toNumber(),\n      },\n    ]\n  }, [])\n}\n"],"names":["campaigns","id","type","title","badge","description","campaignMap","Map","forEach","campaign","set","IPFS_GATEWAY","teams","name","images","lg","md","sm","alt","ipfs","background","textColor","users","points","request","gql","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","user","toLowerCase","error","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","has","campaignId","campaignMeta","get","push","address","Number","profileABI","API_PROFILE","getTeam","getNftApi","multicallv2","getPancakeProfileAddress","transformProfileResponse","profileResponse","userId","numberPoints","teamId","collectionAddress","tokenId","isActive","toNumber","getUsername","response","fetch","ok","username","json","getProfile","profileCalls","map","method","params","profileCallsResult","abi","calls","options","requireSuccess","hasRegistered","profile","team","nftRes","Promise","all","toString","resolve","nftToken","collectionName","collection","attributes","createdAt","updatedAt","image","original","thumbnail","nft","e","console","useWeb3React","FetchStatus","useSWR","localStorageMiddleware","useSWRImmutable","useProfileForAddress","fetchConfiguration","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","data","status","mutate","isValidating","isFetching","Fetching","refresh","useAchievementsForAddress","achievements","useProfile","use","isLoading","isInitialized","Fetched","Failed","hasProfile","hasActiveProfile","merge","teamsList","getProfileContract","fromPairs","profileContract","teamName","numberUsers","isJoinable","getTeamProfile","staticTeamInfo","find","staticTeam","getTeams","teamsById","nbTeams","numberTeams","i","teamData","onChainTeamData","index","ifosList","getPointCenterIfoAddress","pointCenterIfoABI","key","getClaimableIfoData","ifoCampaigns","filter","ifoItem","undefined","claimStatusCalls","claimStatuses","claimableIfoData","claimStatusArr","claimStatus","claimableIfoDataItem","claimableCampaignId","ifoCampaign"],"sourceRoot":""}