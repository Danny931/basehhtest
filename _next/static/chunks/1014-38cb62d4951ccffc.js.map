{"version":3,"file":"static/chunks/1014-38cb62d4951ccffc.js","mappings":"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","sources":["webpack://_N_E/./src/state/predictions/config.ts","webpack://_N_E/./src/state/predictions/bnbQueries.ts","webpack://_N_E/./src/state/predictions/cakeQueries.ts","webpack://_N_E/./src/state/predictions/queries.ts","webpack://_N_E/./src/utils/numberOrNull.ts","webpack://_N_E/./src/state/predictions/cakeTransformers.ts","webpack://_N_E/./src/state/predictions/bnbTransformers.ts","webpack://_N_E/./src/state/predictions/helpers.ts","webpack://_N_E/<anon>"],"sourcesContent":["import { BSC_BLOCK_TIME } from 'config'\n\nexport const REWARD_RATE = 0.97\n\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\nexport const ROUND_BUFFER = BSC_BLOCK_TIME * 3\n\nexport const PAST_ROUND_COUNT = 5\nexport const FUTURE_ROUND_COUNT = 2\n\nexport const ROUNDS_PER_PAGE = 200\nexport const LEADERBOARD_MIN_ROUNDS_PLAYED = 10\n","import { UserResponse, BetResponse, HistoricalBetResponse, RoundResponse } from './responseType'\n\nexport interface UserResponseBNB extends UserResponse<BetResponseBNB> {\n  totalBNB: string\n  totalBNBBull: string\n  totalBNBBear: string\n  averageBNB: string\n  totalBNBClaimed: string\n  netBNB: string\n}\n\nexport interface BetResponseBNB extends BetResponse {\n  claimedBNB: string\n  claimedNetBNB: string\n  user?: UserResponseBNB\n  round?: RoundResponseBNB\n}\n\nexport type HistoricalBetResponseBNB = HistoricalBetResponse<UserResponseBNB>\n\nexport type RoundResponseBNB = RoundResponse<BetResponseBNB>\n\nexport interface TotalWonMarketResponseBNB {\n  totalBNB: string\n  totalBNBTreasury: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const roundBaseFields = `\n  id\n  epoch\n  position\n  failed\n  startAt\n  startBlock\n  startHash\n  lockAt\n  lockBlock\n  lockHash\n  lockPrice\n  lockRoundId\n  closeAt\n  closeBlock\n  closeHash\n  closePrice\n  closeRoundId\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n`\n\nexport const betBaseFields = `\n id\n hash  \n amount\n position\n claimed\n claimedAt\n claimedHash\n claimedBlock\n claimedBNB\n claimedNetBNB\n createdAt\n updatedAt\n`\n\nexport const userBaseFields = `\n  id\n  createdAt\n  updatedAt\n  block\n  totalBets\n  totalBetsBull\n  totalBetsBear\n  totalBNB\n  totalBNBBull\n  totalBNBBear\n  totalBetsClaimed\n  totalBNBClaimed\n  winRate\n  averageBNB\n  netBNB\n`\n","import { UserResponse, BetResponse, HistoricalBetResponse, RoundResponse } from './responseType'\n\nexport interface UserResponseCAKE extends UserResponse<BetResponseCAKE> {\n  totalCAKE: string\n  totalCAKEBull: string\n  totalCAKEBear: string\n  averageCAKE: string\n  totalCAKEClaimed: string\n  netCAKE: string\n}\n\nexport interface BetResponseCAKE extends BetResponse {\n  claimedCAKE: string\n  claimedNetCAKE: string\n  user?: UserResponseCAKE\n  round?: RoundResponseCAKE\n}\n\nexport type HistoricalBetResponseCAKE = HistoricalBetResponse<UserResponseCAKE>\n\nexport type RoundResponseCAKE = RoundResponse<BetResponseCAKE>\n\nexport interface TotalWonMarketResponseCAKE {\n  totalCAKE: string\n  totalCAKETreasury: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const roundBaseFields = `\n  id\n  epoch\n  position\n  failed\n  startAt\n  startBlock\n  startHash\n  lockAt\n  lockBlock\n  lockHash\n  lockPrice\n  lockRoundId\n  closeAt\n  closeBlock\n  closeHash\n  closePrice\n  closeRoundId\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n`\n\nexport const betBaseFields = `\n id\n hash  \n amount\n position\n claimed\n claimedAt\n claimedHash\n claimedBlock\n claimedCAKE\n claimedNetCAKE\n createdAt\n updatedAt\n`\n\nexport const userBaseFields = `\n  id\n  createdAt\n  updatedAt\n  block\n  totalBets\n  totalBetsBull\n  totalBetsBear\n  totalCAKE\n  totalCAKEBull\n  totalCAKEBear\n  totalBetsClaimed\n  totalCAKEClaimed\n  winRate\n  averageCAKE\n  netCAKE\n`\n","import {\n  roundBaseFields as roundBaseFieldsBNB,\n  betBaseFields as betBaseFieldsBNB,\n  userBaseFields as userBaseFieldsBNB,\n} from './bnbQueries'\nimport {\n  roundBaseFields as roundBaseFieldsCAKE,\n  betBaseFields as betBaseFieldsCAKE,\n  userBaseFields as userBaseFieldsCAKE,\n} from './cakeQueries'\n\nexport const getRoundBaseFields = (tokenSymbol: string) =>\n  tokenSymbol === 'CAKE' ? roundBaseFieldsCAKE : roundBaseFieldsBNB\n\nexport const getBetBaseFields = (tokenSymbol: string) => (tokenSymbol === 'CAKE' ? betBaseFieldsCAKE : betBaseFieldsBNB)\n\nexport const getUserBaseFields = (tokenSymbol: string) =>\n  tokenSymbol === 'CAKE' ? userBaseFieldsCAKE : userBaseFieldsBNB\n","const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport default numberOrNull\n","import { Bet, BetPosition, Round, PredictionUser } from 'state/types'\nimport numberOrNull from 'utils/numberOrNull'\n\nimport { RoundResponseCAKE } from './cakeQueries'\n\nconst getRoundPosition = (positionResponse: string) => {\n  if (positionResponse === 'Bull') {\n    return BetPosition.BULL\n  }\n\n  if (positionResponse === 'Bear') {\n    return BetPosition.BEAR\n  }\n\n  if (positionResponse === 'House') {\n    return BetPosition.HOUSE\n  }\n\n  return null\n}\n\nexport const transformBetResponseCAKE = (betResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    block: numberOrNull(betResponse.block),\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedAt: numberOrNull(betResponse.claimedAt),\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\n    claimedHash: betResponse.claimedHash,\n    claimedBNB: betResponse.claimedCAKE ? parseFloat(betResponse.claimedCAKE) : 0,\n    claimedNetBNB: betResponse.claimedNetCAKE ? parseFloat(betResponse.claimedNetCAKE) : 0,\n    createdAt: numberOrNull(betResponse.createdAt),\n    updatedAt: numberOrNull(betResponse.updatedAt),\n  } as Bet\n\n  if (betResponse.user) {\n    bet.user = transformUserResponseCAKE(betResponse.user)\n  }\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponseCAKE(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformUserResponseCAKE = (userResponse): PredictionUser => {\n  const {\n    id,\n    createdAt,\n    updatedAt,\n    block,\n    totalBets,\n    totalBetsBull,\n    totalBetsBear,\n    totalCAKE,\n    totalCAKEBull,\n    totalCAKEBear,\n    totalBetsClaimed,\n    totalCAKEClaimed,\n    winRate,\n    averageCAKE,\n    netCAKE,\n  } = userResponse || {}\n\n  return {\n    id,\n    createdAt: numberOrNull(createdAt),\n    updatedAt: numberOrNull(updatedAt),\n    block: numberOrNull(block),\n    totalBets: numberOrNull(totalBets),\n    totalBetsBull: numberOrNull(totalBetsBull),\n    totalBetsBear: numberOrNull(totalBetsBear),\n    totalBNB: totalCAKE ? parseFloat(totalCAKE) : 0,\n    totalBNBBull: totalCAKEBull ? parseFloat(totalCAKEBull) : 0,\n    totalBNBBear: totalCAKEBear ? parseFloat(totalCAKEBear) : 0,\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\n    totalBNBClaimed: totalCAKEClaimed ? parseFloat(totalCAKEClaimed) : 0,\n    winRate: winRate ? parseFloat(winRate) : 0,\n    averageBNB: averageCAKE ? parseFloat(averageCAKE) : 0,\n    netBNB: netCAKE ? parseFloat(netCAKE) : 0,\n  }\n}\n\nexport const transformRoundResponseCAKE = (roundResponse: RoundResponseCAKE): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    position,\n    startAt,\n    startBlock,\n    startHash,\n    lockAt,\n    lockBlock,\n    lockHash,\n    lockPrice,\n    lockRoundId,\n    closeAt,\n    closeBlock,\n    closeHash,\n    closePrice,\n    closeRoundId,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bullAmount,\n    bearBets,\n    bearAmount,\n    bets = [],\n  } = roundResponse\n\n  return {\n    id,\n    failed,\n    startHash,\n    lockHash,\n    lockRoundId,\n    closeRoundId,\n    closeHash,\n    position: getRoundPosition(position),\n    epoch: numberOrNull(epoch),\n    startAt: numberOrNull(startAt),\n    startBlock: numberOrNull(startBlock),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n    closeAt: numberOrNull(closeAt),\n    closeBlock: numberOrNull(closeBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n    bearBets: numberOrNull(bearBets),\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n    bets: bets.map(transformBetResponseCAKE),\n  }\n}\n","import { Bet, BetPosition, Round, PredictionUser } from 'state/types'\nimport numberOrNull from 'utils/numberOrNull'\nimport { RoundResponseBNB } from './bnbQueries'\n\nconst getRoundPosition = (positionResponse: string) => {\n  if (positionResponse === 'Bull') {\n    return BetPosition.BULL\n  }\n\n  if (positionResponse === 'Bear') {\n    return BetPosition.BEAR\n  }\n\n  if (positionResponse === 'House') {\n    return BetPosition.HOUSE\n  }\n\n  return null\n}\n\nexport const transformBetResponseBNB = (betResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    block: numberOrNull(betResponse.block),\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedAt: numberOrNull(betResponse.claimedAt),\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\n    claimedHash: betResponse.claimedHash,\n    claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\n    claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\n    createdAt: numberOrNull(betResponse.createdAt),\n    updatedAt: numberOrNull(betResponse.updatedAt),\n  } as Bet\n\n  if (betResponse.user) {\n    bet.user = transformUserResponseBNB(betResponse.user)\n  }\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponseBNB(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformUserResponseBNB = (userResponse): PredictionUser => {\n  const {\n    id,\n    createdAt,\n    updatedAt,\n    block,\n    totalBets,\n    totalBetsBull,\n    totalBetsBear,\n    totalBNB,\n    totalBNBBull,\n    totalBNBBear,\n    totalBetsClaimed,\n    totalBNBClaimed,\n    winRate,\n    averageBNB,\n    netBNB,\n  } = userResponse || {}\n\n  return {\n    id,\n    createdAt: numberOrNull(createdAt),\n    updatedAt: numberOrNull(updatedAt),\n    block: numberOrNull(block),\n    totalBets: numberOrNull(totalBets),\n    totalBetsBull: numberOrNull(totalBetsBull),\n    totalBetsBear: numberOrNull(totalBetsBear),\n    totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\n    totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\n    totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\n    totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\n    winRate: winRate ? parseFloat(winRate) : 0,\n    averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\n    netBNB: netBNB ? parseFloat(netBNB) : 0,\n  }\n}\n\nexport const transformRoundResponseBNB = (roundResponse: RoundResponseBNB): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    position,\n    startAt,\n    startBlock,\n    startHash,\n    lockAt,\n    lockBlock,\n    lockHash,\n    lockPrice,\n    lockRoundId,\n    closeAt,\n    closeBlock,\n    closeHash,\n    closePrice,\n    closeRoundId,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bullAmount,\n    bearBets,\n    bearAmount,\n    bets = [],\n  } = roundResponse\n\n  return {\n    id,\n    failed,\n    startHash,\n    lockHash,\n    lockRoundId,\n    closeRoundId,\n    closeHash,\n    position: getRoundPosition(position),\n    epoch: numberOrNull(epoch),\n    startAt: numberOrNull(startAt),\n    startBlock: numberOrNull(startBlock),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n    closeAt: numberOrNull(closeAt),\n    closeBlock: numberOrNull(closeBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n    bearBets: numberOrNull(bearBets),\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n    bets: bets.map(transformBetResponseBNB),\n  }\n}\n","import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION_BNB, GRAPH_API_PREDICTION_CAKE } from 'config/constants/endpoints'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Bet,\n  LedgerData,\n  BetPosition,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeLedger,\n  ReduxNodeRound,\n  RoundData,\n  HistoryFilter,\n} from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport { Zero } from '@ethersproject/constants'\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\nimport { getRoundBaseFields, getBetBaseFields, getUserBaseFields } from './queries'\nimport { ROUNDS_PER_PAGE } from './config'\nimport { transformBetResponseCAKE, transformUserResponseCAKE } from './cakeTransformers'\nimport { transformBetResponseBNB, transformUserResponseBNB } from './bnbTransformers'\nimport { BetResponse, UserResponse } from './responseType'\nimport { BetResponseBNB } from './bnbQueries'\nimport { BetResponseCAKE } from './cakeQueries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  HOUSE = 'house',\n  LIVE = 'live',\n}\n\nexport const transformBetResponse = (tokenSymbol) =>\n  tokenSymbol === 'CAKE' ? transformBetResponseCAKE : transformBetResponseBNB\n\nexport const transformUserResponse = (tokenSymbol) =>\n  tokenSymbol === 'CAKE' ? transformUserResponseCAKE : transformUserResponseBNB\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n\n  if (bet.round.position === BetPosition.HOUSE) {\n    return Result.HOUSE\n  }\n\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\nexport const getFilteredBets = (bets: Bet[], filter: HistoryFilter) => {\n  switch (filter) {\n    case HistoryFilter.COLLECTED:\n      return bets.filter((bet) => bet.claimed === true)\n    case HistoryFilter.UNCOLLECTED:\n      return bets.filter((bet) => {\n        return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n      })\n    case HistoryFilter.ALL:\n    default:\n      return bets\n  }\n}\n\nconst getTotalWonMarket = (market, tokenSymbol) => {\n  const total = market[`total${tokenSymbol}`] ? parseFloat(market[`total${tokenSymbol}`]) : 0\n  const totalTreasury = market[`total${tokenSymbol}Treasury`] ? parseFloat(market[`total${tokenSymbol}Treasury`]) : 0\n\n  return Math.max(total - totalTreasury, 0)\n}\n\nexport const getTotalWon = async (): Promise<{ totalWonBNB: number; totalWonCAKE: number }> => {\n  const [{ market: BNBMarket, market: CAKEMarket }] = await Promise.all([\n    request(\n      GRAPH_API_PREDICTION_BNB,\n      gql`\n        query getTotalWonData {\n          market(id: 1) {\n            totalBNB\n            totalBNBTreasury\n          }\n        }\n      `,\n    ),\n    request(\n      GRAPH_API_PREDICTION_CAKE,\n      gql`\n        query getTotalWonData {\n          market(id: 1) {\n            totalCAKE\n            totalCAKETreasury\n          }\n        }\n      `,\n    ),\n  ])\n\n  const totalWonBNB = getTotalWonMarket(BNBMarket, 'BNB')\n  const totalWonCAKE = getTotalWonMarket(CAKEMarket, 'CAKE')\n\n  return { totalWonBNB, totalWonCAKE }\n}\n\ntype WhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: WhereClause = {},\n  first = 1000,\n  skip = 0,\n  api: string,\n  tokenSymbol: string,\n): Promise<Array<BetResponseBNB | BetResponseCAKE>> => {\n  const response = await request(\n    api,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\n          ${getBetBaseFields(tokenSymbol)}\n          round {\n            ${getRoundBaseFields(tokenSymbol)}\n          }\n          user {\n            ${getUserBaseFields(tokenSymbol)}\n          }\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getLedgerData = async (account: string, epochs: number[], address: string) => {\n  const ledgerCalls = epochs.map((epoch) => ({\n    address,\n    name: 'ledger',\n    params: [epoch, account],\n  }))\n  const response = await multicallv2<PredictionsLedgerResponse[]>({ abi: predictionsAbi, calls: ledgerCalls })\n  return response\n}\n\nexport const LEADERBOARD_RESULTS_PER_PAGE = 20\n\ninterface GetPredictionUsersOptions {\n  skip?: number\n  first?: number\n  orderBy?: string\n  orderDir?: string\n  where?: WhereClause\n}\n\nconst defaultPredictionUserOptions = {\n  skip: 0,\n  first: LEADERBOARD_RESULTS_PER_PAGE,\n  orderBy: 'createdAt',\n  orderDir: 'desc',\n}\n\nexport const getHasRoundFailed = (oracleCalled: boolean, closeTimestamp: number, buffer: number) => {\n  if (!oracleCalled) {\n    const closeTimestampMs = (closeTimestamp + buffer) * 1000\n    if (Number.isFinite(closeTimestampMs)) {\n      return Date.now() > closeTimestampMs\n    }\n  }\n\n  return false\n}\n\nexport const getPredictionUsers = async (\n  options: GetPredictionUsersOptions = {},\n  api: string,\n  tokenSymbol: string,\n): Promise<UserResponse<BetResponse>[]> => {\n  const { first, skip, where, orderBy, orderDir } = { ...defaultPredictionUserOptions, ...options }\n  const response = await request(\n    api,\n    gql`\n      query getUsers($first: Int!, $skip: Int!, $where: User_filter, $orderBy: User_orderBy, $orderDir: OrderDirection) {\n        users(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDir) {\n          ${getUserBaseFields(tokenSymbol)}\n        }\n      }\n    `,\n    { first, skip, where, orderBy, orderDir },\n  )\n  return response.users\n}\n\nexport const getPredictionUser = async (\n  account: string,\n  api: string,\n  tokenSymbol: string,\n): Promise<UserResponse<BetResponse>> => {\n  const response = await request(\n    api,\n    gql`\n      query getUser($id: ID!) {\n        user(id: $id) {\n          ${getUserBaseFields(tokenSymbol)}\n        }\n      }\n  `,\n    {\n      id: account.toLowerCase(),\n    },\n  )\n  return response.user\n}\n\nexport const getClaimStatuses = async (\n  account: string,\n  epochs: number[],\n  address: string,\n): Promise<PredictionsState['claimableStatuses']> => {\n  const claimableCalls = epochs.map((epoch) => ({\n    address,\n    name: 'claimable',\n    params: [epoch, account],\n  }))\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>({\n    abi: predictionsAbi,\n    calls: claimableCalls,\n  })\n\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\n    const epoch = epochs[index]\n    const [claimable] = claimableResponse\n\n    return {\n      ...accum,\n      [epoch]: claimable,\n    }\n  }, {})\n}\n\nexport type MarketData = Pick<PredictionsState, 'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount'>\nexport const getPredictionData = async (address: string): Promise<MarketData> => {\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused'].map((method) => ({\n    address,\n    name: method,\n  }))\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused]] = await multicallv2({\n    abi: predictionsAbi,\n    calls: staticCalls,\n  })\n\n  return {\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: currentEpoch.toNumber(),\n    intervalSeconds: intervalSeconds.toNumber(),\n    minBetAmount: minBetAmount.toString(),\n  }\n}\n\nexport const getRoundsData = async (epochs: number[], address: string): Promise<PredictionsRoundsResponse[]> => {\n  const calls = epochs.map((epoch) => ({\n    address,\n    name: 'rounds',\n    params: [epoch],\n  }))\n  const response = await multicallv2<PredictionsRoundsResponse[]>({ abi: predictionsAbi, calls })\n  return response\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\n  return {\n    epoch,\n    startTimestamp,\n    lockTimestamp: null,\n    closeTimestamp: null,\n    lockPrice: null,\n    closePrice: null,\n    totalAmount: Zero.toJSON(),\n    bullAmount: Zero.toJSON(),\n    bearAmount: Zero.toJSON(),\n    rewardBaseCalAmount: Zero.toJSON(),\n    rewardAmount: Zero.toJSON(),\n    oracleCalled: false,\n    lockOracleId: null,\n    closeOracleId: null,\n  }\n}\n\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.epoch.toString()]: round,\n    }\n  }, {})\n}\n\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\n  amount: ledgerResponse.amount.toJSON(),\n  claimed: ledgerResponse.claimed,\n})\n\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\n  return ledgers.reduce((accum, ledgerResponse, index) => {\n    if (!ledgerResponse) {\n      return accum\n    }\n\n    // If the amount is zero that means the user did not bet\n    if (ledgerResponse.amount.eq(0)) {\n      return accum\n    }\n\n    const epoch = epochs[index].toString()\n\n    return {\n      ...accum,\n      [account]: {\n        ...accum[account],\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\n      },\n    }\n  }, {})\n}\n\n/**\n * Serializes the return from the \"rounds\" call for redux\n */\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\n  const {\n    epoch,\n    startTimestamp,\n    lockTimestamp,\n    closeTimestamp,\n    lockPrice,\n    closePrice,\n    totalAmount,\n    bullAmount,\n    bearAmount,\n    rewardBaseCalAmount,\n    rewardAmount,\n    oracleCalled,\n    lockOracleId,\n    closeOracleId,\n  } = response\n\n  return {\n    oracleCalled,\n    epoch: epoch.toNumber(),\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\n    totalAmount: totalAmount.toJSON(),\n    bullAmount: bullAmount.toJSON(),\n    bearAmount: bearAmount.toJSON(),\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\n    rewardAmount: rewardAmount.toJSON(),\n    lockOracleId: lockOracleId.toString(),\n    closeOracleId: closeOracleId.toString(),\n  }\n}\n\n/**\n * Parse serialized values back into BigNumber\n * BigNumber values are stored with the \"toJSON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\n  return Object.keys(data).reduce((accum, key) => {\n    const value = data[key]\n\n    if (value && value?.type === 'BigNumber') {\n      return {\n        ...accum,\n        [key]: BigNumber.from(value),\n      }\n    }\n\n    return {\n      ...accum,\n      [key]: value,\n    }\n  }, {}) as K\n}\n\nexport const fetchUsersRoundsLength = async (account: string, address: string) => {\n  try {\n    const contract = getPredictionsContract(address)\n    const length = await contract.getUserRoundsLength(account)\n    return length\n  } catch {\n    return Zero\n  }\n}\n\n/**\n * Fetches rounds a user has participated in\n */\nexport const fetchUserRounds = async (\n  account: string,\n  cursor = 0,\n  size = ROUNDS_PER_PAGE,\n  address,\n): Promise<{ [key: string]: ReduxNodeLedger }> => {\n  const contract = getPredictionsContract(address)\n\n  try {\n    const [rounds, ledgers] = await contract.getUserRounds(account, cursor, size)\n\n    return rounds.reduce((accum, round, index) => {\n      return {\n        ...accum,\n        [round.toString()]: serializePredictionsLedgerResponse(ledgers[index] as PredictionsLedgerResponse),\n      }\n    }, {})\n  } catch {\n    // When the results run out the contract throws an error.\n    return null\n  }\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[1014],{\n\n/***/ 87799:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ck\": function() { return /* binding */ REWARD_RATE; },\n/* harmony export */   \"ND\": function() { return /* binding */ FUTURE_ROUND_COUNT; },\n/* harmony export */   \"eQ\": function() { return /* binding */ LEADERBOARD_MIN_ROUNDS_PLAYED; },\n/* harmony export */   \"fq\": function() { return /* binding */ ROUND_BUFFER; },\n/* harmony export */   \"v9\": function() { return /* binding */ PAST_ROUND_COUNT; },\n/* harmony export */   \"yg\": function() { return /* binding */ ROUNDS_PER_PAGE; }\n/* harmony export */ });\n/* harmony import */ var config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7599);\n\nvar REWARD_RATE = 0.97;\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\nvar ROUND_BUFFER = config__WEBPACK_IMPORTED_MODULE_0__/* .BSC_BLOCK_TIME */ .hJ * 3;\nvar PAST_ROUND_COUNT = 5;\nvar FUTURE_ROUND_COUNT = 2;\nvar ROUNDS_PER_PAGE = 200;\nvar LEADERBOARD_MIN_ROUNDS_PLAYED = 10;\n\n\n/***/ }),\n\n/***/ 51014:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"ub\": function() { return /* binding */ LEADERBOARD_RESULTS_PER_PAGE; },\n  \"x4\": function() { return /* binding */ Result; },\n  \"oO\": function() { return /* binding */ fetchUserRounds; },\n  \"t$\": function() { return /* binding */ fetchUsersRoundsLength; },\n  \"Fr\": function() { return /* binding */ getBetHistory; },\n  \"jG\": function() { return /* binding */ getClaimStatuses; },\n  \"fq\": function() { return /* binding */ getFilteredBets; },\n  \"HJ\": function() { return /* binding */ getHasRoundFailed; },\n  \"Tq\": function() { return /* binding */ getLedgerData; },\n  \"n\": function() { return /* binding */ getPredictionData; },\n  \"s9\": function() { return /* binding */ getPredictionUser; },\n  \"D\": function() { return /* binding */ getPredictionUsers; },\n  \"yz\": function() { return /* binding */ getRoundResult; },\n  \"$8\": function() { return /* binding */ getRoundsData; },\n  \"yn\": function() { return /* binding */ getTotalWon; },\n  \"CM\": function() { return /* binding */ makeFutureRoundResponse; },\n  \"a8\": function() { return /* binding */ makeLedgerData; },\n  \"D5\": function() { return /* binding */ makeRoundData; },\n  \"zN\": function() { return /* binding */ parseBigNumberObj; },\n  \"WB\": function() { return /* binding */ serializePredictionsRoundsResponse; },\n  \"ld\": function() { return /* binding */ transformBetResponse; },\n  \"r3\": function() { return /* binding */ transformUserResponse; }\n});\n\n// UNUSED EXPORTS: serializePredictionsLedgerResponse\n\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_async_to_generator.mjs\nvar _async_to_generator = __webpack_require__(98788);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_define_property.mjs\nvar _define_property = __webpack_require__(47842);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread.mjs\nvar _object_spread = __webpack_require__(70865);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread_props.mjs\nvar _object_spread_props = __webpack_require__(96670);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_sliced_to_array.mjs\nvar _sliced_to_array = __webpack_require__(87394);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_tagged_template_literal.mjs\nvar _tagged_template_literal = __webpack_require__(92228);\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n// EXTERNAL MODULE: ../../node_modules/graphql-request/dist/index.js\nvar dist = __webpack_require__(6647);\n// EXTERNAL MODULE: ./src/config/constants/endpoints.ts\nvar endpoints = __webpack_require__(10494);\n// EXTERNAL MODULE: ../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\nvar bignumber = __webpack_require__(10528);\n// EXTERNAL MODULE: ./src/state/types.ts\nvar types = __webpack_require__(93638);\n// EXTERNAL MODULE: ./src/utils/multicall.ts\nvar multicall = __webpack_require__(25152);\n// EXTERNAL MODULE: ./src/utils/contractHelpers.ts + 28 modules\nvar contractHelpers = __webpack_require__(80405);\n// EXTERNAL MODULE: ./src/config/abi/predictions.json\nvar predictions = __webpack_require__(45883);\n// EXTERNAL MODULE: ../../node_modules/@ethersproject/constants/lib.esm/bignumbers.js\nvar bignumbers = __webpack_require__(90711);\n;// CONCATENATED MODULE: ./src/state/predictions/bnbQueries.ts\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */ var roundBaseFields = \"\\n  id\\n  epoch\\n  position\\n  failed\\n  startAt\\n  startBlock\\n  startHash\\n  lockAt\\n  lockBlock\\n  lockHash\\n  lockPrice\\n  lockRoundId\\n  closeAt\\n  closeBlock\\n  closeHash\\n  closePrice\\n  closeRoundId\\n  totalBets\\n  totalAmount\\n  bullBets\\n  bullAmount\\n  bearBets\\n  bearAmount\\n\";\nvar betBaseFields = \"\\n id\\n hash  \\n amount\\n position\\n claimed\\n claimedAt\\n claimedHash\\n claimedBlock\\n claimedBNB\\n claimedNetBNB\\n createdAt\\n updatedAt\\n\";\nvar userBaseFields = \"\\n  id\\n  createdAt\\n  updatedAt\\n  block\\n  totalBets\\n  totalBetsBull\\n  totalBetsBear\\n  totalBNB\\n  totalBNBBull\\n  totalBNBBear\\n  totalBetsClaimed\\n  totalBNBClaimed\\n  winRate\\n  averageBNB\\n  netBNB\\n\";\n\n;// CONCATENATED MODULE: ./src/state/predictions/cakeQueries.ts\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */ var cakeQueries_roundBaseFields = \"\\n  id\\n  epoch\\n  position\\n  failed\\n  startAt\\n  startBlock\\n  startHash\\n  lockAt\\n  lockBlock\\n  lockHash\\n  lockPrice\\n  lockRoundId\\n  closeAt\\n  closeBlock\\n  closeHash\\n  closePrice\\n  closeRoundId\\n  totalBets\\n  totalAmount\\n  bullBets\\n  bullAmount\\n  bearBets\\n  bearAmount\\n\";\nvar cakeQueries_betBaseFields = \"\\n id\\n hash  \\n amount\\n position\\n claimed\\n claimedAt\\n claimedHash\\n claimedBlock\\n claimedCAKE\\n claimedNetCAKE\\n createdAt\\n updatedAt\\n\";\nvar cakeQueries_userBaseFields = \"\\n  id\\n  createdAt\\n  updatedAt\\n  block\\n  totalBets\\n  totalBetsBull\\n  totalBetsBear\\n  totalCAKE\\n  totalCAKEBull\\n  totalCAKEBear\\n  totalBetsClaimed\\n  totalCAKEClaimed\\n  winRate\\n  averageCAKE\\n  netCAKE\\n\";\n\n;// CONCATENATED MODULE: ./src/state/predictions/queries.ts\n\n\nvar getRoundBaseFields = function(tokenSymbol) {\n    return tokenSymbol === \"CAKE\" ? cakeQueries_roundBaseFields : roundBaseFields;\n};\nvar getBetBaseFields = function(tokenSymbol) {\n    return tokenSymbol === \"CAKE\" ? cakeQueries_betBaseFields : betBaseFields;\n};\nvar getUserBaseFields = function(tokenSymbol) {\n    return tokenSymbol === \"CAKE\" ? cakeQueries_userBaseFields : userBaseFields;\n};\n\n// EXTERNAL MODULE: ./src/state/predictions/config.ts\nvar config = __webpack_require__(87799);\n;// CONCATENATED MODULE: ./src/utils/numberOrNull.ts\nvar numberOrNull = function(value) {\n    if (value === null) {\n        return null;\n    }\n    var valueNum = Number(value);\n    return Number.isNaN(valueNum) ? null : valueNum;\n};\n/* harmony default export */ var utils_numberOrNull = (numberOrNull);\n\n;// CONCATENATED MODULE: ./src/state/predictions/cakeTransformers.ts\n\n\nvar getRoundPosition = function(positionResponse) {\n    if (positionResponse === \"Bull\") {\n        return types/* BetPosition.BULL */.Tu.BULL;\n    }\n    if (positionResponse === \"Bear\") {\n        return types/* BetPosition.BEAR */.Tu.BEAR;\n    }\n    if (positionResponse === \"House\") {\n        return types/* BetPosition.HOUSE */.Tu.HOUSE;\n    }\n    return null;\n};\nvar transformBetResponseCAKE = function(betResponse) {\n    var bet = {\n        id: betResponse.id,\n        hash: betResponse.hash,\n        block: utils_numberOrNull(betResponse.block),\n        amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n        position: betResponse.position === \"Bull\" ? types/* BetPosition.BULL */.Tu.BULL : types/* BetPosition.BEAR */.Tu.BEAR,\n        claimed: betResponse.claimed,\n        claimedAt: utils_numberOrNull(betResponse.claimedAt),\n        claimedBlock: utils_numberOrNull(betResponse.claimedBlock),\n        claimedHash: betResponse.claimedHash,\n        claimedBNB: betResponse.claimedCAKE ? parseFloat(betResponse.claimedCAKE) : 0,\n        claimedNetBNB: betResponse.claimedNetCAKE ? parseFloat(betResponse.claimedNetCAKE) : 0,\n        createdAt: utils_numberOrNull(betResponse.createdAt),\n        updatedAt: utils_numberOrNull(betResponse.updatedAt)\n    };\n    if (betResponse.user) {\n        bet.user = transformUserResponseCAKE(betResponse.user);\n    }\n    if (betResponse.round) {\n        bet.round = transformRoundResponseCAKE(betResponse.round);\n    }\n    return bet;\n};\nvar transformUserResponseCAKE = function(userResponse) {\n    var ref = userResponse || {}, id = ref.id, createdAt = ref.createdAt, updatedAt = ref.updatedAt, block = ref.block, totalBets = ref.totalBets, totalBetsBull = ref.totalBetsBull, totalBetsBear = ref.totalBetsBear, totalCAKE = ref.totalCAKE, totalCAKEBull = ref.totalCAKEBull, totalCAKEBear = ref.totalCAKEBear, totalBetsClaimed = ref.totalBetsClaimed, totalCAKEClaimed = ref.totalCAKEClaimed, winRate = ref.winRate, averageCAKE = ref.averageCAKE, netCAKE = ref.netCAKE;\n    return {\n        id: id,\n        createdAt: utils_numberOrNull(createdAt),\n        updatedAt: utils_numberOrNull(updatedAt),\n        block: utils_numberOrNull(block),\n        totalBets: utils_numberOrNull(totalBets),\n        totalBetsBull: utils_numberOrNull(totalBetsBull),\n        totalBetsBear: utils_numberOrNull(totalBetsBear),\n        totalBNB: totalCAKE ? parseFloat(totalCAKE) : 0,\n        totalBNBBull: totalCAKEBull ? parseFloat(totalCAKEBull) : 0,\n        totalBNBBear: totalCAKEBear ? parseFloat(totalCAKEBear) : 0,\n        totalBetsClaimed: utils_numberOrNull(totalBetsClaimed),\n        totalBNBClaimed: totalCAKEClaimed ? parseFloat(totalCAKEClaimed) : 0,\n        winRate: winRate ? parseFloat(winRate) : 0,\n        averageBNB: averageCAKE ? parseFloat(averageCAKE) : 0,\n        netBNB: netCAKE ? parseFloat(netCAKE) : 0\n    };\n};\nvar transformRoundResponseCAKE = function(roundResponse) {\n    var id = roundResponse.id, epoch = roundResponse.epoch, failed = roundResponse.failed, position = roundResponse.position, startAt = roundResponse.startAt, startBlock = roundResponse.startBlock, startHash = roundResponse.startHash, lockAt = roundResponse.lockAt, lockBlock = roundResponse.lockBlock, lockHash = roundResponse.lockHash, lockPrice = roundResponse.lockPrice, lockRoundId = roundResponse.lockRoundId, closeAt = roundResponse.closeAt, closeBlock = roundResponse.closeBlock, closeHash = roundResponse.closeHash, closePrice = roundResponse.closePrice, closeRoundId = roundResponse.closeRoundId, totalBets = roundResponse.totalBets, totalAmount = roundResponse.totalAmount, bullBets = roundResponse.bullBets, bullAmount = roundResponse.bullAmount, bearBets = roundResponse.bearBets, bearAmount = roundResponse.bearAmount, _bets = roundResponse.bets, bets = _bets === void 0 ? [] : _bets;\n    return {\n        id: id,\n        failed: failed,\n        startHash: startHash,\n        lockHash: lockHash,\n        lockRoundId: lockRoundId,\n        closeRoundId: closeRoundId,\n        closeHash: closeHash,\n        position: getRoundPosition(position),\n        epoch: utils_numberOrNull(epoch),\n        startAt: utils_numberOrNull(startAt),\n        startBlock: utils_numberOrNull(startBlock),\n        lockAt: utils_numberOrNull(lockAt),\n        lockBlock: utils_numberOrNull(lockBlock),\n        lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n        closeAt: utils_numberOrNull(closeAt),\n        closeBlock: utils_numberOrNull(closeBlock),\n        closePrice: closePrice ? parseFloat(closePrice) : 0,\n        totalBets: utils_numberOrNull(totalBets),\n        totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n        bullBets: utils_numberOrNull(bullBets),\n        bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n        bearBets: utils_numberOrNull(bearBets),\n        bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n        bets: bets.map(transformBetResponseCAKE)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/state/predictions/bnbTransformers.ts\n\n\nvar bnbTransformers_getRoundPosition = function(positionResponse) {\n    if (positionResponse === \"Bull\") {\n        return types/* BetPosition.BULL */.Tu.BULL;\n    }\n    if (positionResponse === \"Bear\") {\n        return types/* BetPosition.BEAR */.Tu.BEAR;\n    }\n    if (positionResponse === \"House\") {\n        return types/* BetPosition.HOUSE */.Tu.HOUSE;\n    }\n    return null;\n};\nvar transformBetResponseBNB = function(betResponse) {\n    var bet = {\n        id: betResponse.id,\n        hash: betResponse.hash,\n        block: utils_numberOrNull(betResponse.block),\n        amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n        position: betResponse.position === \"Bull\" ? types/* BetPosition.BULL */.Tu.BULL : types/* BetPosition.BEAR */.Tu.BEAR,\n        claimed: betResponse.claimed,\n        claimedAt: utils_numberOrNull(betResponse.claimedAt),\n        claimedBlock: utils_numberOrNull(betResponse.claimedBlock),\n        claimedHash: betResponse.claimedHash,\n        claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\n        claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\n        createdAt: utils_numberOrNull(betResponse.createdAt),\n        updatedAt: utils_numberOrNull(betResponse.updatedAt)\n    };\n    if (betResponse.user) {\n        bet.user = transformUserResponseBNB(betResponse.user);\n    }\n    if (betResponse.round) {\n        bet.round = transformRoundResponseBNB(betResponse.round);\n    }\n    return bet;\n};\nvar transformUserResponseBNB = function(userResponse) {\n    var ref = userResponse || {}, id = ref.id, createdAt = ref.createdAt, updatedAt = ref.updatedAt, block = ref.block, totalBets = ref.totalBets, totalBetsBull = ref.totalBetsBull, totalBetsBear = ref.totalBetsBear, totalBNB = ref.totalBNB, totalBNBBull = ref.totalBNBBull, totalBNBBear = ref.totalBNBBear, totalBetsClaimed = ref.totalBetsClaimed, totalBNBClaimed = ref.totalBNBClaimed, winRate = ref.winRate, averageBNB = ref.averageBNB, netBNB = ref.netBNB;\n    return {\n        id: id,\n        createdAt: utils_numberOrNull(createdAt),\n        updatedAt: utils_numberOrNull(updatedAt),\n        block: utils_numberOrNull(block),\n        totalBets: utils_numberOrNull(totalBets),\n        totalBetsBull: utils_numberOrNull(totalBetsBull),\n        totalBetsBear: utils_numberOrNull(totalBetsBear),\n        totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\n        totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\n        totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\n        totalBetsClaimed: utils_numberOrNull(totalBetsClaimed),\n        totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\n        winRate: winRate ? parseFloat(winRate) : 0,\n        averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\n        netBNB: netBNB ? parseFloat(netBNB) : 0\n    };\n};\nvar transformRoundResponseBNB = function(roundResponse) {\n    var id = roundResponse.id, epoch = roundResponse.epoch, failed = roundResponse.failed, position = roundResponse.position, startAt = roundResponse.startAt, startBlock = roundResponse.startBlock, startHash = roundResponse.startHash, lockAt = roundResponse.lockAt, lockBlock = roundResponse.lockBlock, lockHash = roundResponse.lockHash, lockPrice = roundResponse.lockPrice, lockRoundId = roundResponse.lockRoundId, closeAt = roundResponse.closeAt, closeBlock = roundResponse.closeBlock, closeHash = roundResponse.closeHash, closePrice = roundResponse.closePrice, closeRoundId = roundResponse.closeRoundId, totalBets = roundResponse.totalBets, totalAmount = roundResponse.totalAmount, bullBets = roundResponse.bullBets, bullAmount = roundResponse.bullAmount, bearBets = roundResponse.bearBets, bearAmount = roundResponse.bearAmount, _bets = roundResponse.bets, bets = _bets === void 0 ? [] : _bets;\n    return {\n        id: id,\n        failed: failed,\n        startHash: startHash,\n        lockHash: lockHash,\n        lockRoundId: lockRoundId,\n        closeRoundId: closeRoundId,\n        closeHash: closeHash,\n        position: bnbTransformers_getRoundPosition(position),\n        epoch: utils_numberOrNull(epoch),\n        startAt: utils_numberOrNull(startAt),\n        startBlock: utils_numberOrNull(startBlock),\n        lockAt: utils_numberOrNull(lockAt),\n        lockBlock: utils_numberOrNull(lockBlock),\n        lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n        closeAt: utils_numberOrNull(closeAt),\n        closeBlock: utils_numberOrNull(closeBlock),\n        closePrice: closePrice ? parseFloat(closePrice) : 0,\n        totalBets: utils_numberOrNull(totalBets),\n        totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n        bullBets: utils_numberOrNull(bullBets),\n        bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n        bearBets: utils_numberOrNull(bearBets),\n        bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n        bets: bets.map(transformBetResponseBNB)\n    };\n};\n\n;// CONCATENATED MODULE: ./src/state/predictions/helpers.ts\n\n\n\n\n\n\n\nfunction _templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n        query getTotalWonData {\\n          market(id: 1) {\\n            totalBNB\\n            totalBNBTreasury\\n          }\\n        }\\n      \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n        query getTotalWonData {\\n          market(id: 1) {\\n            totalCAKE\\n            totalCAKETreasury\\n          }\\n        }\\n      \"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\\n          \",\n        \"\\n          round {\\n            \",\n        \"\\n          }\\n          user {\\n            \",\n        \"\\n          }\\n        }\\n      }\\n    \"\n    ]);\n    _templateObject2 = function _templateObject2() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query getUsers($first: Int!, $skip: Int!, $where: User_filter, $orderBy: User_orderBy, $orderDir: OrderDirection) {\\n        users(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDir) {\\n          \",\n        \"\\n        }\\n      }\\n    \"\n    ]);\n    _templateObject3 = function _templateObject3() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query getUser($id: ID!) {\\n        user(id: $id) {\\n          \",\n        \"\\n        }\\n      }\\n  \"\n    ]);\n    _templateObject4 = function _templateObject4() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nvar Result;\n(function(Result) {\n    Result[\"WIN\"] = \"win\";\n    Result[\"LOSE\"] = \"lose\";\n    Result[\"CANCELED\"] = \"canceled\";\n    Result[\"HOUSE\"] = \"house\";\n    Result[\"LIVE\"] = \"live\";\n})(Result || (Result = {}));\nvar transformBetResponse = function(tokenSymbol) {\n    return tokenSymbol === \"CAKE\" ? transformBetResponseCAKE : transformBetResponseBNB;\n};\nvar transformUserResponse = function(tokenSymbol) {\n    return tokenSymbol === \"CAKE\" ? transformUserResponseCAKE : transformUserResponseBNB;\n};\nvar getRoundResult = function(bet, currentEpoch) {\n    var round = bet.round;\n    if (round.failed) {\n        return Result.CANCELED;\n    }\n    if (round.epoch >= currentEpoch - 1) {\n        return Result.LIVE;\n    }\n    if (bet.round.position === types/* BetPosition.HOUSE */.Tu.HOUSE) {\n        return Result.HOUSE;\n    }\n    var roundResultPosition = round.closePrice > round.lockPrice ? types/* BetPosition.BULL */.Tu.BULL : types/* BetPosition.BEAR */.Tu.BEAR;\n    return bet.position === roundResultPosition ? Result.WIN : Result.LOSE;\n};\nvar getFilteredBets = function(bets, filter) {\n    switch(filter){\n        case types/* HistoryFilter.COLLECTED */.dZ.COLLECTED:\n            return bets.filter(function(bet) {\n                return bet.claimed === true;\n            });\n        case types/* HistoryFilter.UNCOLLECTED */.dZ.UNCOLLECTED:\n            return bets.filter(function(bet) {\n                return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true);\n            });\n        case types/* HistoryFilter.ALL */.dZ.ALL:\n        default:\n            return bets;\n    }\n};\nvar getTotalWonMarket = function(market, tokenSymbol) {\n    var total = market[\"total\".concat(tokenSymbol)] ? parseFloat(market[\"total\".concat(tokenSymbol)]) : 0;\n    var totalTreasury = market[\"total\".concat(tokenSymbol, \"Treasury\")] ? parseFloat(market[\"total\".concat(tokenSymbol, \"Treasury\")]) : 0;\n    return Math.max(total - totalTreasury, 0);\n};\nvar getTotalWon = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function() {\n        var ref, ref1, BNBMarket, CAKEMarket, totalWonBNB, totalWonCAKE;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        Promise.all([\n                            (0,dist.request)(endpoints/* GRAPH_API_PREDICTION_BNB */.GZ, (0,dist.gql)(_templateObject())),\n                            (0,dist.request)(endpoints/* GRAPH_API_PREDICTION_CAKE */.fO, (0,dist.gql)(_templateObject1()))\n                        ])\n                    ];\n                case 1:\n                    ref = _sliced_to_array/* default.apply */.Z.apply(void 0, [\n                        _state.sent(),\n                        1\n                    ]), ref1 = ref[0], BNBMarket = ref1.market, CAKEMarket = ref1.market;\n                    totalWonBNB = getTotalWonMarket(BNBMarket, \"BNB\");\n                    totalWonCAKE = getTotalWonMarket(CAKEMarket, \"CAKE\");\n                    return [\n                        2,\n                        {\n                            totalWonBNB: totalWonBNB,\n                            totalWonCAKE: totalWonCAKE\n                        }\n                    ];\n            }\n        });\n    });\n    return function getTotalWon() {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getBetHistory = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function() {\n        var where, first, skip, api, tokenSymbol, response;\n        var _arguments = arguments;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    where = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : {}, first = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 1000, skip = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : 0, api = _arguments.length > 3 ? _arguments[3] : void 0, tokenSymbol = _arguments.length > 4 ? _arguments[4] : void 0;\n                    return [\n                        4,\n                        (0,dist.request)(api, (0,dist.gql)(_templateObject2(), getBetBaseFields(tokenSymbol), getRoundBaseFields(tokenSymbol), getUserBaseFields(tokenSymbol)), {\n                            first: first,\n                            skip: skip,\n                            where: where\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response.bets\n                    ];\n            }\n        });\n    });\n    return function getBetHistory() {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getLedgerData = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account, epochs, address) {\n        var ledgerCalls, response;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ledgerCalls = epochs.map(function(epoch) {\n                        return {\n                            address: address,\n                            name: \"ledger\",\n                            params: [\n                                epoch,\n                                account\n                            ]\n                        };\n                    });\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: predictions,\n                            calls: ledgerCalls\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response\n                    ];\n            }\n        });\n    });\n    return function getLedgerData(account, epochs, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar LEADERBOARD_RESULTS_PER_PAGE = 20;\nvar defaultPredictionUserOptions = {\n    skip: 0,\n    first: LEADERBOARD_RESULTS_PER_PAGE,\n    orderBy: \"createdAt\",\n    orderDir: \"desc\"\n};\nvar getHasRoundFailed = function(oracleCalled, closeTimestamp, buffer) {\n    if (!oracleCalled) {\n        var closeTimestampMs = (closeTimestamp + buffer) * 1000;\n        if (Number.isFinite(closeTimestampMs)) {\n            return Date.now() > closeTimestampMs;\n        }\n    }\n    return false;\n};\nvar getPredictionUsers = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function() {\n        var options, api, tokenSymbol, ref, first, skip, where, orderBy, orderDir, response;\n        var _arguments = arguments;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    options = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : {}, api = _arguments.length > 1 ? _arguments[1] : void 0, tokenSymbol = _arguments.length > 2 ? _arguments[2] : void 0;\n                    ref = (0,_object_spread/* default */.Z)({}, defaultPredictionUserOptions, options), first = ref.first, skip = ref.skip, where = ref.where, orderBy = ref.orderBy, orderDir = ref.orderDir;\n                    return [\n                        4,\n                        (0,dist.request)(api, (0,dist.gql)(_templateObject3(), getUserBaseFields(tokenSymbol)), {\n                            first: first,\n                            skip: skip,\n                            where: where,\n                            orderBy: orderBy,\n                            orderDir: orderDir\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response.users\n                    ];\n            }\n        });\n    });\n    return function getPredictionUsers() {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getPredictionUser = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account, api, tokenSymbol) {\n        var response;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        (0,dist.request)(api, (0,dist.gql)(_templateObject4(), getUserBaseFields(tokenSymbol)), {\n                            id: account.toLowerCase()\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response.user\n                    ];\n            }\n        });\n    });\n    return function getPredictionUser(account, api, tokenSymbol) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getClaimStatuses = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account, epochs, address) {\n        var claimableCalls, claimableResponses;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    claimableCalls = epochs.map(function(epoch) {\n                        return {\n                            address: address,\n                            name: \"claimable\",\n                            params: [\n                                epoch,\n                                account\n                            ]\n                        };\n                    });\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: predictions,\n                            calls: claimableCalls\n                        })\n                    ];\n                case 1:\n                    claimableResponses = _state.sent();\n                    return [\n                        2,\n                        claimableResponses.reduce(function(accum, claimableResponse, index) {\n                            var epoch = epochs[index];\n                            var _claimableResponse = (0,_sliced_to_array/* default */.Z)(claimableResponse, 1), claimable = _claimableResponse[0];\n                            return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, epoch, claimable));\n                        }, {})\n                    ];\n            }\n        });\n    });\n    return function getClaimStatuses(account, epochs, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getPredictionData = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(address) {\n        var staticCalls, ref, ref1, currentEpoch, ref2, intervalSeconds, ref3, minBetAmount, ref4, paused;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    staticCalls = [\n                        \"currentEpoch\",\n                        \"intervalSeconds\",\n                        \"minBetAmount\",\n                        \"paused\"\n                    ].map(function(method) {\n                        return {\n                            address: address,\n                            name: method\n                        };\n                    });\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: predictions,\n                            calls: staticCalls\n                        })\n                    ];\n                case 1:\n                    ref = _sliced_to_array/* default.apply */.Z.apply(void 0, [\n                        _state.sent(),\n                        4\n                    ]), ref1 = (0,_sliced_to_array/* default */.Z)(ref[0], 1), currentEpoch = ref1[0], ref2 = (0,_sliced_to_array/* default */.Z)(ref[1], 1), intervalSeconds = ref2[0], ref3 = (0,_sliced_to_array/* default */.Z)(ref[2], 1), minBetAmount = ref3[0], ref4 = (0,_sliced_to_array/* default */.Z)(ref[3], 1), paused = ref4[0];\n                    return [\n                        2,\n                        {\n                            status: paused ? types/* PredictionStatus.PAUSED */.Gw.PAUSED : types/* PredictionStatus.LIVE */.Gw.LIVE,\n                            currentEpoch: currentEpoch.toNumber(),\n                            intervalSeconds: intervalSeconds.toNumber(),\n                            minBetAmount: minBetAmount.toString()\n                        }\n                    ];\n            }\n        });\n    });\n    return function getPredictionData(address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getRoundsData = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(epochs, address) {\n        var calls, response;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    calls = epochs.map(function(epoch) {\n                        return {\n                            address: address,\n                            name: \"rounds\",\n                            params: [\n                                epoch\n                            ]\n                        };\n                    });\n                    return [\n                        4,\n                        (0,multicall/* multicallv2 */.v)({\n                            abi: predictions,\n                            calls: calls\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response\n                    ];\n            }\n        });\n    });\n    return function getRoundsData(epochs, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar makeFutureRoundResponse = function(epoch, startTimestamp) {\n    return {\n        epoch: epoch,\n        startTimestamp: startTimestamp,\n        lockTimestamp: null,\n        closeTimestamp: null,\n        lockPrice: null,\n        closePrice: null,\n        totalAmount: bignumbers/* Zero.toJSON */._Y.toJSON(),\n        bullAmount: bignumbers/* Zero.toJSON */._Y.toJSON(),\n        bearAmount: bignumbers/* Zero.toJSON */._Y.toJSON(),\n        rewardBaseCalAmount: bignumbers/* Zero.toJSON */._Y.toJSON(),\n        rewardAmount: bignumbers/* Zero.toJSON */._Y.toJSON(),\n        oracleCalled: false,\n        lockOracleId: null,\n        closeOracleId: null\n    };\n};\nvar makeRoundData = function(rounds) {\n    return rounds.reduce(function(accum, round) {\n        return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, round.epoch.toString(), round));\n    }, {});\n};\nvar serializePredictionsLedgerResponse = function(ledgerResponse) {\n    return {\n        position: ledgerResponse.position === 0 ? types/* BetPosition.BULL */.Tu.BULL : types/* BetPosition.BEAR */.Tu.BEAR,\n        amount: ledgerResponse.amount.toJSON(),\n        claimed: ledgerResponse.claimed\n    };\n};\nvar makeLedgerData = function(account, ledgers, epochs) {\n    return ledgers.reduce(function(accum, ledgerResponse, index) {\n        if (!ledgerResponse) {\n            return accum;\n        }\n        // If the amount is zero that means the user did not bet\n        if (ledgerResponse.amount.eq(0)) {\n            return accum;\n        }\n        var epoch = epochs[index].toString();\n        return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, account, (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum[account]), (0,_define_property/* default */.Z)({}, epoch, serializePredictionsLedgerResponse(ledgerResponse)))));\n    }, {});\n};\n/**\n * Serializes the return from the \"rounds\" call for redux\n */ var serializePredictionsRoundsResponse = function(response) {\n    var epoch = response.epoch, startTimestamp = response.startTimestamp, lockTimestamp = response.lockTimestamp, closeTimestamp = response.closeTimestamp, lockPrice = response.lockPrice, closePrice = response.closePrice, totalAmount = response.totalAmount, bullAmount = response.bullAmount, bearAmount = response.bearAmount, rewardBaseCalAmount = response.rewardBaseCalAmount, rewardAmount = response.rewardAmount, oracleCalled = response.oracleCalled, lockOracleId = response.lockOracleId, closeOracleId = response.closeOracleId;\n    return {\n        oracleCalled: oracleCalled,\n        epoch: epoch.toNumber(),\n        startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\n        lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\n        closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\n        lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\n        closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\n        totalAmount: totalAmount.toJSON(),\n        bullAmount: bullAmount.toJSON(),\n        bearAmount: bearAmount.toJSON(),\n        rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\n        rewardAmount: rewardAmount.toJSON(),\n        lockOracleId: lockOracleId.toString(),\n        closeOracleId: closeOracleId.toString()\n    };\n};\n/**\n * Parse serialized values back into BigNumber\n * BigNumber values are stored with the \"toJSON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */ var parseBigNumberObj = function(data) {\n    return Object.keys(data).reduce(function(accum, key) {\n        var value = data[key];\n        if (value && (value === null || value === void 0 ? void 0 : value.type) === \"BigNumber\") {\n            return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, key, bignumber/* BigNumber.from */.O$.from(value)));\n        }\n        return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, key, value));\n    }, {});\n};\nvar fetchUsersRoundsLength = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account, address) {\n        var contract, length, e;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    contract = (0,contractHelpers/* getPredictionsContract */.qi)(address);\n                    return [\n                        4,\n                        contract.getUserRoundsLength(account)\n                    ];\n                case 1:\n                    length = _state.sent();\n                    return [\n                        2,\n                        length\n                    ];\n                case 2:\n                    e = _state.sent();\n                    return [\n                        2,\n                        bignumbers/* Zero */._Y\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchUsersRoundsLength(account, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Fetches rounds a user has participated in\n */ var fetchUserRounds = function() {\n    var _ref = (0,_async_to_generator/* default */.Z)(function(account) {\n        var cursor, size, address, contract, ref, rounds, ledgers, e;\n        var _arguments = arguments;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    cursor = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 0, size = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : config/* ROUNDS_PER_PAGE */.yg, address = _arguments.length > 3 ? _arguments[3] : void 0;\n                    contract = (0,contractHelpers/* getPredictionsContract */.qi)(address);\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        contract.getUserRounds(account, cursor, size)\n                    ];\n                case 2:\n                    ref = _sliced_to_array/* default.apply */.Z.apply(void 0, [\n                        _state.sent(),\n                        2\n                    ]), rounds = ref[0], ledgers = ref[1];\n                    return [\n                        2,\n                        rounds.reduce(function(accum, round, index) {\n                            return (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, accum), (0,_define_property/* default */.Z)({}, round.toString(), serializePredictionsLedgerResponse(ledgers[index])));\n                        }, {})\n                    ];\n                case 3:\n                    e = _state.sent();\n                    // When the results run out the contract throws an error.\n                    return [\n                        2,\n                        null\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchUserRounds(account) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","REWARD_RATE","FUTURE_ROUND_COUNT","LEADERBOARD_MIN_ROUNDS_PLAYED","ROUND_BUFFER","PAST_ROUND_COUNT","ROUNDS_PER_PAGE","config__WEBPACK_IMPORTED_MODULE_0__","hJ","LEADERBOARD_RESULTS_PER_PAGE","Result","fetchUserRounds","fetchUsersRoundsLength","getBetHistory","getClaimStatuses","getFilteredBets","getHasRoundFailed","getLedgerData","getPredictionData","getPredictionUser","getPredictionUsers","getRoundResult","getRoundsData","getTotalWon","makeFutureRoundResponse","makeLedgerData","makeRoundData","parseBigNumberObj","serializePredictionsRoundsResponse","transformBetResponse","transformUserResponse","_async_to_generator","_define_property","_object_spread","_object_spread_props","_sliced_to_array","_tagged_template_literal","tslib_es6","dist","endpoints","bignumber","types","multicall","contractHelpers","predictions","bignumbers","getUserBaseFields","tokenSymbol","config","numberOrNull","value","valueNum","Number","isNaN","transformBetResponseCAKE","betResponse","bet","id","hash","block","utils_numberOrNull","amount","parseFloat","position","Tu","BULL","BEAR","claimed","claimedAt","claimedBlock","claimedHash","claimedBNB","claimedCAKE","claimedNetBNB","claimedNetCAKE","createdAt","updatedAt","user","transformUserResponseCAKE","round","transformRoundResponseCAKE","userResponse","ref","totalBets","totalBetsBull","totalBetsBear","totalCAKE","totalCAKEBull","totalCAKEBear","totalBetsClaimed","totalCAKEClaimed","winRate","averageCAKE","netCAKE","totalBNB","totalBNBBull","totalBNBBear","totalBNBClaimed","averageBNB","netBNB","roundResponse","positionResponse","epoch","failed","startAt","startBlock","startHash","lockAt","lockBlock","lockHash","lockPrice","lockRoundId","closeAt","closeBlock","closeHash","closePrice","closeRoundId","totalAmount","bullBets","bullAmount","bearBets","bearAmount","_bets","bets","HOUSE","map","transformBetResponseBNB","transformUserResponseBNB","transformRoundResponseBNB","_templateObject","data","Z","_templateObject1","_templateObject2","_templateObject3","_templateObject4","_ref","currentEpoch","CANCELED","LIVE","roundResultPosition","WIN","LOSE","filter","dZ","COLLECTED","UNCOLLECTED","ALL","getTotalWonMarket","market","total","concat","totalTreasury","Math","max","ref1","BNBMarket","CAKEMarket","totalWonBNB","totalWonCAKE","__generator","_state","label","Promise","all","request","GZ","gql","fO","apply","sent","arguments","where","first","skip","api","response","_arguments","length","account","epochs","address","ledgerCalls","name","params","v","abi","calls","defaultPredictionUserOptions","orderBy","orderDir","oracleCalled","closeTimestamp","buffer","closeTimestampMs","isFinite","Date","now","options","users","toLowerCase","claimableCalls","claimableResponses","reduce","accum","claimableResponse","index","claimable","_claimableResponse","staticCalls","ref2","intervalSeconds","ref3","minBetAmount","ref4","paused","method","status","Gw","PAUSED","toNumber","toString","startTimestamp","lockTimestamp","_Y","toJSON","rewardBaseCalAmount","rewardAmount","lockOracleId","closeOracleId","rounds","serializePredictionsLedgerResponse","ledgerResponse","ledgers","eq","Object","keys","key","type","O$","from","contract","trys","qi","getUserRoundsLength","cursor","size","yg","getUserRounds"],"sourceRoot":""}