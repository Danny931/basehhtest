{"version":3,"file":"static/chunks/6401-97c86375d37a138f.js","mappings":"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","sources":["webpack://_N_E/./src/config/constants/info.ts","webpack://_N_E/./src/state/info/constant.ts","webpack://_N_E/./src/state/info/queries/helpers.ts","webpack://_N_E/./src/state/info/queries/pools/chartData.ts","webpack://_N_E/./src/state/info/queries/pools/transactions.ts","webpack://_N_E/./src/state/info/queries/protocol/chart.ts","webpack://_N_E/./src/state/info/queries/protocol/overview.ts","webpack://_N_E/./src/state/info/queries/protocol/transactions.ts","webpack://_N_E/./src/state/info/queries/tokens/chartData.ts","webpack://_N_E/./src/state/info/queries/tokens/poolsForToken.ts","webpack://_N_E/./src/state/info/queries/tokens/priceData.ts","webpack://_N_E/./src/state/info/queries/tokens/topTokens.ts","webpack://_N_E/./src/state/info/queries/tokens/tokenData.ts","webpack://_N_E/./src/state/info/queries/tokens/transactions.ts","webpack://_N_E/./src/state/info/hooks.ts","webpack://_N_E/./src/state/info/queries/pools/topPools.ts","webpack://_N_E/./src/state/info/queries/pools/poolData.ts","webpack://_N_E/./src/state/info/types.ts","webpack://_N_E/./src/utils/formatInfoNumbers.ts","webpack://_N_E/./src/utils/getBlocksFromTimestamps.ts","webpack://_N_E/./src/utils/getChangeForPeriod.ts","webpack://_N_E/./src/utils/getDeltaTimestamps.ts","webpack://_N_E/./src/utils/getLpFeesAndApr.ts","webpack://_N_E/./src/utils/getTokenLogoURL.ts","webpack://_N_E/./src/utils/graphql.ts","webpack://_N_E/./src/utils/requestWithTimeout.ts","webpack://_N_E/./src/views/Info/hooks/useBlocksFromTimestamps.ts","webpack://_N_E/./src/views/Info/utils/infoDataHelpers.ts","webpack://_N_E/./src/views/Info/utils/infoQueryHelpers.ts","webpack://_N_E/<anon>"],"sourcesContent":["export const MINIMUM_SEARCH_CHARACTERS = 2\n\nexport const WEEKS_IN_YEAR = 52.1429\n\nexport const TOTAL_FEE = 0.0025\nexport const LP_HOLDERS_FEE = 0.0017\nexport const TREASURY_FEE = 0.000225\nexport const BUYBACK_FEE = 0.000575\n\nexport const PCS_V2_START = 1619136000 // April 23, 2021, 12:00:00 AM\nexport const PCS_ETH_START = 1664130827 // Sep 23, 2022, 02:33:47 AM\nexport const ONE_DAY_UNIX = 86400 // 24h * 60m * 60s\nexport const ONE_HOUR_SECONDS = 3600\n\nexport const ITEMS_PER_INFO_TABLE_PAGE = 10\n\n// These tokens are either incorrectly priced or have some other issues that spoil the query data\n// None of them present any interest as they have almost 0 daily trade volume\nexport const TOKEN_BLACKLIST = [\n  // These ones are copied from v1 info\n  '0x495c7f3a713870f68f8b418b355c085dfdc412c3',\n  '0xc3761eb917cd790b30dad99f6cc5b4ff93c4f9ea',\n  '0xe31debd7abff90b06bca21010dd860d8701fd901',\n  '0xfc989fbb6b3024de5ca0144dc23c18a063942ac1',\n  '0xe40fc6ff5f2895b44268fd2e1a421e07f567e007',\n  '0xfd158609228b43aa380140b46fff3cdf9ad315de',\n  '0xc00af6212fcf0e6fd3143e692ccd4191dc308bea',\n  '0x205969b3ad459f7eba0dee07231a6357183d3fb6',\n  '0x0bd67d358636fd7b0597724aa4f20beedbf3073a',\n  '0xedf5d2a561e8a3cb5a846fbce24d2ccd88f50075',\n  '0x702b0789a3d4dade1688a0c8b7d944e5ba80fc30',\n  '0x041929a760d7049edaef0db246fa76ec975e90cc',\n  '0xba098df8c6409669f5e6ec971ac02cd5982ac108',\n  '0x1bbed115afe9e8d6e9255f18ef10d43ce6608d94',\n  '0xe99512305bf42745fae78003428dcaf662afb35d',\n  '0xbE609EAcbFca10F6E5504D39E3B113F808389056',\n  '0x847daf9dfdc22d5c61c4a857ec8733ef5950e82e',\n  '0xdbf8913dfe14536c0dae5dd06805afb2731f7e7b',\n  // These ones are newly found\n  '0xF1D50dB2C40b63D2c598e2A808d1871a40b1E653',\n  '0x4269e4090ff9dfc99d8846eb0d42e67f01c3ac8b',\n]\n\nexport const ETH_TOKEN_BLACKLIST = ['0x72b169ad8af6c4fb53056b6a2a85602ad6863864']\n","import { infoClient, infoClientETH, infoStableSwapClient } from 'utils/graphql'\nimport { INFO_CLIENT, INFO_CLIENT_ETH, BLOCKS_CLIENT, BLOCKS_CLIENT_ETH } from 'config/constants/endpoints'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { PCS_V2_START, PCS_ETH_START, ETH_TOKEN_BLACKLIST, TOKEN_BLACKLIST } from 'config/constants/info'\n\nexport type MultiChainName = 'BSC' | 'ETH'\n\nexport const multiChainQueryMainToken = {\n  BSC: 'BNB',\n  ETH: 'ETH',\n}\n\nexport const multiChainBlocksClient = {\n  BSC: BLOCKS_CLIENT,\n  ETH: BLOCKS_CLIENT_ETH,\n}\n\nexport const multiChainStartTime = {\n  BSC: PCS_V2_START,\n  ETH: PCS_ETH_START,\n}\n\nexport const multiChainId = {\n  BSC: ChainId.BSC,\n  ETH: ChainId.ETHEREUM,\n}\n\nexport const multiChainPaths = {\n  [ChainId.BSC]: '',\n  [ChainId.ETHEREUM]: '/eth',\n}\n\nexport const multiChainQueryClient = {\n  BSC: infoClient,\n  ETH: infoClientETH,\n}\n\nexport const multiChainQueryEndPoint = {\n  BSC: INFO_CLIENT,\n  ETH: INFO_CLIENT_ETH,\n}\n\nexport const multiChainScan = {\n  BSC: 'BscScan',\n  ETH: 'EtherScan',\n}\n\nexport const multiChainTokenBlackList = {\n  BSC: TOKEN_BLACKLIST,\n  ETH: ETH_TOKEN_BLACKLIST,\n}\n\nexport const getMultiChainQueryEndPointWithStableSwap = (chainName: MultiChainName) => {\n  const isStableSwap = checkIsStableSwap()\n  if (isStableSwap) return infoStableSwapClient\n  return multiChainQueryClient[chainName]\n}\n\nexport const checkIsStableSwap = () => window.location.href.includes('stableSwap')\n","import fromPairs from 'lodash/fromPairs'\nimport { ONE_DAY_UNIX } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MultiChainName, multiChainStartTime } from '../constant'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (\n  chainName: MultiChainName,\n  skip: number,\n  address: string,\n) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\ntype OverviewFetchFn = (chianName: MultiChainName, skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  chainName: MultiChainName,\n  getEntityDayDatas: OverviewFetchFn,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(chainName, skip)\n    skip += 1000\n    allFound = data?.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = fromPairs(\n    chartEntries.map((dayData) => {\n      // At this stage we track unix day ordinal for each data point to check for empty days later\n      const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n      return [dayOrdinal, dayData]\n    }),\n  )\n\n  console.warn(formattedDayDatas)\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? multiChainStartTime[chainName]\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n\nexport const fetchChartDataWithAddress = async (\n  chainName: MultiChainName,\n  getEntityDayDatas: PoolOrTokenFetchFn,\n  address: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(chainName, skip, address)\n    skip += 1000\n    allFound = data?.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = fromPairs(\n    chartEntries.map((dayData) => {\n      // At this stage we track unix day ordinal for each data point to check for empty days later\n      const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n      return [dayOrdinal, dayData]\n    }),\n  )\n  console.warn(formattedDayDatas)\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? multiChainStartTime[chainName]\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n","import { gql } from 'graphql-request'\nimport { ChartEntry } from 'state/info/types'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartDataWithAddress } from '../helpers'\nimport { getMultiChainQueryEndPointWithStableSwap, MultiChainName, multiChainStartTime } from '../../constant'\n\nconst getPoolChartData = async (\n  chainName: MultiChainName,\n  skip: number,\n  address: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await getMultiChainQueryEndPointWithStableSwap(chainName).request<PairDayDatasResponse>(\n      query,\n      {\n        startTime: multiChainStartTime[chainName],\n        skip,\n        address,\n      },\n    )\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (\n  chainName: MultiChainName,\n  address: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartDataWithAddress(chainName, getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { MultiChainName, getMultiChainQueryEndPointWithStableSwap } from '../../constant'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (\n  chainName: MultiChainName,\n  address: string,\n): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TransactionResults>(\n      POOL_TRANSACTIONS,\n      {\n        address,\n      },\n    )\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n","/* eslint-disable no-await-in-loop */\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { ChartEntry } from 'state/info/types'\nimport { fetchChartData, mapDayData } from '../helpers'\nimport { PancakeDayDatasResponse } from '../types'\nimport { MultiChainName, getMultiChainQueryEndPointWithStableSwap, multiChainStartTime } from '../../constant'\nimport { useGetChainName } from '../../hooks'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (\n  chainName: MultiChainName,\n  skip: number,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await getMultiChainQueryEndPointWithStableSwap(\n      chainName,\n    ).request<PancakeDayDatasResponse>(PANCAKE_DAY_DATAS, {\n      startTime: multiChainStartTime[chainName],\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n  const chainName = useGetChainName()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(chainName, getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error, chainName])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport const fetchGlobalChartData = async (chainName: MultiChainName) => {\n  const { data } = await fetchChartData(chainName, getOverviewChartData)\n  return data\n}\n\nexport default useFetchGlobalChartData\n","import { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { Block, ProtocolData } from 'state/info/types'\nimport { getChangeForPeriod } from 'utils/getChangeForPeriod'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { checkIsStableSwap, getMultiChainQueryEndPointWithStableSwap, MultiChainName } from '../../constant'\nimport { useGetChainName } from '../../hooks'\n\ninterface PancakeFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pancakeFactories: PancakeFactory[]\n  factories?: PancakeFactory[]\n}\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (\n  chainName: MultiChainName,\n  block?: number,\n): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  const factoryString = checkIsStableSwap() ? `factories` : `pancakeFactories`\n  try {\n    const query = gql`query overview {\n      ${factoryString}(\n        ${block ? `block: { number: ${block}}` : ``}\n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<OverviewResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n  const chainName = useGetChainName()\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [{ error, data }, { error: error24, data: data24 }, { error: error48, data: data48 }] = await Promise.all([\n        getOverviewData(chainName),\n        getOverviewData(chainName, block24?.number ?? undefined),\n        getOverviewData(chainName, block48?.number ?? undefined),\n      ])\n      const anyError = error || error24 || error48\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetchData()\n    }\n  }, [block24, block48, blockError, fetchState, chainName])\n\n  return fetchState\n}\n\nexport const fetchProtocolData = async (chainName: MultiChainName, block24: Block, block48: Block) => {\n  const [{ data }, { data: data24 }, { data: data48 }] = await Promise.all([\n    getOverviewData(chainName),\n    getOverviewData(chainName, block24?.number ?? undefined),\n    getOverviewData(chainName, block48?.number ?? undefined),\n  ])\n  if (data.factories && data.factories.length > 0) data.pancakeFactories = data.factories\n  if (data24.factories && data24.factories.length > 0) data24.pancakeFactories = data24.factories\n  if (data48.factories && data48.factories.length > 0) data48.pancakeFactories = data48.factories\n\n  // const anyError = error || error24 || error48\n  const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n  const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n  const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n  // const allDataAvailable = overviewData && overviewData24 && overviewData48\n\n  const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n    overviewData.totalVolumeUSD,\n    overviewData24.totalVolumeUSD,\n    overviewData48.totalVolumeUSD,\n  )\n  const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n  // 24H transactions\n  const [txCount, txCountChange] = getChangeForPeriod(\n    overviewData.totalTransactions,\n    overviewData24.totalTransactions,\n    overviewData48.totalTransactions,\n  )\n  const protocolData: ProtocolData = {\n    volumeUSD,\n    volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n    liquidityUSD: overviewData.totalLiquidityUSD,\n    liquidityUSDChange,\n    txCount,\n    txCountChange,\n  }\n  return protocolData\n}\n\nexport default useFetchProtocolData\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { getMultiChainQueryEndPointWithStableSwap, MultiChainName } from '../../constant'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (chainName: MultiChainName): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TransactionResults>(\n      GLOBAL_TRANSACTIONS,\n    )\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { gql } from 'graphql-request'\nimport { ChartEntry } from 'state/info/types'\nimport { fetchChartDataWithAddress, mapDayData } from '../helpers'\nimport { TokenDayDatasResponse } from '../types'\nimport { getMultiChainQueryEndPointWithStableSwap, MultiChainName, multiChainStartTime } from '../../constant'\n\nconst getTokenChartData = async (\n  chainName: MultiChainName,\n  skip: number,\n  address: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TokenDayDatasResponse>(\n      query,\n      {\n        startTime: multiChainStartTime[chainName],\n        skip,\n        address,\n      },\n    )\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (\n  chainName: MultiChainName,\n  address: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartDataWithAddress(chainName, getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n","import { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { MultiChainName, multiChainQueryMainToken, getMultiChainQueryEndPointWithStableSwap } from '../../constant'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = (chainName: MultiChainName) => {\n  const transactionGT = chainName === 'ETH' ? 1 : 100\n  return gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserve${multiChainQueryMainToken[chainName]}\n      orderDirection: desc\n      where: { totalTransactions_gt: ${transactionGT}, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserve${multiChainQueryMainToken[chainName]}\n      orderDirection: desc\n      where: { totalTransactions_gt: ${transactionGT}, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n}\n\nexport interface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  chainName: MultiChainName,\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<PoolsForTokenResponse>(\n      POOLS_FOR_TOKEN(chainName),\n      {\n        address,\n        blacklist: TOKEN_BLACKLIST,\n      },\n    )\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n","import { getUnixTime } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { getBlocksFromTimestamps } from 'utils/getBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { PriceChartEntry } from 'state/info/types'\nimport orderBy from 'lodash/orderBy'\nimport { MultiChainName, multiChainQueryMainToken, multiChainQueryEndPoint } from '../../constant'\n\nconst getPriceSubqueries = (chainName: MultiChainName, tokenAddress: string, blocks: any) =>\n  blocks.map(\n    (block: any) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derived${multiChainQueryMainToken[chainName]}\n      }\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ${multiChainQueryMainToken[chainName].toLowerCase()}Price\n      }\n    `,\n  )\n\n/**\n * Price data for token and bnb based on block number\n */\nconst priceQueryConstructor = (subqueries: string[]) => {\n  return gql`\n    query tokenPriceData {\n      ${subqueries}\n    }\n  `\n}\n\nconst fetchTokenPriceData = async (\n  chainName: MultiChainName,\n  address: string,\n  interval: number,\n  startTimestamp: number,\n): Promise<{\n  data?: PriceChartEntry[]\n  error: boolean\n}> => {\n  // Construct timestamps to query against\n  const endTimestamp = getUnixTime(new Date())\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500, chainName)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return {\n        error: false,\n      }\n    }\n\n    const prices: any | undefined = await multiQuery(\n      priceQueryConstructor,\n      getPriceSubqueries(chainName, address, blocks),\n      multiChainQueryEndPoint[chainName],\n      200,\n    )\n\n    console.warn('fetchTokenPriceData', { chainName, prices })\n\n    if (!prices) {\n      console.error('Price data failed to load')\n      return {\n        error: false,\n      }\n    }\n\n    // format token BNB price results\n    const tokenPrices: {\n      timestamp: string\n      derivedBNB: number\n      priceUSD: number\n    }[] = []\n\n    const mainToken = multiChainQueryMainToken[chainName]\n\n    // Get Token prices in BNB\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('t')[1]\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\n      if (timestamp) {\n        tokenPrices.push({\n          timestamp,\n          derivedBNB: prices[priceKey]?.[`derived${mainToken}`]\n            ? parseFloat(prices[priceKey][`derived${mainToken}`])\n            : 0,\n          priceUSD: 0,\n        })\n      }\n    })\n\n    console.warn('pricesPart1', tokenPrices)\n\n    // Go through BNB USD prices and calculate Token price based on it\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('b')[1]\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n      if (timestamp) {\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\n        if (tokenPriceIndex >= 0) {\n          const { derivedBNB } = tokenPrices[tokenPriceIndex]\n          tokenPrices[tokenPriceIndex].priceUSD =\n            parseFloat(prices[priceKey]?.[`${mainToken.toLowerCase()}Price`] ?? 0) * derivedBNB\n        }\n      }\n    })\n\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\n    const sortedTokenPrices = orderBy(tokenPrices, (tokenPrice) => parseInt(tokenPrice.timestamp, 10))\n\n    const formattedHistory = []\n\n    // for each timestamp, construct the open and close price\n    for (let i = 0; i < sortedTokenPrices.length - 1; i++) {\n      formattedHistory.push({\n        time: parseFloat(sortedTokenPrices[i].timestamp),\n        open: sortedTokenPrices[i].priceUSD,\n        close: sortedTokenPrices[i + 1].priceUSD,\n        high: sortedTokenPrices[i + 1].priceUSD,\n        low: sortedTokenPrices[i].priceUSD,\n      })\n    }\n\n    return { data: formattedHistory, error: false }\n  } catch (error) {\n    console.error(`Failed to fetch price data for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenPriceData\n","import { gql } from 'graphql-request'\nimport { useCallback, useState, useEffect } from 'react'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { useGetChainName } from '../../hooks'\nimport {\n  MultiChainName,\n  getMultiChainQueryEndPointWithStableSwap,\n  checkIsStableSwap,\n  multiChainTokenBlackList,\n} from '../../constant'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (chainName: MultiChainName, timestamp24hAgo: number): Promise<string[]> => {\n  const whereCondition =\n    chainName === 'ETH'\n      ? `where: { date_gt: ${timestamp24hAgo}, token_not_in: $blacklist, dailyVolumeUSD_gt:2000 }`\n      : checkIsStableSwap()\n      ? ''\n      : `where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: ${timestamp24hAgo}}`\n  const firstCount = 30\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!]) {\n        tokenDayDatas(\n          first: ${firstCount}\n          ${whereCondition}\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TopTokensResponse>(query, {\n      blacklist: multiChainTokenBlackList[chainName],\n    })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.warn('fetchTopTokens', { chainName, timestamp24hAgo })\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n  const chainName = useGetChainName()\n\n  const fetch = useCallback(async () => {\n    const addresses = await fetchTopTokens(chainName, timestamp24hAgo)\n    if (addresses.length > 0) setTopTokenAddresses(addresses)\n  }, [timestamp24hAgo, chainName])\n\n  useEffect(() => {\n    fetch()\n  }, [chainName, fetch])\n\n  return topTokenAddresses\n}\n\nexport const fetchTokenAddresses = async (chainName: MultiChainName) => {\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  const addresses = await fetchTopTokens(chainName, timestamp24hAgo)\n\n  return addresses\n}\n\nexport default useTopTokenAddresses\n","/* eslint-disable no-param-reassign */\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { TokenData, Block } from 'state/info/types'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { getChangeForPeriod } from 'utils/getChangeForPeriod'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getAmountChange, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { getMultiChainQueryEndPointWithStableSwap, MultiChainName, multiChainQueryMainToken } from '../../constant'\nimport { fetchTokenAddresses } from './topTokens'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedETH: string // Price in ETH per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<\n    TokenFields,\n    'derivedETH' | 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'\n  > {\n  derivedBNB: number\n  derivedETH: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (chainName: MultiChainName, block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derived${multiChainQueryMainToken[chainName]}\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  chainName: MultiChainName,\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const weeksQuery = chainName === 'BSC' ? `twoWeeksAgo: ${TOKEN_AT_BLOCK(chainName, block14d, tokenAddresses)}` : ''\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(chainName, null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(chainName, block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(chainName, block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(chainName, block7d, tokenAddresses)}\n        ${weeksQuery}\n      }\n    `\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TokenQueryResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity, derivedETH } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: derivedBNB ? 0 : parseFloat(derivedBNB),\n      derivedETH: derivedETH ? 0 : parseFloat(derivedETH),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (chainName: MultiChainName, tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        chainName,\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedUSD : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedUSD : 0\n          const priceUSDWeek = week ? week.derivedUSD : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, chainName])\n\n  return fetchState\n}\n\nexport const fetchAllTokenDataByAddresses = async (\n  chainName: MultiChainName,\n  blocks: Block[],\n  tokenAddresses: string[],\n) => {\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  const { data } = await fetchTokenData(\n    chainName,\n    block24h.number,\n    block48h.number,\n    block7d.number,\n    block14d.number,\n    tokenAddresses,\n  )\n\n  const parsed = parseTokenData(data?.now)\n  const parsed24 = parseTokenData(data?.oneDayAgo)\n  const parsed48 = parseTokenData(data?.twoDaysAgo)\n  const parsed7d = parseTokenData(data?.oneWeekAgo)\n  const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n  // Calculate data and format\n  const formatted = tokenAddresses.reduce((accum: { [address: string]: { data: TokenData } }, address) => {\n    const current: FormattedTokenFields | undefined = parsed[address]\n    const oneDay: FormattedTokenFields | undefined = parsed24[address]\n    const twoDays: FormattedTokenFields | undefined = parsed48[address]\n    const week: FormattedTokenFields | undefined = parsed7d[address]\n    const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n    const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n      current?.tradeVolumeUSD,\n      oneDay?.tradeVolumeUSD,\n      twoDays?.tradeVolumeUSD,\n    )\n    const [volumeUSDWeek] = getChangeForPeriod(current?.tradeVolumeUSD, week?.tradeVolumeUSD, twoWeeks?.tradeVolumeUSD)\n    const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n    const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n    const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n    const liquidityToken = current ? current.totalLiquidity : 0\n    // Prices of tokens for now, 24h ago and 7d ago\n    const priceUSD = current ? current.derivedUSD : 0\n    const priceUSDOneDay = oneDay ? oneDay.derivedUSD : 0\n    const priceUSDWeek = week ? week.derivedUSD : 0\n    const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n    const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n    const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n    accum[address] = {\n      data: {\n        exists: !!current,\n        address,\n        name: current ? current.name : '',\n        symbol: current ? current.symbol : '',\n        volumeUSD,\n        volumeUSDChange,\n        volumeUSDWeek,\n        txCount,\n        liquidityUSD,\n        liquidityUSDChange,\n        liquidityToken,\n        priceUSD,\n        priceUSDChange,\n        priceUSDChangeWeek,\n      },\n    }\n\n    return accum\n  }, {})\n\n  return formatted\n}\n\nexport const fetchAllTokenData = async (chainName: MultiChainName, blocks: Block[]) => {\n  const tokenAddresses = await fetchTokenAddresses(chainName)\n  const data = await fetchAllTokenDataByAddresses(chainName, blocks, tokenAddresses)\n  return data\n}\n\nexport default useFetchedTokenDatas\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { MultiChainName, getMultiChainQueryEndPointWithStableSwap, checkIsStableSwap } from '../../constant'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = () => {\n  const isStableSwap = checkIsStableSwap()\n  const whereToken0 = isStableSwap ? 'pair_: {token0: $address}' : 'token0: $address'\n  const whereToken1 = isStableSwap ? 'pair_: {token1: $address}' : 'token1: $address'\n  return gql`\n    query tokenTransactions($address: Bytes!) {\n      mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken0} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        to\n        amount0\n        amount1\n        amountUSD\n      }\n      mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken1} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        to\n        amount0\n        amount1\n        amountUSD\n      }\n      swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken0} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        from\n        amount0In\n        amount1In\n        amount0Out\n        amount1Out\n        amountUSD\n      }\n      swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken1} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        from\n        amount0In\n        amount1In\n        amount0Out\n        amount1Out\n        amountUSD\n      }\n      burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken0} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        sender\n        amount0\n        amount1\n        amountUSD\n      }\n      burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { ${whereToken1} }) {\n        id\n        timestamp\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        sender\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  `\n}\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (\n  chainName: MultiChainName,\n  address: string,\n): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TransactionResults>(\n      TOKEN_TRANSACTIONS(),\n      {\n        address,\n      },\n    )\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n","import { Duration, getUnixTime, startOfHour, sub } from 'date-fns'\nimport { useRouter } from 'next/router'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\nimport { fetchAllPoolData, fetchAllPoolDataWithAddress } from 'state/info/queries/pools/poolData'\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\nimport { fetchGlobalChartData } from 'state/info/queries/protocol/chart'\nimport { fetchProtocolData } from 'state/info/queries/protocol/overview'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\nimport { fetchAllTokenData, fetchAllTokenDataByAddresses } from 'state/info/queries/tokens/tokenData'\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\nimport { Transaction } from 'state/info/types'\nimport useSWRImmutable from 'swr/immutable'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { useBlockFromTimeStampSWR } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { MultiChainName, checkIsStableSwap } from './constant'\nimport { ChartEntry, PoolData, PriceChartEntry, ProtocolData, TokenData } from './types'\n// Protocol hooks\n\nconst refreshIntervalForInfo = 15000 // 15s\nconst SWR_SETTINGS = { refreshInterval: refreshIntervalForInfo }\n\nexport const useProtocolDataSWR = (): ProtocolData | undefined => {\n  const chainName = useGetChainName()\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks } = useBlockFromTimeStampSWR([t24, t48])\n  const [block24, block48] = blocks ?? []\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data: protocolData } = useSWRImmutable(\n    chainName && block24 && block48 ? [`info/protocol/updateProtocolData/${type}`, chainName] : null,\n    () => fetchProtocolData(chainName, block24, block48),\n  )\n\n  return protocolData ?? undefined\n}\n\nexport const useProtocolChartDataSWR = (): ChartEntry[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data: chartData } = useSWRImmutable([`info/protocol/updateProtocolChartData/${type}`, chainName], () =>\n    fetchGlobalChartData(chainName),\n  )\n  return chartData ?? undefined\n}\n\nexport const useProtocolTransactionsSWR = (): Transaction[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data: transactions } = useSWRImmutable(\n    [`info/protocol/updateProtocolTransactionsData/${type}`, chainName],\n    () => fetchTopTransactions(chainName),\n    SWR_SETTINGS, // update latest Transactions per 15s\n  )\n  return transactions ?? undefined\n}\n\nexport const useAllPoolDataSWR = () => {\n  const chainName = useGetChainName()\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks } = useBlockFromTimeStampSWR([t24h, t48h, t7d, t14d])\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(blocks && chainName && [`info/pools/data/${type}`, chainName], () =>\n    fetchAllPoolData(blocks, chainName),\n  )\n  return data ?? {}\n}\n\nexport const usePoolDatasSWR = (poolAddresses: string[]): PoolData[] => {\n  const name = poolAddresses.join('')\n  const chainName = useGetChainName()\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks } = useBlockFromTimeStampSWR([t24h, t48h, t7d, t14d])\n\n  const { data } = useSWRImmutable(\n    blocks && chainName && [`info/pool/data/${name}`, chainName],\n    () => fetchAllPoolDataWithAddress(blocks, chainName, poolAddresses),\n    SWR_SETTINGS,\n  )\n\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      return data?.[address]?.data\n    })\n    .filter((pool) => pool)\n\n  return poolsWithData\n}\n\nexport const usePoolChartDataSWR = (address: string): ChartEntry[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable([`info/pool/chartData/${address}/${type}`, chainName], () =>\n    fetchPoolChartData(chainName, address),\n  )\n  return data?.data ?? undefined\n}\n\nexport const usePoolTransactionsSWR = (address: string): Transaction[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(\n    [`info/pool/transactionsData/${address}/${type}`, chainName],\n    () => fetchPoolTransactions(chainName, address),\n    SWR_SETTINGS,\n  )\n  return data?.data ?? undefined\n}\n\n// Tokens hooks\n\nexport const useAllTokenDataSWR = (): {\n  [address: string]: { data?: TokenData }\n} => {\n  const chainName = useGetChainName()\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks } = useBlockFromTimeStampSWR([t24h, t48h, t7d, t14d])\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(blocks && chainName && [`info/token/data/${type}`, chainName], () =>\n    fetchAllTokenData(chainName, blocks),\n  )\n  return data ?? {}\n}\n\nexport const useTokenDatasSWR = (addresses?: string[]): TokenData[] | undefined => {\n  const name = addresses.join('')\n  const chainName = useGetChainName()\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks } = useBlockFromTimeStampSWR([t24h, t48h, t7d, t14d])\n\n  const { data } = useSWRImmutable(\n    blocks && chainName && [`info/token/data/${name}`, chainName],\n    () => fetchAllTokenDataByAddresses(chainName, blocks, addresses),\n    SWR_SETTINGS,\n  )\n\n  const tokensWithData = useMemo(() => {\n    if (!addresses) {\n      return undefined\n    }\n    return addresses\n      .map((a) => {\n        return data?.[a]?.data\n      })\n      .filter((d) => d && d.exists)\n  }, [addresses, data])\n\n  return tokensWithData ?? undefined\n}\n\nexport const useTokenDataSWR = (address: string | undefined): TokenData | undefined => {\n  const allTokenData = useTokenDatasSWR([address])\n  return allTokenData.find((d) => d.address === address) ?? undefined\n}\n\nexport const usePoolsForTokenSWR = (address: string): string[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable([`info/token/poolAddress/${address}/${type}`, chainName], () =>\n    fetchPoolsForToken(chainName, address),\n  )\n\n  return data?.addresses ?? undefined\n}\n\nexport const useTokenChartDataSWR = (address: string): ChartEntry[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(\n    address && chainName && [`info/token/chartData/${address}/${type}`, chainName],\n    () => fetchTokenChartData(chainName, address),\n    SWR_SETTINGS,\n  )\n\n  return data?.data ?? undefined\n}\n\nexport const useTokenPriceDataSWR = (\n  address: string,\n  interval: number,\n  timeWindow: Duration,\n): PriceChartEntry[] | undefined => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(\n    [`info/token/priceData/${address}/${type}`, chainName],\n    () => fetchTokenPriceData(chainName, address, interval, startTimestamp),\n    SWR_SETTINGS,\n  )\n  return data?.data ?? undefined\n}\n\nexport const useTokenTransactionsSWR = (address: string): Transaction[] | undefined => {\n  const chainName = useGetChainName()\n  const type = checkIsStableSwap() ? 'stableSwap' : 'swap'\n  const { data } = useSWRImmutable(\n    [`info/token/transactionsData/${address}/${type}`, chainName],\n    () => fetchTokenTransactions(chainName, address),\n    SWR_SETTINGS,\n  )\n  return data?.data ?? undefined\n}\n\nexport const useGetChainName = () => {\n  const path = window.location.href\n\n  const getChain = useCallback(() => {\n    if (path.includes('eth') || path.includes('chainId=1')) return 'ETH'\n    return 'BSC'\n  }, [path])\n  const [name, setName] = useState<MultiChainName | null>(getChain())\n  const result = useMemo(() => name, [name])\n\n  useEffect(() => {\n    setName(getChain())\n  }, [getChain])\n\n  return result\n}\n\nexport const useMultiChainPath = () => {\n  const router = useRouter()\n  const { chainName } = router.query\n  return chainName ? `/${chainName}` : ''\n}\n\nexport const useStableSwapPath = () => {\n  return checkIsStableSwap() ? '?type=stableSwap' : ''\n}\n","import { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport {\n  checkIsStableSwap,\n  getMultiChainQueryEndPointWithStableSwap,\n  MultiChainName,\n  multiChainTokenBlackList,\n} from '../../constant'\nimport { useGetChainName } from '../../hooks'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (chainName: MultiChainName, timestamp24hAgo: number): Promise<string[]> => {\n  const isStableSwap = checkIsStableSwap()\n  let whereCondition =\n    chainName === 'BSC'\n      ? `where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: ${timestamp24hAgo} }`\n      : `where: { date_gt: ${timestamp24hAgo}, token0_not_in: $blacklist, token1_not_in: $blacklist, dailyVolumeUSD_gt: 2000 }`\n  if (isStableSwap) whereCondition = ''\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!]) {\n        pairDayDatas(\n          first: 30\n          ${whereCondition}\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<TopPoolsResponse>(query, {\n      blacklist: multiChainTokenBlackList[chainName],\n    })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n  const chainName = useGetChainName()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(chainName, timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo, chainName])\n\n  return topPoolAddresses\n}\n\nexport const fetchTopPoolAddresses = async (chainName: MultiChainName) => {\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  const addresses = await fetchTopPools(chainName, timestamp24hAgo)\n  return addresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { PoolData, Block } from 'state/info/types'\nimport { getChangeForPeriod } from 'utils/getChangeForPeriod'\nimport { getLpFeesAndApr } from 'utils/getLpFeesAndApr'\nimport { getDeltaTimestamps } from 'utils/getDeltaTimestamps'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { useGetChainName } from '../../hooks'\nimport { MultiChainName, multiChainQueryMainToken, getMultiChainQueryEndPointWithStableSwap } from '../../constant'\nimport { fetchTopPoolAddresses } from './topPools'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\nexport interface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (chainName: MultiChainName, block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserve${multiChainQueryMainToken[chainName]}\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nexport const fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n  chainName: 'ETH' | 'BSC' = 'BSC',\n) => {\n  const weeksQuery = chainName === 'BSC' ? `twoWeeksAgo: ${POOL_AT_BLOCK(chainName, block14d, poolAddresses)}` : ''\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(chainName, null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(chainName, block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(chainName, block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(chainName, block7d, poolAddresses)}\n        ${weeksQuery}\n      }\n    `\n\n    const data = await getMultiChainQueryEndPointWithStableSwap(chainName).request<PoolsQueryResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nexport const parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const chainName = useGetChainName()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n        chainName,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError, chainName])\n\n  return fetchState\n}\n\nexport const fetchAllPoolDataWithAddress = async (\n  blocks: Block[],\n  chainName: MultiChainName,\n  poolAddresses: string[],\n) => {\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  const { data } = await fetchPoolData(\n    block24h.number,\n    block48h.number,\n    block7d.number,\n    block14d.number,\n    poolAddresses,\n    chainName,\n  )\n\n  const formattedPoolData = parsePoolData(data?.now)\n  const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n  const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n  const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n  const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n  // Calculate data and format\n  const formatted = poolAddresses.reduce((accum: { [address: string]: { data: PoolData } }, address) => {\n    // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n    const current: FormattedPoolFields | undefined = formattedPoolData[address]\n    const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n    const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n    const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n    const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n    const [volumeUSD, volumeUSDChange] = getChangeForPeriod(current?.volumeUSD, oneDay?.volumeUSD, twoDays?.volumeUSD)\n    const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n      current?.volumeUSD,\n      week?.volumeUSD,\n      twoWeeks?.volumeUSD,\n    )\n\n    const liquidityUSD = current ? current.reserveUSD : 0\n\n    const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n    const liquidityToken0 = current ? current.reserve0 : 0\n    const liquidityToken1 = current ? current.reserve1 : 0\n\n    const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n      volumeUSD,\n      volumeUSDWeek,\n      liquidityUSD,\n    )\n\n    if (current) {\n      accum[address] = {\n        data: {\n          address,\n          token0: {\n            address: current.token0.id,\n            name: current.token0.name,\n            symbol: current.token0.symbol,\n          },\n          token1: {\n            address: current.token1.id,\n            name: current.token1.name,\n            symbol: current.token1.symbol,\n          },\n          token0Price: current.token0Price,\n          token1Price: current.token1Price,\n          volumeUSD,\n          volumeUSDChange,\n          volumeUSDWeek,\n          volumeUSDChangeWeek,\n          totalFees24h,\n          totalFees7d,\n          lpFees24h,\n          lpFees7d,\n          lpApr7d,\n          liquidityUSD,\n          liquidityUSDChange,\n          liquidityToken0,\n          liquidityToken1,\n        },\n      }\n    }\n\n    return accum\n  }, {})\n  return formatted\n}\n\nexport const fetchAllPoolData = async (blocks: Block[], chainName: MultiChainName) => {\n  const poolAddresses = await fetchTopPoolAddresses(chainName)\n  return fetchAllPoolDataWithAddress(blocks, chainName, poolAddresses)\n}\n\nexport default usePoolDatas\n","export interface Block {\n  number: number\n  timestamp: string\n}\n\nexport interface ChartEntry {\n  date: number\n  volumeUSD: number\n  liquidityUSD: number\n}\n\n/**\n * Formatted type for Candlestick charts\n */\nexport interface PriceChartEntry {\n  time: number\n  open: number\n  close: number\n  high: number\n  low: number\n}\n\nexport enum TransactionType {\n  SWAP,\n  MINT,\n  BURN,\n}\n\nexport type Transaction = {\n  type: TransactionType\n  hash: string\n  timestamp: string\n  sender: string\n  token0Symbol: string\n  token1Symbol: string\n  token0Address: string\n  token1Address: string\n  amountUSD: number\n  amountToken0: number\n  amountToken1: number\n}\n\nexport interface ProtocolData {\n  volumeUSD: number\n  volumeUSDChange: number // in 24h, as percentage\n\n  liquidityUSD: number\n  liquidityUSDChange: number // in 24h, as percentage\n\n  txCount: number\n  txCountChange: number\n}\n\nexport interface ProtocolState {\n  readonly overview?: ProtocolData\n\n  readonly chartData?: ChartEntry[]\n\n  readonly transactions?: Transaction[]\n}\n\n// POOLS\n\nexport interface PoolData {\n  address: string\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  volumeUSDChangeWeek: number\n\n  totalFees24h: number\n  totalFees7d: number\n  lpFees24h: number\n  lpFees7d: number\n  lpApr7d: number\n\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  token0Price: number\n  token1Price: number\n\n  liquidityToken0: number\n  liquidityToken1: number\n}\n\nexport interface PoolsState {\n  byAddress: {\n    [address: string]: {\n      data?: PoolData\n      chartData?: ChartEntry[]\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// TOKENS\n\nexport type TokenData = {\n  exists: boolean\n\n  name: string\n  symbol: string\n  address: string\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  txCount: number\n\n  liquidityToken: number\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  priceUSD: number\n  priceUSDChange: number\n  priceUSDChangeWeek: number\n}\n\nexport interface TokensState {\n  byAddress: {\n    [address: string]: {\n      data?: TokenData\n      poolAddresses?: string[]\n      chartData?: ChartEntry[]\n      priceData: {\n        oldestFetchedTimestamp?: number\n        [secondsInterval: number]: PriceChartEntry[] | undefined\n      }\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// Info redux state\nexport interface InfoState {\n  protocol: ProtocolState\n  pools: PoolsState\n  tokens: TokensState\n}\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const {\n    notation = amount >= 10000 ? 'compact' : 'standard',\n    displayThreshold,\n    tokenPrecision,\n    isInteger,\n  } = options || { notation: amount >= 10000 ? 'compact' : 'standard' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { gql } from 'graphql-request'\nimport orderBy from 'lodash/orderBy'\nimport { multiChainBlocksClient, MultiChainName } from 'state/info/constant'\nimport { Block } from '../state/info/types'\nimport { multiQuery } from '../views/Info/utils/infoQueryHelpers'\n\nconst getBlockSubqueries = (timestamps: number[]) =>\n  timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n      number\n    }`\n  })\n\nconst blocksQueryConstructor = (subqueries: string[]) => {\n  return gql`query blocks {\n    ${subqueries}\n  }`\n}\n\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @param {Array} timestamps\n */\nexport const getBlocksFromTimestamps = async (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' | undefined = 'desc',\n  skipCount: number | undefined = 500,\n  chainName: MultiChainName | undefined = 'BSC',\n): Promise<Block[]> => {\n  if (timestamps?.length === 0) {\n    return []\n  }\n\n  const fetchedData: any = await multiQuery(\n    blocksQueryConstructor,\n    getBlockSubqueries(timestamps),\n    multiChainBlocksClient[chainName],\n    skipCount,\n  )\n\n  const blocks: Block[] = []\n  if (fetchedData) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(fetchedData)) {\n      if (fetchedData[key].length > 0) {\n        blocks.push({\n          timestamp: key.split('t')[1],\n          number: parseInt(fetchedData[key][0].number, 10),\n        })\n      }\n    }\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\n    return orderBy(blocks, (block) => block.number, sortDirection)\n  }\n  return blocks\n}\n","import { getAmountChange, getPercentChange } from '../views/Info/utils/infoDataHelpers'\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n","import { getUnixTime, startOfMinute, subDays, subWeeks } from 'date-fns'\n\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */\nexport const getDeltaTimestamps = (): [number, number, number, number] => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)))\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)))\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)))\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)))\n  return [t24h, t48h, t7d, t14d]\n}\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from '../config/constants/info'\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { ChainId, Token } from '@pancakeswap/sdk'\n\nconst mapping = {\n  [ChainId.BSC]: 'smartchain',\n  [ChainId.ETHEREUM]: 'ethereum',\n}\n\nconst getTokenLogoURL = (token?: Token) => {\n  if (token && mapping[token.chainId]) {\n    return `https://assets-cdn.trustwallet.com/blockchains/${mapping[token.chainId]}/assets/${token.address}/logo.png`\n  }\n  return null\n}\n\nexport default getTokenLogoURL\n","import { BIT_QUERY, INFO_CLIENT, STABLESWAP_SUBGRAPH_CLIENT, INFO_CLIENT_ETH } from 'config/constants/endpoints'\nimport { GraphQLClient } from 'graphql-request'\nimport { INFO_CLIENT_WITH_CHAIN } from '../config/constants/endpoints'\n\n// Extra headers\n// Mostly for dev environment\n// No production env check since production preview might also need them\nexport const getGQLHeaders = (endpoint: string) => {\n  if (endpoint === INFO_CLIENT) {\n    return {\n      'X-Sf':\n        process.env.NEXT_PUBLIC_SF_HEADER ||\n        // hack for inject CI secret on window\n        (typeof window !== 'undefined' &&\n          // @ts-ignore\n          window.sfHeader),\n    }\n  }\n  return undefined\n}\n\nexport const infoClient = new GraphQLClient(INFO_CLIENT, { headers: getGQLHeaders(INFO_CLIENT) })\n\nexport const infoClientWithChain = (chainId: number) => {\n  return new GraphQLClient(INFO_CLIENT_WITH_CHAIN[chainId], { headers: getGQLHeaders(INFO_CLIENT_WITH_CHAIN[chainId]) })\n}\n\nexport const infoClientETH = new GraphQLClient(INFO_CLIENT_ETH)\n\nexport const infoStableSwapClient = new GraphQLClient(STABLESWAP_SUBGRAPH_CLIENT)\n\nexport const infoServerClient = new GraphQLClient(INFO_CLIENT, {\n  headers: {\n    'X-Sf': process.env.SF_HEADER,\n  },\n  timeout: 5000,\n})\n\nexport const stableSwapClient = new GraphQLClient(STABLESWAP_SUBGRAPH_CLIENT, {\n  headers: getGQLHeaders(STABLESWAP_SUBGRAPH_CLIENT),\n})\n\nexport const bitQueryServerClient = new GraphQLClient(BIT_QUERY, {\n  headers: {\n    // only server, no `NEXT_PUBLIC` not going to expose in client\n    'X-API-KEY': process.env.BIT_QUERY_HEADER,\n  },\n  timeout: 5000,\n})\n","import { GraphQLClient } from 'graphql-request'\n\nconst requestWithTimeout = <T>(\n  graphQLClient: GraphQLClient,\n  request: string,\n  variables?: any,\n  timeout = 30000,\n): Promise<T> => {\n  return Promise.race([\n    variables ? graphQLClient.request<T>(request, variables) : graphQLClient.request<T>(request),\n    new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`Request timed out after ${timeout} milliseconds`))\n      }, timeout)\n    }),\n  ]) as Promise<T>\n}\n\nexport default requestWithTimeout\n","import { useEffect, useState } from 'react'\nimport { useGetChainName } from 'state/info/hooks'\nimport { Block } from 'state/info/types'\nimport useSWRImmutable from 'swr/immutable'\nimport { getBlocksFromTimestamps } from 'utils/getBlocksFromTimestamps'\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n * @param sortDirection\n * @param skipCount\n */\nexport const useBlocksFromTimestamps = (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' = 'desc',\n  skipCount = 1000,\n): {\n  blocks?: Block[]\n  error: boolean\n} => {\n  const [blocks, setBlocks] = useState<Block[]>()\n  const [error, setError] = useState(false)\n\n  const timestampsString = JSON.stringify(timestamps)\n  const blocksString = blocks ? JSON.stringify(blocks) : undefined\n  const chainName = useGetChainName()\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const timestampsArray = JSON.parse(timestampsString)\n      const result = await getBlocksFromTimestamps(timestampsArray, sortDirection, skipCount, chainName)\n      if (result.length === 0) {\n        setError(true)\n      } else {\n        setBlocks(result)\n      }\n    }\n    const blocksArray = blocksString ? JSON.parse(blocksString) : undefined\n    if (!blocksArray && !error && chainName) {\n      fetchData()\n    }\n  }, [blocksString, error, skipCount, sortDirection, timestampsString, chainName])\n\n  return {\n    blocks,\n    error,\n  }\n}\n\nexport const useBlockFromTimeStampSWR = (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' | undefined = 'desc',\n  skipCount: number | undefined = 1000,\n) => {\n  const chainName = useGetChainName()\n  const timestampsString = JSON.stringify(timestamps)\n  const timestampsArray = JSON.parse(timestampsString)\n  const { data } = useSWRImmutable([`info/blocks/${timestampsString}`, chainName], () =>\n    getBlocksFromTimestamps(timestampsArray, sortDirection, skipCount, chainName),\n  )\n  return { blocks: data }\n}\n","/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n","import { GraphQLClient } from 'graphql-request'\nimport { getGQLHeaders } from 'utils/graphql'\nimport requestWithTimeout from 'utils/requestWithTimeout'\n\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */\nexport const multiQuery = async (\n  queryConstructor: (subqueries: string[]) => string,\n  subqueries: string[],\n  endpoint: string,\n  skipCount = 1000,\n) => {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n  const client = new GraphQLClient(endpoint, { headers: getGQLHeaders(endpoint) })\n  try {\n    while (!allFound) {\n      let end = subqueries.length\n      if (skip + skipCount < subqueries.length) {\n        end = skip + skipCount\n      }\n      const subqueriesSlice = subqueries.slice(skip, end)\n      // eslint-disable-next-line no-await-in-loop\n      const result: any = await requestWithTimeout(client, queryConstructor(subqueriesSlice))\n      fetchedData = {\n        ...fetchedData,\n        ...result,\n      }\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length\n      skip += skipCount\n    }\n    return fetchedData\n  } catch (error) {\n    console.error('Failed to fetch info data', error)\n    return null\n  }\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[6401],{\n\n/***/ 43437:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BY\": function() { return /* binding */ LP_HOLDERS_FEE; },\n/* harmony export */   \"Bq\": function() { return /* binding */ ONE_DAY_UNIX; },\n/* harmony export */   \"DY\": function() { return /* binding */ PCS_ETH_START; },\n/* harmony export */   \"MV\": function() { return /* binding */ WEEKS_IN_YEAR; },\n/* harmony export */   \"OZ\": function() { return /* binding */ MINIMUM_SEARCH_CHARACTERS; },\n/* harmony export */   \"Rr\": function() { return /* binding */ PCS_V2_START; },\n/* harmony export */   \"Tb\": function() { return /* binding */ ONE_HOUR_SECONDS; },\n/* harmony export */   \"Vd\": function() { return /* binding */ ETH_TOKEN_BLACKLIST; },\n/* harmony export */   \"hT\": function() { return /* binding */ TREASURY_FEE; },\n/* harmony export */   \"om\": function() { return /* binding */ TOTAL_FEE; },\n/* harmony export */   \"si\": function() { return /* binding */ ITEMS_PER_INFO_TABLE_PAGE; },\n/* harmony export */   \"tE\": function() { return /* binding */ TOKEN_BLACKLIST; },\n/* harmony export */   \"xy\": function() { return /* binding */ BUYBACK_FEE; }\n/* harmony export */ });\nvar MINIMUM_SEARCH_CHARACTERS = 2;\nvar WEEKS_IN_YEAR = 52.1429;\nvar TOTAL_FEE = 0.0025;\nvar LP_HOLDERS_FEE = 0.0017;\nvar TREASURY_FEE = 0.000225;\nvar BUYBACK_FEE = 0.000575;\nvar PCS_V2_START = 1619136000 // April 23, 2021, 12:00:00 AM\n;\nvar PCS_ETH_START = 1664130827 // Sep 23, 2022, 02:33:47 AM\n;\nvar ONE_DAY_UNIX = 86400 // 24h * 60m * 60s\n;\nvar ONE_HOUR_SECONDS = 3600;\nvar ITEMS_PER_INFO_TABLE_PAGE = 10;\n// These tokens are either incorrectly priced or have some other issues that spoil the query data\n// None of them present any interest as they have almost 0 daily trade volume\nvar TOKEN_BLACKLIST = [\n    // These ones are copied from v1 info\n    \"0x495c7f3a713870f68f8b418b355c085dfdc412c3\",\n    \"0xc3761eb917cd790b30dad99f6cc5b4ff93c4f9ea\",\n    \"0xe31debd7abff90b06bca21010dd860d8701fd901\",\n    \"0xfc989fbb6b3024de5ca0144dc23c18a063942ac1\",\n    \"0xe40fc6ff5f2895b44268fd2e1a421e07f567e007\",\n    \"0xfd158609228b43aa380140b46fff3cdf9ad315de\",\n    \"0xc00af6212fcf0e6fd3143e692ccd4191dc308bea\",\n    \"0x205969b3ad459f7eba0dee07231a6357183d3fb6\",\n    \"0x0bd67d358636fd7b0597724aa4f20beedbf3073a\",\n    \"0xedf5d2a561e8a3cb5a846fbce24d2ccd88f50075\",\n    \"0x702b0789a3d4dade1688a0c8b7d944e5ba80fc30\",\n    \"0x041929a760d7049edaef0db246fa76ec975e90cc\",\n    \"0xba098df8c6409669f5e6ec971ac02cd5982ac108\",\n    \"0x1bbed115afe9e8d6e9255f18ef10d43ce6608d94\",\n    \"0xe99512305bf42745fae78003428dcaf662afb35d\",\n    \"0xbE609EAcbFca10F6E5504D39E3B113F808389056\",\n    \"0x847daf9dfdc22d5c61c4a857ec8733ef5950e82e\",\n    \"0xdbf8913dfe14536c0dae5dd06805afb2731f7e7b\",\n    // These ones are newly found\n    \"0xF1D50dB2C40b63D2c598e2A808d1871a40b1E653\",\n    \"0x4269e4090ff9dfc99d8846eb0d42e67f01c3ac8b\", \n];\nvar ETH_TOKEN_BLACKLIST = [\n    \"0x72b169ad8af6c4fb53056b6a2a85602ad6863864\"\n];\n\n\n/***/ }),\n\n/***/ 79467:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dw\": function() { return /* binding */ multiChainPaths; },\n/* harmony export */   \"Ho\": function() { return /* binding */ multiChainQueryEndPoint; },\n/* harmony export */   \"J5\": function() { return /* binding */ checkIsStableSwap; },\n/* harmony export */   \"OO\": function() { return /* binding */ multiChainBlocksClient; },\n/* harmony export */   \"Pi\": function() { return /* binding */ multiChainId; },\n/* harmony export */   \"WR\": function() { return /* binding */ multiChainQueryMainToken; },\n/* harmony export */   \"YM\": function() { return /* binding */ multiChainStartTime; },\n/* harmony export */   \"nA\": function() { return /* binding */ multiChainScan; },\n/* harmony export */   \"rf\": function() { return /* binding */ getMultiChainQueryEndPointWithStableSwap; },\n/* harmony export */   \"z2\": function() { return /* binding */ multiChainTokenBlackList; }\n/* harmony export */ });\n/* unused harmony export multiChainQueryClient */\n/* harmony import */ var _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47842);\n/* harmony import */ var utils_graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25997);\n/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10494);\n/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90902);\n/* harmony import */ var config_constants_info__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43437);\n\n\n\n\n\nvar multiChainQueryMainToken = {\n    BSC: \"BNB\",\n    ETH: \"ETH\"\n};\nvar multiChainBlocksClient = {\n    BSC: config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .BLOCKS_CLIENT */ .I0,\n    ETH: config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .BLOCKS_CLIENT_ETH */ .Hs\n};\nvar multiChainStartTime = {\n    BSC: config_constants_info__WEBPACK_IMPORTED_MODULE_3__/* .PCS_V2_START */ .Rr,\n    ETH: config_constants_info__WEBPACK_IMPORTED_MODULE_3__/* .PCS_ETH_START */ .DY\n};\nvar multiChainId = {\n    BSC: _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__/* .ChainId.BSC */ .a_.BSC,\n    ETH: _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__/* .ChainId.ETHEREUM */ .a_.ETHEREUM\n};\nvar _obj;\nvar multiChainPaths = (_obj = {}, (0,_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_obj, _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__/* .ChainId.BSC */ .a_.BSC, \"\"), (0,_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_obj, _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__/* .ChainId.ETHEREUM */ .a_.ETHEREUM, \"/eth\"), _obj);\nvar multiChainQueryClient = {\n    BSC: utils_graphql__WEBPACK_IMPORTED_MODULE_0__/* .infoClient */ .dQ,\n    ETH: utils_graphql__WEBPACK_IMPORTED_MODULE_0__/* .infoClientETH */ .GJ\n};\nvar multiChainQueryEndPoint = {\n    BSC: config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .INFO_CLIENT */ .JY,\n    ETH: config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__/* .INFO_CLIENT_ETH */ .EC\n};\nvar multiChainScan = {\n    BSC: \"BscScan\",\n    ETH: \"EtherScan\"\n};\nvar multiChainTokenBlackList = {\n    BSC: config_constants_info__WEBPACK_IMPORTED_MODULE_3__/* .TOKEN_BLACKLIST */ .tE,\n    ETH: config_constants_info__WEBPACK_IMPORTED_MODULE_3__/* .ETH_TOKEN_BLACKLIST */ .Vd\n};\nvar getMultiChainQueryEndPointWithStableSwap = function(chainName) {\n    var isStableSwap = checkIsStableSwap();\n    if (isStableSwap) return utils_graphql__WEBPACK_IMPORTED_MODULE_0__/* .infoStableSwapClient */ .MS;\n    return multiChainQueryClient[chainName];\n};\nvar checkIsStableSwap = function() {\n    return window.location.href.includes(\"stableSwap\");\n};\n\n\n/***/ }),\n\n/***/ 84434:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"ft\": function() { return /* binding */ useAllPoolDataSWR; },\n  \"jF\": function() { return /* binding */ useAllTokenDataSWR; },\n  \"qg\": function() { return /* binding */ hooks_useGetChainName; },\n  \"hb\": function() { return /* binding */ useMultiChainPath; },\n  \"zo\": function() { return /* binding */ usePoolChartDataSWR; },\n  \"gw\": function() { return /* binding */ usePoolDatasSWR; },\n  \"A$\": function() { return /* binding */ usePoolTransactionsSWR; },\n  \"P6\": function() { return /* binding */ usePoolsForTokenSWR; },\n  \"Xx\": function() { return /* binding */ useProtocolChartDataSWR; },\n  \"hw\": function() { return /* binding */ useProtocolDataSWR; },\n  \"H8\": function() { return /* binding */ useProtocolTransactionsSWR; },\n  \"U1\": function() { return /* binding */ useStableSwapPath; },\n  \"Jj\": function() { return /* binding */ useTokenChartDataSWR; },\n  \"b6\": function() { return /* binding */ useTokenDataSWR; },\n  \"ZF\": function() { return /* binding */ useTokenDatasSWR; },\n  \"QB\": function() { return /* binding */ useTokenPriceDataSWR; },\n  \"nT\": function() { return /* binding */ useTokenTransactionsSWR; }\n});\n\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_sliced_to_array.mjs\nvar src_sliced_to_array = __webpack_require__(87394);\n// EXTERNAL MODULE: ./node_modules/date-fns/esm/getUnixTime/index.js + 1 modules\nvar getUnixTime = __webpack_require__(28401);\n// EXTERNAL MODULE: ./node_modules/date-fns/esm/startOfHour/index.js\nvar startOfHour = __webpack_require__(12383);\n// EXTERNAL MODULE: ./node_modules/date-fns/esm/sub/index.js + 1 modules\nvar sub = __webpack_require__(20005);\n// EXTERNAL MODULE: ../../node_modules/next/router.js\nvar next_router = __webpack_require__(5632);\n// EXTERNAL MODULE: ../../node_modules/react/index.js\nvar react = __webpack_require__(2784);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_async_to_generator.mjs\nvar src_async_to_generator = __webpack_require__(98788);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_tagged_template_literal.mjs\nvar _tagged_template_literal = __webpack_require__(92228);\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n// EXTERNAL MODULE: ../../node_modules/graphql-request/dist/index.js\nvar dist = __webpack_require__(6647);\n// EXTERNAL MODULE: ../../node_modules/lodash/fromPairs.js\nvar fromPairs = __webpack_require__(10017);\nvar fromPairs_default = /*#__PURE__*/__webpack_require__.n(fromPairs);\n// EXTERNAL MODULE: ./src/config/constants/info.ts\nvar info = __webpack_require__(43437);\n// EXTERNAL MODULE: ./src/state/info/types.ts\nvar types = __webpack_require__(29209);\n// EXTERNAL MODULE: ./src/state/info/constant.ts\nvar constant = __webpack_require__(79467);\n;// CONCATENATED MODULE: ./src/state/info/queries/helpers.ts\n\n\n\n\n\n\n\nvar mapMints = function(mint) {\n    return {\n        type: types/* TransactionType.MINT */.i.MINT,\n        hash: mint.id.split(\"-\")[0],\n        timestamp: mint.timestamp,\n        sender: mint.to,\n        token0Symbol: mint.pair.token0.symbol,\n        token1Symbol: mint.pair.token1.symbol,\n        token0Address: mint.pair.token0.id,\n        token1Address: mint.pair.token1.id,\n        amountUSD: parseFloat(mint.amountUSD),\n        amountToken0: parseFloat(mint.amount0),\n        amountToken1: parseFloat(mint.amount1)\n    };\n};\nvar mapBurns = function(burn) {\n    return {\n        type: types/* TransactionType.BURN */.i.BURN,\n        hash: burn.id.split(\"-\")[0],\n        timestamp: burn.timestamp,\n        sender: burn.sender,\n        token0Symbol: burn.pair.token0.symbol,\n        token1Symbol: burn.pair.token1.symbol,\n        token0Address: burn.pair.token0.id,\n        token1Address: burn.pair.token1.id,\n        amountUSD: parseFloat(burn.amountUSD),\n        amountToken0: parseFloat(burn.amount0),\n        amountToken1: parseFloat(burn.amount1)\n    };\n};\nvar mapSwaps = function(swap) {\n    return {\n        type: types/* TransactionType.SWAP */.i.SWAP,\n        hash: swap.id.split(\"-\")[0],\n        timestamp: swap.timestamp,\n        sender: swap.from,\n        token0Symbol: swap.pair.token0.symbol,\n        token1Symbol: swap.pair.token1.symbol,\n        token0Address: swap.pair.token0.id,\n        token1Address: swap.pair.token1.id,\n        amountUSD: parseFloat(swap.amountUSD),\n        amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n        amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out)\n    };\n};\nvar mapDayData = function(tokenDayData) {\n    return {\n        date: tokenDayData.date,\n        volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n        liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD)\n    };\n};\nvar mapPairDayData = function(pairDayData) {\n    return {\n        date: pairDayData.date,\n        volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n        liquidityUSD: parseFloat(pairDayData.reserveUSD)\n    };\n};\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nvar helpers_fetchChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, getEntityDayDatas) {\n        var chartEntries, error, skip, allFound, ref, data, fetchError, formattedDayDatas, availableDays, firstAvailableDayData, ref1, timestamp, ref2, latestLiquidityUSD, endTimestamp;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    chartEntries = [];\n                    error = false;\n                    skip = 0;\n                    allFound = false;\n                    _state.label = 1;\n                case 1:\n                    if (!!allFound) return [\n                        3,\n                        3\n                    ];\n                    return [\n                        4,\n                        getEntityDayDatas(chainName, skip)\n                    ];\n                case 2:\n                    ref = _state.sent(), data = ref.data, fetchError = ref.error;\n                    skip += 1000;\n                    allFound = (data === null || data === void 0 ? void 0 : data.length) < 1000;\n                    error = fetchError;\n                    if (data) {\n                        chartEntries = chartEntries.concat(data);\n                    }\n                    return [\n                        3,\n                        1\n                    ];\n                case 3:\n                    if (error || chartEntries.length === 0) {\n                        return [\n                            2,\n                            {\n                                error: true\n                            }\n                        ];\n                    }\n                    formattedDayDatas = fromPairs_default()(chartEntries.map(function(dayData) {\n                        // At this stage we track unix day ordinal for each data point to check for empty days later\n                        var dayOrdinal = parseInt((dayData.date / info/* ONE_DAY_UNIX */.Bq).toFixed(0));\n                        return [\n                            dayOrdinal,\n                            dayData\n                        ];\n                    }));\n                    console.warn(formattedDayDatas);\n                    availableDays = Object.keys(formattedDayDatas).map(function(dayOrdinal) {\n                        return parseInt(dayOrdinal, 10);\n                    });\n                    firstAvailableDayData = formattedDayDatas[availableDays[0]];\n                    timestamp = (ref1 = firstAvailableDayData === null || firstAvailableDayData === void 0 ? void 0 : firstAvailableDayData.date) !== null && ref1 !== void 0 ? ref1 : constant/* multiChainStartTime */.YM[chainName];\n                    latestLiquidityUSD = (ref2 = firstAvailableDayData === null || firstAvailableDayData === void 0 ? void 0 : firstAvailableDayData.liquidityUSD) !== null && ref2 !== void 0 ? ref2 : 0;\n                    endTimestamp = (0,getUnixTime/* default */.Z)(new Date());\n                    while(timestamp < endTimestamp - info/* ONE_DAY_UNIX */.Bq){\n                        timestamp += info/* ONE_DAY_UNIX */.Bq;\n                        var dayOrdinal = parseInt((timestamp / info/* ONE_DAY_UNIX */.Bq).toFixed(0), 10);\n                        if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n                            formattedDayDatas[dayOrdinal] = {\n                                date: timestamp,\n                                volumeUSD: 0,\n                                liquidityUSD: latestLiquidityUSD\n                            };\n                        } else {\n                            latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD;\n                        }\n                    }\n                    return [\n                        2,\n                        {\n                            data: Object.values(formattedDayDatas),\n                            error: false\n                        }\n                    ];\n            }\n        });\n    });\n    return function fetchChartData(chainName, getEntityDayDatas) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar fetchChartDataWithAddress = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, getEntityDayDatas, address) {\n        var chartEntries, error, skip, allFound, ref, data, fetchError, formattedDayDatas, availableDays, firstAvailableDayData, ref1, timestamp, ref2, latestLiquidityUSD, endTimestamp;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    chartEntries = [];\n                    error = false;\n                    skip = 0;\n                    allFound = false;\n                    _state.label = 1;\n                case 1:\n                    if (!!allFound) return [\n                        3,\n                        3\n                    ];\n                    return [\n                        4,\n                        getEntityDayDatas(chainName, skip, address)\n                    ];\n                case 2:\n                    ref = _state.sent(), data = ref.data, fetchError = ref.error;\n                    skip += 1000;\n                    allFound = (data === null || data === void 0 ? void 0 : data.length) < 1000;\n                    error = fetchError;\n                    if (data) {\n                        chartEntries = chartEntries.concat(data);\n                    }\n                    return [\n                        3,\n                        1\n                    ];\n                case 3:\n                    if (error || chartEntries.length === 0) {\n                        return [\n                            2,\n                            {\n                                error: true\n                            }\n                        ];\n                    }\n                    formattedDayDatas = fromPairs_default()(chartEntries.map(function(dayData) {\n                        // At this stage we track unix day ordinal for each data point to check for empty days later\n                        var dayOrdinal = parseInt((dayData.date / info/* ONE_DAY_UNIX */.Bq).toFixed(0));\n                        return [\n                            dayOrdinal,\n                            dayData\n                        ];\n                    }));\n                    console.warn(formattedDayDatas);\n                    availableDays = Object.keys(formattedDayDatas).map(function(dayOrdinal) {\n                        return parseInt(dayOrdinal, 10);\n                    });\n                    firstAvailableDayData = formattedDayDatas[availableDays[0]];\n                    timestamp = (ref1 = firstAvailableDayData === null || firstAvailableDayData === void 0 ? void 0 : firstAvailableDayData.date) !== null && ref1 !== void 0 ? ref1 : constant/* multiChainStartTime */.YM[chainName];\n                    latestLiquidityUSD = (ref2 = firstAvailableDayData === null || firstAvailableDayData === void 0 ? void 0 : firstAvailableDayData.liquidityUSD) !== null && ref2 !== void 0 ? ref2 : 0;\n                    endTimestamp = (0,getUnixTime/* default */.Z)(new Date());\n                    while(timestamp < endTimestamp - info/* ONE_DAY_UNIX */.Bq){\n                        timestamp += info/* ONE_DAY_UNIX */.Bq;\n                        var dayOrdinal = parseInt((timestamp / info/* ONE_DAY_UNIX */.Bq).toFixed(0), 10);\n                        if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n                            formattedDayDatas[dayOrdinal] = {\n                                date: timestamp,\n                                volumeUSD: 0,\n                                liquidityUSD: latestLiquidityUSD\n                            };\n                        } else {\n                            latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD;\n                        }\n                    }\n                    return [\n                        2,\n                        {\n                            data: Object.values(formattedDayDatas),\n                            error: false\n                        }\n                    ];\n            }\n        });\n    });\n    return function fetchChartDataWithAddress(chainName, getEntityDayDatas, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n;// CONCATENATED MODULE: ./src/state/info/queries/pools/chartData.ts\n\n\n\nfunction _templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\\n        pairDayDatas(\\n          first: 1000\\n          skip: $skip\\n          where: { pairAddress: $address, date_gt: $startTime }\\n          orderBy: date\\n          orderDirection: asc\\n        ) {\\n          date\\n          dailyVolumeUSD\\n          reserveUSD\\n        }\\n      }\\n    \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\nvar getPoolChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, skip, address) {\n        var query, pairDayDatas, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    query = (0,dist.gql)(_templateObject());\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query, {\n                            startTime: constant/* multiChainStartTime */.YM[chainName],\n                            skip: skip,\n                            address: address\n                        })\n                    ];\n                case 1:\n                    pairDayDatas = _state.sent().pairDayDatas;\n                    data = pairDayDatas.map(mapPairDayData);\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch pool chart data\", error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getPoolChartData(chainName, skip, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar fetchPoolChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address) {\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            return [\n                2,\n                fetchChartDataWithAddress(chainName, getPoolChartData, address)\n            ];\n        });\n    });\n    return function fetchPoolChartData(chainName, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var chartData = (fetchPoolChartData);\n\n// EXTERNAL MODULE: ./src/state/info/queries/pools/poolData.ts + 1 modules\nvar poolData = __webpack_require__(6797);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_to_consumable_array.mjs + 2 modules\nvar _to_consumable_array = __webpack_require__(50930);\n;// CONCATENATED MODULE: ./src/state/info/queries/pools/transactions.ts\n\n\n\n\nfunction transactions_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n  query poolTransactions($address: Bytes!) {\\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      from\\n      amount0In\\n      amount1In\\n      amount0Out\\n      amount1Out\\n      amountUSD\\n    }\\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      sender\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"\n    ]);\n    transactions_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n/**\n * Transactions of the given pool, used on Pool page\n */ var POOL_TRANSACTIONS = (0,dist.gql)(transactions_templateObject());\nvar fetchPoolTransactions = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address) {\n        var data, mints, burns, swaps, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(POOL_TRANSACTIONS, {\n                            address: address\n                        })\n                    ];\n                case 1:\n                    data = _state.sent();\n                    mints = data.mints.map(mapMints);\n                    burns = data.burns.map(mapBurns);\n                    swaps = data.swaps.map(mapSwaps);\n                    return [\n                        2,\n                        {\n                            data: (0,_to_consumable_array/* default */.Z)(mints).concat((0,_to_consumable_array/* default */.Z)(burns), (0,_to_consumable_array/* default */.Z)(swaps)),\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch transactions for pool \".concat(address), error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchPoolTransactions(chainName, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var transactions = (fetchPoolTransactions);\n\n;// CONCATENATED MODULE: ./src/state/info/queries/protocol/chart.ts\n/* eslint-disable no-await-in-loop */ \n\n\nfunction chart_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n  query overviewCharts($startTime: Int!, $skip: Int!) {\\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\\n      date\\n      dailyVolumeUSD\\n      totalLiquidityUSD\\n    }\\n  }\\n\"\n    ]);\n    chart_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */ var PANCAKE_DAY_DATAS = (0,dist.gql)(chart_templateObject());\nvar getOverviewChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, skip) {\n        var pancakeDayDatas, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(PANCAKE_DAY_DATAS, {\n                            startTime: constant/* multiChainStartTime */.YM[chainName],\n                            skip: skip\n                        })\n                    ];\n                case 1:\n                    pancakeDayDatas = _state.sent().pancakeDayDatas;\n                    data = pancakeDayDatas.map(mapDayData);\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch overview chart data\", error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getOverviewChartData(chainName, skip) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Fetch historic chart data\n */ var useFetchGlobalChartData = function() {\n    var ref = useState(), overviewChartData = ref[0], setOverviewChartData = ref[1];\n    var ref1 = useState(false), error = ref1[0], setError = ref1[1];\n    var chainName = useGetChainName();\n    useEffect(function() {\n        var fetch = function() {\n            var _ref = _async_to_generator(function() {\n                var data;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            return [\n                                4,\n                                fetchChartData(chainName, getOverviewChartData)\n                            ];\n                        case 1:\n                            data = _state.sent().data;\n                            if (data) {\n                                setOverviewChartData(data);\n                            } else {\n                                setError(true);\n                            }\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetch() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        if (!overviewChartData && !error) {\n            fetch();\n        }\n    }, [\n        overviewChartData,\n        error,\n        chainName\n    ]);\n    return {\n        error: error,\n        data: overviewChartData\n    };\n};\nvar fetchGlobalChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName) {\n        var data;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        helpers_fetchChartData(chainName, getOverviewChartData)\n                    ];\n                case 1:\n                    data = _state.sent().data;\n                    return [\n                        2,\n                        data\n                    ];\n            }\n        });\n    });\n    return function fetchGlobalChartData(chainName) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var chart = ((/* unused pure expression or super */ null && (useFetchGlobalChartData)));\n\n// EXTERNAL MODULE: ./src/utils/getChangeForPeriod.ts\nvar utils_getChangeForPeriod = __webpack_require__(41485);\n// EXTERNAL MODULE: ./src/views/Info/hooks/useBlocksFromTimestamps.ts\nvar hooks_useBlocksFromTimestamps = __webpack_require__(15051);\n// EXTERNAL MODULE: ./src/views/Info/utils/infoDataHelpers.ts\nvar infoDataHelpers = __webpack_require__(99066);\n;// CONCATENATED MODULE: ./src/state/info/queries/protocol/overview.ts\n\n\n\n\nfunction overview_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"query overview {\\n      \",\n        \"(\\n        \",\n        \"\\n        first: 1) {\\n        totalTransactions\\n        totalVolumeUSD\\n        totalLiquidityUSD\\n      }\\n    }\"\n    ]);\n    overview_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */ var getOverviewData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, block) {\n        var factoryString, query, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    factoryString = (0,constant/* checkIsStableSwap */.J5)() ? \"factories\" : \"pancakeFactories\";\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    query = (0,dist.gql)(overview_templateObject(), factoryString, block ? \"block: { number: \".concat(block, \"}\") : \"\");\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query)\n                    ];\n                case 2:\n                    data = _state.sent();\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 3:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch info overview\", error);\n                    return [\n                        2,\n                        {\n                            data: null,\n                            error: true\n                        }\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getOverviewData(chainName, block) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar formatPancakeFactoryResponse = function(rawPancakeFactory) {\n    if (rawPancakeFactory) {\n        return {\n            totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n            totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n            totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD)\n        };\n    }\n    return null;\n};\nvar useFetchProtocolData = function() {\n    var ref = useState({\n        error: false\n    }), fetchState = ref[0], setFetchState = ref[1];\n    var ref1 = _sliced_to_array(getDeltaTimestamps(), 2), t24 = ref1[0], t48 = ref1[1];\n    var ref2 = useBlocksFromTimestamps([\n        t24,\n        t48\n    ]), blocks = ref2.blocks, blockError = ref2.error;\n    var ref3 = _sliced_to_array(blocks !== null && blocks !== void 0 ? blocks : [], 2), block24 = ref3[0], block48 = ref3[1];\n    var chainName = useGetChainName();\n    useEffect(function() {\n        var fetchData = function() {\n            var _ref = _async_to_generator(function() {\n                var ref, ref1, ref2, ref3, ref4, ref5, ref6, error, data, ref7, error24, data24, ref8, error48, data48, anyError, overviewData, overviewData24, overviewData48, allDataAvailable, ref9, volumeUSD, volumeUSDChange, liquidityUSDChange, ref10, txCount, txCountChange, protocolData;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            return [\n                                4,\n                                Promise.all([\n                                    getOverviewData(chainName),\n                                    getOverviewData(chainName, (ref3 = block24 === null || block24 === void 0 ? void 0 : block24.number) !== null && ref3 !== void 0 ? ref3 : undefined),\n                                    getOverviewData(chainName, (ref4 = block48 === null || block48 === void 0 ? void 0 : block48.number) !== null && ref4 !== void 0 ? ref4 : undefined)\n                                ])\n                            ];\n                        case 1:\n                            ref5 = _sliced_to_array.apply(void 0, [\n                                _state.sent(),\n                                3\n                            ]), ref6 = ref5[0], error = ref6.error, data = ref6.data, ref7 = ref5[1], error24 = ref7.error, data24 = ref7.data, ref8 = ref5[2], error48 = ref8.error, data48 = ref8.data;\n                            anyError = error || error24 || error48;\n                            overviewData = formatPancakeFactoryResponse(data === null || data === void 0 ? void 0 : (ref = data.pancakeFactories) === null || ref === void 0 ? void 0 : ref[0]);\n                            overviewData24 = formatPancakeFactoryResponse(data24 === null || data24 === void 0 ? void 0 : (ref1 = data24.pancakeFactories) === null || ref1 === void 0 ? void 0 : ref1[0]);\n                            overviewData48 = formatPancakeFactoryResponse(data48 === null || data48 === void 0 ? void 0 : (ref2 = data48.pancakeFactories) === null || ref2 === void 0 ? void 0 : ref2[0]);\n                            allDataAvailable = overviewData && overviewData24 && overviewData48;\n                            if (anyError || !allDataAvailable) {\n                                setFetchState({\n                                    error: true\n                                });\n                            } else {\n                                ref9 = _sliced_to_array(getChangeForPeriod(overviewData.totalVolumeUSD, overviewData24.totalVolumeUSD, overviewData48.totalVolumeUSD), 2), volumeUSD = ref9[0], volumeUSDChange = ref9[1];\n                                liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD);\n                                ref10 = _sliced_to_array(getChangeForPeriod(overviewData.totalTransactions, overviewData24.totalTransactions, overviewData48.totalTransactions), 2), txCount = ref10[0], txCountChange = ref10[1];\n                                protocolData = {\n                                    volumeUSD: volumeUSD,\n                                    volumeUSDChange: typeof volumeUSDChange === \"number\" ? volumeUSDChange : 0,\n                                    liquidityUSD: overviewData.totalLiquidityUSD,\n                                    liquidityUSDChange: liquidityUSDChange,\n                                    txCount: txCount,\n                                    txCountChange: txCountChange\n                                };\n                                setFetchState({\n                                    error: false,\n                                    data: protocolData\n                                });\n                            }\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetchData() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        var allBlocksAvailable = (block24 === null || block24 === void 0 ? void 0 : block24.number) && (block48 === null || block48 === void 0 ? void 0 : block48.number);\n        if (allBlocksAvailable && !blockError && !fetchState.data) {\n            fetchData();\n        }\n    }, [\n        block24,\n        block48,\n        blockError,\n        fetchState,\n        chainName\n    ]);\n    return fetchState;\n};\nvar fetchProtocolData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, block24, block48) {\n        var ref, ref1, ref2, ref3, ref4, ref5, data, ref6, data24, ref7, data48, overviewData, overviewData24, overviewData48, ref8, volumeUSD, volumeUSDChange, liquidityUSDChange, ref9, txCount, txCountChange, protocolData;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        Promise.all([\n                            getOverviewData(chainName),\n                            getOverviewData(chainName, (ref3 = block24 === null || block24 === void 0 ? void 0 : block24.number) !== null && ref3 !== void 0 ? ref3 : undefined),\n                            getOverviewData(chainName, (ref4 = block48 === null || block48 === void 0 ? void 0 : block48.number) !== null && ref4 !== void 0 ? ref4 : undefined)\n                        ])\n                    ];\n                case 1:\n                    ref5 = src_sliced_to_array/* default.apply */.Z.apply(void 0, [\n                        _state.sent(),\n                        3\n                    ]), data = ref5[0].data, ref6 = ref5[1], data24 = ref6.data, ref7 = ref5[2], data48 = ref7.data;\n                    if (data.factories && data.factories.length > 0) data.pancakeFactories = data.factories;\n                    if (data24.factories && data24.factories.length > 0) data24.pancakeFactories = data24.factories;\n                    if (data48.factories && data48.factories.length > 0) data48.pancakeFactories = data48.factories;\n                    overviewData = formatPancakeFactoryResponse(data === null || data === void 0 ? void 0 : (ref = data.pancakeFactories) === null || ref === void 0 ? void 0 : ref[0]);\n                    overviewData24 = formatPancakeFactoryResponse(data24 === null || data24 === void 0 ? void 0 : (ref1 = data24.pancakeFactories) === null || ref1 === void 0 ? void 0 : ref1[0]);\n                    overviewData48 = formatPancakeFactoryResponse(data48 === null || data48 === void 0 ? void 0 : (ref2 = data48.pancakeFactories) === null || ref2 === void 0 ? void 0 : ref2[0]);\n                    ref8 = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(overviewData.totalVolumeUSD, overviewData24.totalVolumeUSD, overviewData48.totalVolumeUSD), 2), volumeUSD = ref8[0], volumeUSDChange = ref8[1];\n                    liquidityUSDChange = (0,infoDataHelpers/* getPercentChange */.Y)(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD);\n                    ref9 = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(overviewData.totalTransactions, overviewData24.totalTransactions, overviewData48.totalTransactions), 2), txCount = ref9[0], txCountChange = ref9[1];\n                    protocolData = {\n                        volumeUSD: volumeUSD,\n                        volumeUSDChange: typeof volumeUSDChange === \"number\" ? volumeUSDChange : 0,\n                        liquidityUSD: overviewData.totalLiquidityUSD,\n                        liquidityUSDChange: liquidityUSDChange,\n                        txCount: txCount,\n                        txCountChange: txCountChange\n                    };\n                    return [\n                        2,\n                        protocolData\n                    ];\n            }\n        });\n    });\n    return function fetchProtocolData(chainName, block24, block48) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var overview = ((/* unused pure expression or super */ null && (useFetchProtocolData)));\n\n;// CONCATENATED MODULE: ./src/state/info/queries/protocol/transactions.ts\n\n\n\n\nfunction protocol_transactions_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n  query overviewTransactions {\\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      from\\n      amount0In\\n      amount1In\\n      amount0Out\\n      amount1Out\\n      amountUSD\\n    }\\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      sender\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"\n    ]);\n    protocol_transactions_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n/**\n * Transactions for Transaction table on the Home page\n */ var GLOBAL_TRANSACTIONS = (0,dist.gql)(protocol_transactions_templateObject());\nvar fetchTopTransactions = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName) {\n        var data, mints, burns, swaps, e;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(GLOBAL_TRANSACTIONS)\n                    ];\n                case 1:\n                    data = _state.sent();\n                    if (!data) {\n                        return [\n                            2,\n                            undefined\n                        ];\n                    }\n                    mints = data.mints.map(mapMints);\n                    burns = data.burns.map(mapBurns);\n                    swaps = data.swaps.map(mapSwaps);\n                    return [\n                        2,\n                        (0,_to_consumable_array/* default */.Z)(mints).concat((0,_to_consumable_array/* default */.Z)(burns), (0,_to_consumable_array/* default */.Z)(swaps)).sort(function(a, b) {\n                            return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10);\n                        })\n                    ];\n                case 2:\n                    e = _state.sent();\n                    return [\n                        2,\n                        undefined\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTopTransactions(chainName) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var protocol_transactions = (fetchTopTransactions);\n\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/chartData.ts\n\n\n\nfunction chartData_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\\n        tokenDayDatas(\\n          first: 1000\\n          skip: $skip\\n          where: { token: $address, date_gt: $startTime }\\n          orderBy: date\\n          orderDirection: asc\\n        ) {\\n          date\\n          dailyVolumeUSD\\n          totalLiquidityUSD\\n        }\\n      }\\n    \"\n    ]);\n    chartData_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\nvar getTokenChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, skip, address) {\n        var query, tokenDayDatas, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    query = (0,dist.gql)(chartData_templateObject());\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query, {\n                            startTime: constant/* multiChainStartTime */.YM[chainName],\n                            skip: skip,\n                            address: address\n                        })\n                    ];\n                case 1:\n                    tokenDayDatas = _state.sent().tokenDayDatas;\n                    data = tokenDayDatas.map(mapDayData);\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch token chart data\", error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function getTokenChartData(chainName, skip, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar fetchTokenChartData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address) {\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            return [\n                2,\n                fetchChartDataWithAddress(chainName, getTokenChartData, address)\n            ];\n        });\n    });\n    return function fetchTokenChartData(chainName, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var tokens_chartData = (fetchTokenChartData);\n\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/poolsForToken.ts\n\n\n\nfunction poolsForToken_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\\n    asToken0: pairs(\\n      first: 15\\n      orderBy: trackedReserve\",\n        \"\\n      orderDirection: desc\\n      where: { totalTransactions_gt: \",\n        \", token0: $address, token1_not_in: $blacklist }\\n    ) {\\n      id\\n    }\\n    asToken1: pairs(\\n      first: 15\\n      orderBy: trackedReserve\",\n        \"\\n      orderDirection: desc\\n      where: { totalTransactions_gt: \",\n        \", token1: $address, token0_not_in: $blacklist }\\n    ) {\\n      id\\n    }\\n  }\\n\"\n    ]);\n    poolsForToken_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n/**\n * Data for showing Pools table on the Token page\n */ var POOLS_FOR_TOKEN = function(chainName) {\n    var transactionGT = chainName === \"ETH\" ? 1 : 100;\n    return (0,dist.gql)(poolsForToken_templateObject(), constant/* multiChainQueryMainToken */.WR[chainName], transactionGT, constant/* multiChainQueryMainToken */.WR[chainName], transactionGT);\n};\nvar fetchPoolsForToken = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address) {\n        var data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(POOLS_FOR_TOKEN(chainName), {\n                            address: address,\n                            blacklist: info/* TOKEN_BLACKLIST */.tE\n                        })\n                    ];\n                case 1:\n                    data = _state.sent();\n                    return [\n                        2,\n                        {\n                            error: false,\n                            addresses: data.asToken0.concat(data.asToken1).map(function(p) {\n                                return p.id;\n                            })\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch pools for token \".concat(address), error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchPoolsForToken(chainName, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var poolsForToken = (fetchPoolsForToken);\n\n// EXTERNAL MODULE: ./src/utils/getBlocksFromTimestamps.ts\nvar getBlocksFromTimestamps = __webpack_require__(33992);\n// EXTERNAL MODULE: ./src/views/Info/utils/infoQueryHelpers.ts\nvar infoQueryHelpers = __webpack_require__(56615);\n// EXTERNAL MODULE: ../../node_modules/lodash/orderBy.js\nvar orderBy = __webpack_require__(34498);\nvar orderBy_default = /*#__PURE__*/__webpack_require__.n(orderBy);\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/priceData.ts\n\n\n\nfunction priceData_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n    query tokenPriceData {\\n      \",\n        \"\\n    }\\n  \"\n    ]);\n    priceData_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\nvar getPriceSubqueries = function(chainName, tokenAddress, blocks) {\n    return blocks.map(function(block) {\n        return \"\\n      t\".concat(block.timestamp, ':token(id:\"').concat(tokenAddress, '\", block: { number: ').concat(block.number, \" }) { \\n        derived\").concat(constant/* multiChainQueryMainToken */.WR[chainName], \"\\n      }\\n      b\").concat(block.timestamp, ': bundle(id:\"1\", block: { number: ').concat(block.number, \" }) { \\n        \").concat(constant/* multiChainQueryMainToken */.WR[chainName].toLowerCase(), \"Price\\n      }\\n    \");\n    });\n};\n/**\n * Price data for token and bnb based on block number\n */ var priceQueryConstructor = function(subqueries) {\n    return (0,dist.gql)(priceData_templateObject(), subqueries);\n};\nvar fetchTokenPriceData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address, interval, startTimestamp) {\n        var endTimestamp, timestamps, time, blocks, prices, tokenPrices, mainToken, sortedTokenPrices, formattedHistory, i, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    endTimestamp = (0,getUnixTime/* default */.Z)(new Date());\n                    timestamps = [];\n                    time = startTimestamp;\n                    while(time <= endTimestamp){\n                        timestamps.push(time);\n                        time += interval;\n                    }\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        4,\n                        ,\n                        5\n                    ]);\n                    return [\n                        4,\n                        (0,getBlocksFromTimestamps/* getBlocksFromTimestamps */.z)(timestamps, \"asc\", 500, chainName)\n                    ];\n                case 2:\n                    blocks = _state.sent();\n                    if (!blocks || blocks.length === 0) {\n                        console.error(\"Error fetching blocks for timestamps\", timestamps);\n                        return [\n                            2,\n                            {\n                                error: false\n                            }\n                        ];\n                    }\n                    return [\n                        4,\n                        (0,infoQueryHelpers/* multiQuery */.L)(priceQueryConstructor, getPriceSubqueries(chainName, address, blocks), constant/* multiChainQueryEndPoint */.Ho[chainName], 200)\n                    ];\n                case 3:\n                    prices = _state.sent();\n                    console.warn(\"fetchTokenPriceData\", {\n                        chainName: chainName,\n                        prices: prices\n                    });\n                    if (!prices) {\n                        console.error(\"Price data failed to load\");\n                        return [\n                            2,\n                            {\n                                error: false\n                            }\n                        ];\n                    }\n                    tokenPrices = [];\n                    mainToken = constant/* multiChainQueryMainToken */.WR[chainName];\n                    // Get Token prices in BNB\n                    Object.keys(prices).forEach(function(priceKey) {\n                        var timestamp = priceKey.split(\"t\")[1];\n                        // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\n                        if (timestamp) {\n                            var ref;\n                            tokenPrices.push({\n                                timestamp: timestamp,\n                                derivedBNB: ((ref = prices[priceKey]) === null || ref === void 0 ? void 0 : ref[\"derived\".concat(mainToken)]) ? parseFloat(prices[priceKey][\"derived\".concat(mainToken)]) : 0,\n                                priceUSD: 0\n                            });\n                        }\n                    });\n                    console.warn(\"pricesPart1\", tokenPrices);\n                    // Go through BNB USD prices and calculate Token price based on it\n                    Object.keys(prices).forEach(function(priceKey) {\n                        var timestamp = priceKey.split(\"b\")[1];\n                        // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n                        if (timestamp) {\n                            var tokenPriceIndex = tokenPrices.findIndex(function(tokenPrice) {\n                                return tokenPrice.timestamp === timestamp;\n                            });\n                            if (tokenPriceIndex >= 0) {\n                                var ref;\n                                var derivedBNB = tokenPrices[tokenPriceIndex].derivedBNB;\n                                var ref1;\n                                tokenPrices[tokenPriceIndex].priceUSD = parseFloat((ref1 = (ref = prices[priceKey]) === null || ref === void 0 ? void 0 : ref[\"\".concat(mainToken.toLowerCase(), \"Price\")]) !== null && ref1 !== void 0 ? ref1 : 0) * derivedBNB;\n                            }\n                        }\n                    });\n                    sortedTokenPrices = orderBy_default()(tokenPrices, function(tokenPrice) {\n                        return parseInt(tokenPrice.timestamp, 10);\n                    });\n                    formattedHistory = [];\n                    // for each timestamp, construct the open and close price\n                    for(i = 0; i < sortedTokenPrices.length - 1; i++){\n                        formattedHistory.push({\n                            time: parseFloat(sortedTokenPrices[i].timestamp),\n                            open: sortedTokenPrices[i].priceUSD,\n                            close: sortedTokenPrices[i + 1].priceUSD,\n                            high: sortedTokenPrices[i + 1].priceUSD,\n                            low: sortedTokenPrices[i].priceUSD\n                        });\n                    }\n                    return [\n                        2,\n                        {\n                            data: formattedHistory,\n                            error: false\n                        }\n                    ];\n                case 4:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch price data for token \".concat(address), error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTokenPriceData(chainName, address, interval, startTimestamp) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var priceData = (fetchTokenPriceData);\n\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread.mjs\nvar _object_spread = __webpack_require__(70865);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread_props.mjs\nvar _object_spread_props = __webpack_require__(96670);\n// EXTERNAL MODULE: ./src/utils/getDeltaTimestamps.ts\nvar utils_getDeltaTimestamps = __webpack_require__(73806);\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/topTokens.ts\n\n\n\n\nfunction topTokens_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query topTokens($blacklist: [String!]) {\\n        tokenDayDatas(\\n          first: \",\n        \"\\n          \",\n        \"\\n          orderBy: dailyVolumeUSD\\n          orderDirection: desc\\n        ) {\\n          id\\n        }\\n      }\\n    \"\n    ]);\n    topTokens_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */ var fetchTopTokens = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, timestamp24hAgo) {\n        var whereCondition, firstCount, query, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    whereCondition = chainName === \"ETH\" ? \"where: { date_gt: \".concat(timestamp24hAgo, \", token_not_in: $blacklist, dailyVolumeUSD_gt:2000 }\") : (0,constant/* checkIsStableSwap */.J5)() ? \"\" : \"where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: \".concat(timestamp24hAgo, \"}\");\n                    firstCount = 30;\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    query = (0,dist.gql)(topTokens_templateObject(), firstCount, whereCondition);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query, {\n                            blacklist: constant/* multiChainTokenBlackList */.z2[chainName]\n                        })\n                    ];\n                case 2:\n                    data = _state.sent();\n                    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n                    return [\n                        2,\n                        data.tokenDayDatas.map(function(t) {\n                            return t.id.split(\"-\")[0];\n                        })\n                    ];\n                case 3:\n                    error = _state.sent();\n                    console.warn(\"fetchTopTokens\", {\n                        chainName: chainName,\n                        timestamp24hAgo: timestamp24hAgo\n                    });\n                    console.error(\"Failed to fetch top tokens\", error);\n                    return [\n                        2,\n                        []\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTopTokens(chainName, timestamp24hAgo) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Fetch top addresses by volume\n */ var useTopTokenAddresses = function() {\n    var ref = useState([]), topTokenAddresses = ref[0], setTopTokenAddresses = ref[1];\n    var ref1 = _sliced_to_array(getDeltaTimestamps(), 1), timestamp24hAgo = ref1[0];\n    var chainName = useGetChainName();\n    var fetch = useCallback(/*#__PURE__*/ _async_to_generator(function() {\n        var addresses;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        fetchTopTokens(chainName, timestamp24hAgo)\n                    ];\n                case 1:\n                    addresses = _state.sent();\n                    if (addresses.length > 0) setTopTokenAddresses(addresses);\n                    return [\n                        2\n                    ];\n            }\n        });\n    }), [\n        timestamp24hAgo,\n        chainName\n    ]);\n    useEffect(function() {\n        fetch();\n    }, [\n        chainName,\n        fetch\n    ]);\n    return topTokenAddresses;\n};\nvar fetchTokenAddresses = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName) {\n        var ref, timestamp24hAgo, addresses;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 1), timestamp24hAgo = ref[0];\n                    return [\n                        4,\n                        fetchTopTokens(chainName, timestamp24hAgo)\n                    ];\n                case 1:\n                    addresses = _state.sent();\n                    return [\n                        2,\n                        addresses\n                    ];\n            }\n        });\n    });\n    return function fetchTokenAddresses(chainName) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var topTokens = ((/* unused pure expression or super */ null && (useTopTokenAddresses)));\n\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/tokenData.ts\n/* eslint-disable no-param-reassign */ \n\n\n\n\n\nfunction tokenData_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query tokens {\\n        now: \",\n        \"\\n        oneDayAgo: \",\n        \"\\n        twoDaysAgo: \",\n        \"\\n        oneWeekAgo: \",\n        \"\\n        \",\n        \"\\n      }\\n    \"\n    ]);\n    tokenData_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n/**\n * Main token data to display on Token page\n */ var TOKEN_AT_BLOCK = function(chainName, block, tokens) {\n    var addressesString = '[\"'.concat(tokens.join('\",\"'), '\"]');\n    var blockString = block ? \"block: {number: \".concat(block, \"}\") : \"\";\n    return \"tokens(\\n      where: {id_in: \".concat(addressesString, \"}\\n      \").concat(blockString, \"\\n      orderBy: tradeVolumeUSD\\n      orderDirection: desc\\n    ) {\\n      id\\n      symbol\\n      name\\n      derived\").concat(constant/* multiChainQueryMainToken */.WR[chainName], \"\\n      derivedUSD\\n      tradeVolumeUSD\\n      totalTransactions\\n      totalLiquidity\\n    }\\n  \");\n};\nvar fetchTokenData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, block24h, block48h, block7d, block14d, tokenAddresses) {\n        var weeksQuery, query, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    weeksQuery = chainName === \"BSC\" ? \"twoWeeksAgo: \".concat(TOKEN_AT_BLOCK(chainName, block14d, tokenAddresses)) : \"\";\n                    query = (0,dist.gql)(tokenData_templateObject(), TOKEN_AT_BLOCK(chainName, null, tokenAddresses), TOKEN_AT_BLOCK(chainName, block24h, tokenAddresses), TOKEN_AT_BLOCK(chainName, block48h, tokenAddresses), TOKEN_AT_BLOCK(chainName, block7d, tokenAddresses), weeksQuery);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query)\n                    ];\n                case 1:\n                    data = _state.sent();\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch token data\", error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTokenData(chainName, block24h, block48h, block7d, block14d, tokenAddresses) {\n        return _ref.apply(this, arguments);\n    };\n}();\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nvar parseTokenData = function(tokens) {\n    if (!tokens) {\n        return {};\n    }\n    return tokens.reduce(function(accum, tokenData) {\n        var derivedBNB = tokenData.derivedBNB, derivedUSD = tokenData.derivedUSD, tradeVolumeUSD = tokenData.tradeVolumeUSD, totalTransactions = tokenData.totalTransactions, totalLiquidity = tokenData.totalLiquidity, derivedETH = tokenData.derivedETH;\n        accum[tokenData.id] = (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, tokenData), {\n            derivedBNB: derivedBNB ? 0 : parseFloat(derivedBNB),\n            derivedETH: derivedETH ? 0 : parseFloat(derivedETH),\n            derivedUSD: parseFloat(derivedUSD),\n            tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n            totalTransactions: parseFloat(totalTransactions),\n            totalLiquidity: parseFloat(totalLiquidity)\n        });\n        return accum;\n    }, {});\n};\n/**\n * Fetch top addresses by volume\n */ var useFetchedTokenDatas = function(chainName, tokenAddresses) {\n    var ref = useState({\n        error: false\n    }), fetchState = ref[0], setFetchState = ref[1];\n    var ref1 = _sliced_to_array(getDeltaTimestamps(), 4), t24h = ref1[0], t48h = ref1[1], t7d = ref1[2], t14d = ref1[3];\n    var ref2 = useBlocksFromTimestamps([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]), blocks = ref2.blocks, blockError = ref2.error;\n    var ref3 = _sliced_to_array(blocks !== null && blocks !== void 0 ? blocks : [], 4), block24h = ref3[0], block48h = ref3[1], block7d = ref3[2], block14d = ref3[3];\n    useEffect(function() {\n        var fetch = function() {\n            var _ref = _async_to_generator(function() {\n                var ref, error, data, parsed, parsed24, parsed48, parsed7d, parsed14d, formatted;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            return [\n                                4,\n                                fetchTokenData(chainName, block24h.number, block48h.number, block7d.number, block14d.number, tokenAddresses)\n                            ];\n                        case 1:\n                            ref = _state.sent(), error = ref.error, data = ref.data;\n                            if (error) {\n                                setFetchState({\n                                    error: true\n                                });\n                            } else {\n                                parsed = parseTokenData(data === null || data === void 0 ? void 0 : data.now);\n                                parsed24 = parseTokenData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n                                parsed48 = parseTokenData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n                                parsed7d = parseTokenData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n                                parsed14d = parseTokenData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo);\n                                formatted = tokenAddresses.reduce(function(accum, address) {\n                                    var current = parsed[address];\n                                    var oneDay = parsed24[address];\n                                    var twoDays = parsed48[address];\n                                    var week = parsed7d[address];\n                                    var twoWeeks = parsed14d[address];\n                                    var ref = _sliced_to_array(getChangeForPeriod(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.tradeVolumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.tradeVolumeUSD), 2), volumeUSD = ref[0], volumeUSDChange = ref[1];\n                                    var ref1 = _sliced_to_array(getChangeForPeriod(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, week === null || week === void 0 ? void 0 : week.tradeVolumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.tradeVolumeUSD), 1), volumeUSDWeek = ref1[0];\n                                    var liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0;\n                                    var liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0;\n                                    var liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo);\n                                    var liquidityToken = current ? current.totalLiquidity : 0;\n                                    // Prices of tokens for now, 24h ago and 7d ago\n                                    var priceUSD = current ? current.derivedUSD : 0;\n                                    var priceUSDOneDay = oneDay ? oneDay.derivedUSD : 0;\n                                    var priceUSDWeek = week ? week.derivedUSD : 0;\n                                    var priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay);\n                                    var priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek);\n                                    var txCount = getAmountChange(current === null || current === void 0 ? void 0 : current.totalTransactions, oneDay === null || oneDay === void 0 ? void 0 : oneDay.totalTransactions);\n                                    accum[address] = {\n                                        exists: !!current,\n                                        address: address,\n                                        name: current ? current.name : \"\",\n                                        symbol: current ? current.symbol : \"\",\n                                        volumeUSD: volumeUSD,\n                                        volumeUSDChange: volumeUSDChange,\n                                        volumeUSDWeek: volumeUSDWeek,\n                                        txCount: txCount,\n                                        liquidityUSD: liquidityUSD,\n                                        liquidityUSDChange: liquidityUSDChange,\n                                        liquidityToken: liquidityToken,\n                                        priceUSD: priceUSD,\n                                        priceUSDChange: priceUSDChange,\n                                        priceUSDChangeWeek: priceUSDChangeWeek\n                                    };\n                                    return accum;\n                                }, {});\n                                setFetchState({\n                                    data: formatted,\n                                    error: false\n                                });\n                            }\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetch() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        var allBlocksAvailable = (block24h === null || block24h === void 0 ? void 0 : block24h.number) && (block48h === null || block48h === void 0 ? void 0 : block48h.number) && (block7d === null || block7d === void 0 ? void 0 : block7d.number) && (block14d === null || block14d === void 0 ? void 0 : block14d.number);\n        if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError) {\n            fetch();\n        }\n    }, [\n        tokenAddresses,\n        block24h,\n        block48h,\n        block7d,\n        block14d,\n        blockError,\n        chainName\n    ]);\n    return fetchState;\n};\nvar fetchAllTokenDataByAddresses = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, blocks, tokenAddresses) {\n        var ref, block24h, block48h, block7d, block14d, data, parsed, parsed24, parsed48, parsed7d, parsed14d, formatted;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ref = (0,src_sliced_to_array/* default */.Z)(blocks !== null && blocks !== void 0 ? blocks : [], 4), block24h = ref[0], block48h = ref[1], block7d = ref[2], block14d = ref[3];\n                    return [\n                        4,\n                        fetchTokenData(chainName, block24h.number, block48h.number, block7d.number, block14d.number, tokenAddresses)\n                    ];\n                case 1:\n                    data = _state.sent().data;\n                    parsed = parseTokenData(data === null || data === void 0 ? void 0 : data.now);\n                    parsed24 = parseTokenData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n                    parsed48 = parseTokenData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n                    parsed7d = parseTokenData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n                    parsed14d = parseTokenData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo);\n                    formatted = tokenAddresses.reduce(function(accum, address) {\n                        var current = parsed[address];\n                        var oneDay = parsed24[address];\n                        var twoDays = parsed48[address];\n                        var week = parsed7d[address];\n                        var twoWeeks = parsed14d[address];\n                        var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.tradeVolumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.tradeVolumeUSD), 2), volumeUSD = ref[0], volumeUSDChange = ref[1];\n                        var ref1 = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, week === null || week === void 0 ? void 0 : week.tradeVolumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.tradeVolumeUSD), 1), volumeUSDWeek = ref1[0];\n                        var liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0;\n                        var liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0;\n                        var liquidityUSDChange = (0,infoDataHelpers/* getPercentChange */.Y)(liquidityUSD, liquidityUSDOneDayAgo);\n                        var liquidityToken = current ? current.totalLiquidity : 0;\n                        // Prices of tokens for now, 24h ago and 7d ago\n                        var priceUSD = current ? current.derivedUSD : 0;\n                        var priceUSDOneDay = oneDay ? oneDay.derivedUSD : 0;\n                        var priceUSDWeek = week ? week.derivedUSD : 0;\n                        var priceUSDChange = (0,infoDataHelpers/* getPercentChange */.Y)(priceUSD, priceUSDOneDay);\n                        var priceUSDChangeWeek = (0,infoDataHelpers/* getPercentChange */.Y)(priceUSD, priceUSDWeek);\n                        var txCount = (0,infoDataHelpers/* getAmountChange */.D)(current === null || current === void 0 ? void 0 : current.totalTransactions, oneDay === null || oneDay === void 0 ? void 0 : oneDay.totalTransactions);\n                        accum[address] = {\n                            data: {\n                                exists: !!current,\n                                address: address,\n                                name: current ? current.name : \"\",\n                                symbol: current ? current.symbol : \"\",\n                                volumeUSD: volumeUSD,\n                                volumeUSDChange: volumeUSDChange,\n                                volumeUSDWeek: volumeUSDWeek,\n                                txCount: txCount,\n                                liquidityUSD: liquidityUSD,\n                                liquidityUSDChange: liquidityUSDChange,\n                                liquidityToken: liquidityToken,\n                                priceUSD: priceUSD,\n                                priceUSDChange: priceUSDChange,\n                                priceUSDChangeWeek: priceUSDChangeWeek\n                            }\n                        };\n                        return accum;\n                    }, {});\n                    return [\n                        2,\n                        formatted\n                    ];\n            }\n        });\n    });\n    return function fetchAllTokenDataByAddresses(chainName, blocks, tokenAddresses) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar fetchAllTokenData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, blocks) {\n        var tokenAddresses, data;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        fetchTokenAddresses(chainName)\n                    ];\n                case 1:\n                    tokenAddresses = _state.sent();\n                    return [\n                        4,\n                        fetchAllTokenDataByAddresses(chainName, blocks, tokenAddresses)\n                    ];\n                case 2:\n                    data = _state.sent();\n                    return [\n                        2,\n                        data\n                    ];\n            }\n        });\n    });\n    return function fetchAllTokenData(chainName, blocks) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var tokenData = ((/* unused pure expression or super */ null && (useFetchedTokenDatas)));\n\n;// CONCATENATED MODULE: ./src/state/info/queries/tokens/transactions.ts\n\n\n\n\nfunction tokens_transactions_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n    query tokenTransactions($address: Bytes!) {\\n      mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        to\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n      mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        to\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n      swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        from\\n        amount0In\\n        amount1In\\n        amount0Out\\n        amount1Out\\n        amountUSD\\n      }\\n      swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        from\\n        amount0In\\n        amount1In\\n        amount0Out\\n        amount1Out\\n        amountUSD\\n      }\\n      burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        sender\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n      burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { \",\n        \" }) {\\n        id\\n        timestamp\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        sender\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  \"\n    ]);\n    tokens_transactions_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n/**\n * Data to display transaction table on Token page\n */ var TOKEN_TRANSACTIONS = function() {\n    var isStableSwap = (0,constant/* checkIsStableSwap */.J5)();\n    var whereToken0 = isStableSwap ? \"pair_: {token0: $address}\" : \"token0: $address\";\n    var whereToken1 = isStableSwap ? \"pair_: {token1: $address}\" : \"token1: $address\";\n    return (0,dist.gql)(tokens_transactions_templateObject(), whereToken0, whereToken1, whereToken0, whereToken1, whereToken0, whereToken1);\n};\nvar fetchTokenTransactions = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, address) {\n        var data, mints0, mints1, burns0, burns1, swaps0, swaps1, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        2,\n                        ,\n                        3\n                    ]);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(TOKEN_TRANSACTIONS(), {\n                            address: address\n                        })\n                    ];\n                case 1:\n                    data = _state.sent();\n                    mints0 = data.mintsAs0.map(mapMints);\n                    mints1 = data.mintsAs1.map(mapMints);\n                    burns0 = data.burnsAs0.map(mapBurns);\n                    burns1 = data.burnsAs1.map(mapBurns);\n                    swaps0 = data.swapsAs0.map(mapSwaps);\n                    swaps1 = data.swapsAs1.map(mapSwaps);\n                    return [\n                        2,\n                        {\n                            data: (0,_to_consumable_array/* default */.Z)(mints0).concat((0,_to_consumable_array/* default */.Z)(mints1), (0,_to_consumable_array/* default */.Z)(burns0), (0,_to_consumable_array/* default */.Z)(burns1), (0,_to_consumable_array/* default */.Z)(swaps0), (0,_to_consumable_array/* default */.Z)(swaps1)),\n                            error: false\n                        }\n                    ];\n                case 2:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch transactions for token \".concat(address), error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 3:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTokenTransactions(chainName, address) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var tokens_transactions = (fetchTokenTransactions);\n\n// EXTERNAL MODULE: ../../node_modules/swr/immutable/dist/index.mjs\nvar immutable_dist = __webpack_require__(2303);\n;// CONCATENATED MODULE: ./src/state/info/hooks.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Protocol hooks\nvar refreshIntervalForInfo = 15000 // 15s\n;\nvar SWR_SETTINGS = {\n    refreshInterval: refreshIntervalForInfo\n};\nvar useProtocolDataSWR = function() {\n    var chainName = hooks_useGetChainName();\n    var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 2), t24 = ref[0], t48 = ref[1];\n    var blocks = (0,hooks_useBlocksFromTimestamps/* useBlockFromTimeStampSWR */.T)([\n        t24,\n        t48\n    ]).blocks;\n    var ref1 = (0,src_sliced_to_array/* default */.Z)(blocks !== null && blocks !== void 0 ? blocks : [], 2), block24 = ref1[0], block48 = ref1[1];\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var ref2 = (0,immutable_dist/* default */.Z)(chainName && block24 && block48 ? [\n        \"info/protocol/updateProtocolData/\".concat(type),\n        chainName\n    ] : null, function() {\n        return fetchProtocolData(chainName, block24, block48);\n    }), protocolData = ref2.data;\n    return protocolData !== null && protocolData !== void 0 ? protocolData : undefined;\n};\nvar useProtocolChartDataSWR = function() {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var ref = (0,immutable_dist/* default */.Z)([\n        \"info/protocol/updateProtocolChartData/\".concat(type),\n        chainName\n    ], function() {\n        return fetchGlobalChartData(chainName);\n    }), chartData = ref.data;\n    return chartData !== null && chartData !== void 0 ? chartData : undefined;\n};\nvar useProtocolTransactionsSWR = function() {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var ref = (0,immutable_dist/* default */.Z)([\n        \"info/protocol/updateProtocolTransactionsData/\".concat(type),\n        chainName\n    ], function() {\n        return protocol_transactions(chainName);\n    }, SWR_SETTINGS), transactions = ref.data;\n    return transactions !== null && transactions !== void 0 ? transactions : undefined;\n};\nvar useAllPoolDataSWR = function() {\n    var chainName = hooks_useGetChainName();\n    var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 4), t24h = ref[0], t48h = ref[1], t7d = ref[2], t14d = ref[3];\n    var blocks = (0,hooks_useBlocksFromTimestamps/* useBlockFromTimeStampSWR */.T)([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]).blocks;\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)(blocks && chainName && [\n        \"info/pools/data/\".concat(type),\n        chainName\n    ], function() {\n        return (0,poolData/* fetchAllPoolData */.d7)(blocks, chainName);\n    }).data;\n    return data !== null && data !== void 0 ? data : {};\n};\nvar usePoolDatasSWR = function(poolAddresses) {\n    var name = poolAddresses.join(\"\");\n    var chainName = hooks_useGetChainName();\n    var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 4), t24h = ref[0], t48h = ref[1], t7d = ref[2], t14d = ref[3];\n    var blocks = (0,hooks_useBlocksFromTimestamps/* useBlockFromTimeStampSWR */.T)([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]).blocks;\n    var data = (0,immutable_dist/* default */.Z)(blocks && chainName && [\n        \"info/pool/data/\".concat(name),\n        chainName\n    ], function() {\n        return (0,poolData/* fetchAllPoolDataWithAddress */.HA)(blocks, chainName, poolAddresses);\n    }, SWR_SETTINGS).data;\n    var poolsWithData = poolAddresses.map(function(address) {\n        var ref;\n        return data === null || data === void 0 ? void 0 : (ref = data[address]) === null || ref === void 0 ? void 0 : ref.data;\n    }).filter(function(pool) {\n        return pool;\n    });\n    return poolsWithData;\n};\nvar usePoolChartDataSWR = function(address) {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)([\n        \"info/pool/chartData/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return chartData(chainName, address);\n    }).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.data) !== null && ref !== void 0 ? ref : undefined;\n};\nvar usePoolTransactionsSWR = function(address) {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)([\n        \"info/pool/transactionsData/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return transactions(chainName, address);\n    }, SWR_SETTINGS).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.data) !== null && ref !== void 0 ? ref : undefined;\n};\n// Tokens hooks\nvar useAllTokenDataSWR = function() {\n    var chainName = hooks_useGetChainName();\n    var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 4), t24h = ref[0], t48h = ref[1], t7d = ref[2], t14d = ref[3];\n    var blocks = (0,hooks_useBlocksFromTimestamps/* useBlockFromTimeStampSWR */.T)([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]).blocks;\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)(blocks && chainName && [\n        \"info/token/data/\".concat(type),\n        chainName\n    ], function() {\n        return fetchAllTokenData(chainName, blocks);\n    }).data;\n    return data !== null && data !== void 0 ? data : {};\n};\nvar useTokenDatasSWR = function(addresses) {\n    var name = addresses.join(\"\");\n    var chainName = hooks_useGetChainName();\n    var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 4), t24h = ref[0], t48h = ref[1], t7d = ref[2], t14d = ref[3];\n    var blocks = (0,hooks_useBlocksFromTimestamps/* useBlockFromTimeStampSWR */.T)([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]).blocks;\n    var data = (0,immutable_dist/* default */.Z)(blocks && chainName && [\n        \"info/token/data/\".concat(name),\n        chainName\n    ], function() {\n        return fetchAllTokenDataByAddresses(chainName, blocks, addresses);\n    }, SWR_SETTINGS).data;\n    var tokensWithData = (0,react.useMemo)(function() {\n        if (!addresses) {\n            return undefined;\n        }\n        return addresses.map(function(a) {\n            var ref;\n            return data === null || data === void 0 ? void 0 : (ref = data[a]) === null || ref === void 0 ? void 0 : ref.data;\n        }).filter(function(d) {\n            return d && d.exists;\n        });\n    }, [\n        addresses,\n        data\n    ]);\n    return tokensWithData !== null && tokensWithData !== void 0 ? tokensWithData : undefined;\n};\nvar useTokenDataSWR = function(address) {\n    var allTokenData = useTokenDatasSWR([\n        address\n    ]);\n    var ref;\n    return (ref = allTokenData.find(function(d) {\n        return d.address === address;\n    })) !== null && ref !== void 0 ? ref : undefined;\n};\nvar usePoolsForTokenSWR = function(address) {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)([\n        \"info/token/poolAddress/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return poolsForToken(chainName, address);\n    }).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.addresses) !== null && ref !== void 0 ? ref : undefined;\n};\nvar useTokenChartDataSWR = function(address) {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)(address && chainName && [\n        \"info/token/chartData/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return tokens_chartData(chainName, address);\n    }, SWR_SETTINGS).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.data) !== null && ref !== void 0 ? ref : undefined;\n};\nvar useTokenPriceDataSWR = function(address, interval, timeWindow) {\n    var utcCurrentTime = (0,getUnixTime/* default */.Z)(new Date()) * 1000;\n    var startTimestamp = (0,getUnixTime/* default */.Z)((0,startOfHour/* default */.Z)((0,sub/* default */.Z)(utcCurrentTime, timeWindow)));\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)([\n        \"info/token/priceData/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return priceData(chainName, address, interval, startTimestamp);\n    }, SWR_SETTINGS).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.data) !== null && ref !== void 0 ? ref : undefined;\n};\nvar useTokenTransactionsSWR = function(address) {\n    var chainName = hooks_useGetChainName();\n    var type = (0,constant/* checkIsStableSwap */.J5)() ? \"stableSwap\" : \"swap\";\n    var data = (0,immutable_dist/* default */.Z)([\n        \"info/token/transactionsData/\".concat(address, \"/\").concat(type),\n        chainName\n    ], function() {\n        return tokens_transactions(chainName, address);\n    }, SWR_SETTINGS).data;\n    var ref;\n    return (ref = data === null || data === void 0 ? void 0 : data.data) !== null && ref !== void 0 ? ref : undefined;\n};\nvar hooks_useGetChainName = function() {\n    var path = window.location.href;\n    var getChain = (0,react.useCallback)(function() {\n        if (path.includes(\"eth\") || path.includes(\"chainId=1\")) return \"ETH\";\n        return \"BSC\";\n    }, [\n        path\n    ]);\n    var ref = (0,react.useState)(getChain()), name = ref[0], setName = ref[1];\n    var result = (0,react.useMemo)(function() {\n        return name;\n    }, [\n        name\n    ]);\n    (0,react.useEffect)(function() {\n        setName(getChain());\n    }, [\n        getChain\n    ]);\n    return result;\n};\nvar useMultiChainPath = function() {\n    var router = (0,next_router.useRouter)();\n    var chainName = router.query.chainName;\n    return chainName ? \"/\".concat(chainName) : \"\";\n};\nvar useStableSwapPath = function() {\n    return (0,constant/* checkIsStableSwap */.J5)() ? \"?type=stableSwap\" : \"\";\n};\n\n\n/***/ }),\n\n/***/ 6797:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"d7\": function() { return /* binding */ fetchAllPoolData; },\n  \"HA\": function() { return /* binding */ fetchAllPoolDataWithAddress; },\n  \"jf\": function() { return /* binding */ fetchPoolData; }\n});\n\n// UNUSED EXPORTS: default, parsePoolData\n\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_async_to_generator.mjs\nvar src_async_to_generator = __webpack_require__(98788);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread.mjs\nvar _object_spread = __webpack_require__(70865);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_object_spread_props.mjs\nvar _object_spread_props = __webpack_require__(96670);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_sliced_to_array.mjs\nvar src_sliced_to_array = __webpack_require__(87394);\n// EXTERNAL MODULE: ../../node_modules/@swc/helpers/src/_tagged_template_literal.mjs\nvar _tagged_template_literal = __webpack_require__(92228);\n// EXTERNAL MODULE: ../../node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(5163);\n// EXTERNAL MODULE: ../../node_modules/graphql-request/dist/index.js\nvar dist = __webpack_require__(6647);\n// EXTERNAL MODULE: ../../node_modules/react/index.js\nvar react = __webpack_require__(2784);\n// EXTERNAL MODULE: ./src/utils/getChangeForPeriod.ts\nvar utils_getChangeForPeriod = __webpack_require__(41485);\n// EXTERNAL MODULE: ./src/utils/getLpFeesAndApr.ts\nvar utils_getLpFeesAndApr = __webpack_require__(78030);\n// EXTERNAL MODULE: ./src/views/Info/hooks/useBlocksFromTimestamps.ts\nvar hooks_useBlocksFromTimestamps = __webpack_require__(15051);\n// EXTERNAL MODULE: ./src/views/Info/utils/infoDataHelpers.ts\nvar infoDataHelpers = __webpack_require__(99066);\n// EXTERNAL MODULE: ./src/state/info/hooks.ts + 12 modules\nvar hooks = __webpack_require__(84434);\n// EXTERNAL MODULE: ./src/state/info/constant.ts\nvar constant = __webpack_require__(79467);\n// EXTERNAL MODULE: ./src/utils/getDeltaTimestamps.ts\nvar utils_getDeltaTimestamps = __webpack_require__(73806);\n;// CONCATENATED MODULE: ./src/state/info/queries/pools/topPools.ts\n\n\n\n\nfunction _templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query topPools($blacklist: [String!]) {\\n        pairDayDatas(\\n          first: 30\\n          \",\n        \"\\n          orderBy: dailyVolumeUSD\\n          orderDirection: desc\\n        ) {\\n          id\\n        }\\n      }\\n    \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n/**\n * Initial pools to display on the home page\n */ var fetchTopPools = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName, timestamp24hAgo) {\n        var isStableSwap, whereCondition, query, data, error;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    isStableSwap = (0,constant/* checkIsStableSwap */.J5)();\n                    whereCondition = chainName === \"BSC\" ? \"where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: \".concat(timestamp24hAgo, \" }\") : \"where: { date_gt: \".concat(timestamp24hAgo, \", token0_not_in: $blacklist, token1_not_in: $blacklist, dailyVolumeUSD_gt: 2000 }\");\n                    if (isStableSwap) whereCondition = \"\";\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    query = (0,dist.gql)(_templateObject(), whereCondition);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query, {\n                            blacklist: constant/* multiChainTokenBlackList */.z2[chainName]\n                        })\n                    ];\n                case 2:\n                    data = _state.sent();\n                    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n                    return [\n                        2,\n                        data.pairDayDatas.map(function(p) {\n                            return p.id.split(\"-\")[0];\n                        })\n                    ];\n                case 3:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch top pools\", error);\n                    return [\n                        2,\n                        []\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchTopPools(chainName, timestamp24hAgo) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Fetch top addresses by volume\n */ var useTopPoolAddresses = function() {\n    var ref = useState([]), topPoolAddresses = ref[0], setTopPoolAddresses = ref[1];\n    var ref1 = _sliced_to_array(getDeltaTimestamps(), 1), timestamp24hAgo = ref1[0];\n    var chainName = useGetChainName();\n    useEffect(function() {\n        var fetch = function() {\n            var _ref = _async_to_generator(function() {\n                var addresses;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            return [\n                                4,\n                                fetchTopPools(chainName, timestamp24hAgo)\n                            ];\n                        case 1:\n                            addresses = _state.sent();\n                            setTopPoolAddresses(addresses);\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetch() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        if (topPoolAddresses.length === 0) {\n            fetch();\n        }\n    }, [\n        topPoolAddresses,\n        timestamp24hAgo,\n        chainName\n    ]);\n    return topPoolAddresses;\n};\nvar fetchTopPoolAddresses = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(chainName) {\n        var ref, timestamp24hAgo, addresses;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getDeltaTimestamps/* getDeltaTimestamps */.z)(), 1), timestamp24hAgo = ref[0];\n                    return [\n                        4,\n                        fetchTopPools(chainName, timestamp24hAgo)\n                    ];\n                case 1:\n                    addresses = _state.sent();\n                    return [\n                        2,\n                        addresses\n                    ];\n            }\n        });\n    });\n    return function fetchTopPoolAddresses(chainName) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var topPools = ((/* unused pure expression or super */ null && (useTopPoolAddresses)));\n\n;// CONCATENATED MODULE: ./src/state/info/queries/pools/poolData.ts\n/* eslint-disable no-param-reassign */ \n\n\n\n\n\nfunction poolData_templateObject() {\n    var data = (0,_tagged_template_literal/* default */.Z)([\n        \"\\n      query pools {\\n        now: \",\n        \"\\n        oneDayAgo: \",\n        \"\\n        twoDaysAgo: \",\n        \"\\n        oneWeekAgo: \",\n        \"\\n        \",\n        \"\\n      }\\n    \"\n    ]);\n    poolData_templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */ var POOL_AT_BLOCK = function(chainName, block, pools) {\n    var blockString = block ? \"block: {number: \".concat(block, \"}\") : \"\";\n    var addressesString = '[\"'.concat(pools.join('\",\"'), '\"]');\n    return \"pairs(\\n    where: { id_in: \".concat(addressesString, \" }\\n    \").concat(blockString, \"\\n    orderBy: trackedReserve\").concat(constant/* multiChainQueryMainToken */.WR[chainName], \"\\n    orderDirection: desc\\n  ) {\\n    id\\n    reserve0\\n    reserve1\\n    reserveUSD\\n    volumeUSD\\n    token0Price\\n    token1Price\\n    token0 {\\n      id\\n      symbol\\n      name\\n    }\\n    token1 {\\n      id\\n      symbol\\n      name\\n    }\\n  }\");\n};\nvar fetchPoolData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(block24h, block48h, block7d, block14d, poolAddresses) {\n        var chainName, weeksQuery, query, data, error;\n        var _arguments = arguments;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    chainName = _arguments.length > 5 && _arguments[5] !== void 0 ? _arguments[5] : \"BSC\";\n                    weeksQuery = chainName === \"BSC\" ? \"twoWeeksAgo: \".concat(POOL_AT_BLOCK(chainName, block14d, poolAddresses)) : \"\";\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    query = (0,dist.gql)(poolData_templateObject(), POOL_AT_BLOCK(chainName, null, poolAddresses), POOL_AT_BLOCK(chainName, block24h, poolAddresses), POOL_AT_BLOCK(chainName, block48h, poolAddresses), POOL_AT_BLOCK(chainName, block7d, poolAddresses), weeksQuery);\n                    return [\n                        4,\n                        (0,constant/* getMultiChainQueryEndPointWithStableSwap */.rf)(chainName).request(query)\n                    ];\n                case 2:\n                    data = _state.sent();\n                    return [\n                        2,\n                        {\n                            data: data,\n                            error: false\n                        }\n                    ];\n                case 3:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch pool data\", error);\n                    return [\n                        2,\n                        {\n                            error: true\n                        }\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function fetchPoolData(block24h, block48h, block7d, block14d, poolAddresses) {\n        return _ref.apply(this, arguments);\n    };\n}();\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nvar parsePoolData = function(pairs) {\n    if (!pairs) {\n        return {};\n    }\n    return pairs.reduce(function(accum, poolData) {\n        var volumeUSD = poolData.volumeUSD, reserveUSD = poolData.reserveUSD, reserve0 = poolData.reserve0, reserve1 = poolData.reserve1, token0Price = poolData.token0Price, token1Price = poolData.token1Price;\n        accum[poolData.id] = (0,_object_spread_props/* default */.Z)((0,_object_spread/* default */.Z)({}, poolData), {\n            volumeUSD: parseFloat(volumeUSD),\n            reserveUSD: parseFloat(reserveUSD),\n            reserve0: parseFloat(reserve0),\n            reserve1: parseFloat(reserve1),\n            token0Price: parseFloat(token0Price),\n            token1Price: parseFloat(token1Price)\n        });\n        return accum;\n    }, {});\n};\n/**\n * Fetch top pools by liquidity\n */ var usePoolDatas = function(poolAddresses) {\n    var ref = useState({\n        error: false\n    }), fetchState = ref[0], setFetchState = ref[1];\n    var ref1 = _sliced_to_array(getDeltaTimestamps(), 4), t24h = ref1[0], t48h = ref1[1], t7d = ref1[2], t14d = ref1[3];\n    var ref2 = useBlocksFromTimestamps([\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ]), blocks = ref2.blocks, blockError = ref2.error;\n    var ref3 = _sliced_to_array(blocks !== null && blocks !== void 0 ? blocks : [], 4), block24h = ref3[0], block48h = ref3[1], block7d = ref3[2], block14d = ref3[3];\n    var chainName = useGetChainName();\n    useEffect(function() {\n        var fetch = function() {\n            var _ref = _async_to_generator(function() {\n                var ref, error, data, formattedPoolData, formattedPoolData24h, formattedPoolData48h, formattedPoolData7d, formattedPoolData14d, formatted;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            return [\n                                4,\n                                fetchPoolData(block24h.number, block48h.number, block7d.number, block14d.number, poolAddresses, chainName)\n                            ];\n                        case 1:\n                            ref = _state.sent(), error = ref.error, data = ref.data;\n                            if (error) {\n                                setFetchState({\n                                    error: true\n                                });\n                            } else {\n                                formattedPoolData = parsePoolData(data === null || data === void 0 ? void 0 : data.now);\n                                formattedPoolData24h = parsePoolData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n                                formattedPoolData48h = parsePoolData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n                                formattedPoolData7d = parsePoolData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n                                formattedPoolData14d = parsePoolData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo);\n                                formatted = poolAddresses.reduce(function(accum, address) {\n                                    // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n                                    var current = formattedPoolData[address];\n                                    var oneDay = formattedPoolData24h[address];\n                                    var twoDays = formattedPoolData48h[address];\n                                    var week = formattedPoolData7d[address];\n                                    var twoWeeks = formattedPoolData14d[address];\n                                    var ref = _sliced_to_array(getChangeForPeriod(current === null || current === void 0 ? void 0 : current.volumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.volumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.volumeUSD), 2), volumeUSD = ref[0], volumeUSDChange = ref[1];\n                                    var ref1 = _sliced_to_array(getChangeForPeriod(current === null || current === void 0 ? void 0 : current.volumeUSD, week === null || week === void 0 ? void 0 : week.volumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.volumeUSD), 2), volumeUSDWeek = ref1[0], volumeUSDChangeWeek = ref1[1];\n                                    var liquidityUSD = current ? current.reserveUSD : 0;\n                                    var liquidityUSDChange = getPercentChange(current === null || current === void 0 ? void 0 : current.reserveUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.reserveUSD);\n                                    var liquidityToken0 = current ? current.reserve0 : 0;\n                                    var liquidityToken1 = current ? current.reserve1 : 0;\n                                    var ref2 = getLpFeesAndApr(volumeUSD, volumeUSDWeek, liquidityUSD), totalFees24h = ref2.totalFees24h, totalFees7d = ref2.totalFees7d, lpFees24h = ref2.lpFees24h, lpFees7d = ref2.lpFees7d, lpApr7d = ref2.lpApr7d;\n                                    if (current) {\n                                        accum[address] = {\n                                            address: address,\n                                            token0: {\n                                                address: current.token0.id,\n                                                name: current.token0.name,\n                                                symbol: current.token0.symbol\n                                            },\n                                            token1: {\n                                                address: current.token1.id,\n                                                name: current.token1.name,\n                                                symbol: current.token1.symbol\n                                            },\n                                            token0Price: current.token0Price,\n                                            token1Price: current.token1Price,\n                                            volumeUSD: volumeUSD,\n                                            volumeUSDChange: volumeUSDChange,\n                                            volumeUSDWeek: volumeUSDWeek,\n                                            volumeUSDChangeWeek: volumeUSDChangeWeek,\n                                            totalFees24h: totalFees24h,\n                                            totalFees7d: totalFees7d,\n                                            lpFees24h: lpFees24h,\n                                            lpFees7d: lpFees7d,\n                                            lpApr7d: lpApr7d,\n                                            liquidityUSD: liquidityUSD,\n                                            liquidityUSDChange: liquidityUSDChange,\n                                            liquidityToken0: liquidityToken0,\n                                            liquidityToken1: liquidityToken1\n                                        };\n                                    }\n                                    return accum;\n                                }, {});\n                                setFetchState({\n                                    data: formatted,\n                                    error: false\n                                });\n                            }\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetch() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        var allBlocksAvailable = (block24h === null || block24h === void 0 ? void 0 : block24h.number) && (block48h === null || block48h === void 0 ? void 0 : block48h.number) && (block7d === null || block7d === void 0 ? void 0 : block7d.number) && (block14d === null || block14d === void 0 ? void 0 : block14d.number);\n        if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n            fetch();\n        }\n    }, [\n        poolAddresses,\n        block24h,\n        block48h,\n        block7d,\n        block14d,\n        blockError,\n        chainName\n    ]);\n    return fetchState;\n};\nvar fetchAllPoolDataWithAddress = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(blocks, chainName, poolAddresses) {\n        var ref, block24h, block48h, block7d, block14d, data, formattedPoolData, formattedPoolData24h, formattedPoolData48h, formattedPoolData7d, formattedPoolData14d, formatted;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    ref = (0,src_sliced_to_array/* default */.Z)(blocks !== null && blocks !== void 0 ? blocks : [], 4), block24h = ref[0], block48h = ref[1], block7d = ref[2], block14d = ref[3];\n                    return [\n                        4,\n                        fetchPoolData(block24h.number, block48h.number, block7d.number, block14d.number, poolAddresses, chainName)\n                    ];\n                case 1:\n                    data = _state.sent().data;\n                    formattedPoolData = parsePoolData(data === null || data === void 0 ? void 0 : data.now);\n                    formattedPoolData24h = parsePoolData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n                    formattedPoolData48h = parsePoolData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n                    formattedPoolData7d = parsePoolData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n                    formattedPoolData14d = parsePoolData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo);\n                    formatted = poolAddresses.reduce(function(accum, address) {\n                        // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n                        var current = formattedPoolData[address];\n                        var oneDay = formattedPoolData24h[address];\n                        var twoDays = formattedPoolData48h[address];\n                        var week = formattedPoolData7d[address];\n                        var twoWeeks = formattedPoolData14d[address];\n                        var ref = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(current === null || current === void 0 ? void 0 : current.volumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.volumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.volumeUSD), 2), volumeUSD = ref[0], volumeUSDChange = ref[1];\n                        var ref1 = (0,src_sliced_to_array/* default */.Z)((0,utils_getChangeForPeriod/* getChangeForPeriod */.T)(current === null || current === void 0 ? void 0 : current.volumeUSD, week === null || week === void 0 ? void 0 : week.volumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.volumeUSD), 2), volumeUSDWeek = ref1[0], volumeUSDChangeWeek = ref1[1];\n                        var liquidityUSD = current ? current.reserveUSD : 0;\n                        var liquidityUSDChange = (0,infoDataHelpers/* getPercentChange */.Y)(current === null || current === void 0 ? void 0 : current.reserveUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.reserveUSD);\n                        var liquidityToken0 = current ? current.reserve0 : 0;\n                        var liquidityToken1 = current ? current.reserve1 : 0;\n                        var ref2 = (0,utils_getLpFeesAndApr/* getLpFeesAndApr */.z)(volumeUSD, volumeUSDWeek, liquidityUSD), totalFees24h = ref2.totalFees24h, totalFees7d = ref2.totalFees7d, lpFees24h = ref2.lpFees24h, lpFees7d = ref2.lpFees7d, lpApr7d = ref2.lpApr7d;\n                        if (current) {\n                            accum[address] = {\n                                data: {\n                                    address: address,\n                                    token0: {\n                                        address: current.token0.id,\n                                        name: current.token0.name,\n                                        symbol: current.token0.symbol\n                                    },\n                                    token1: {\n                                        address: current.token1.id,\n                                        name: current.token1.name,\n                                        symbol: current.token1.symbol\n                                    },\n                                    token0Price: current.token0Price,\n                                    token1Price: current.token1Price,\n                                    volumeUSD: volumeUSD,\n                                    volumeUSDChange: volumeUSDChange,\n                                    volumeUSDWeek: volumeUSDWeek,\n                                    volumeUSDChangeWeek: volumeUSDChangeWeek,\n                                    totalFees24h: totalFees24h,\n                                    totalFees7d: totalFees7d,\n                                    lpFees24h: lpFees24h,\n                                    lpFees7d: lpFees7d,\n                                    lpApr7d: lpApr7d,\n                                    liquidityUSD: liquidityUSD,\n                                    liquidityUSDChange: liquidityUSDChange,\n                                    liquidityToken0: liquidityToken0,\n                                    liquidityToken1: liquidityToken1\n                                }\n                            };\n                        }\n                        return accum;\n                    }, {});\n                    return [\n                        2,\n                        formatted\n                    ];\n            }\n        });\n    });\n    return function fetchAllPoolDataWithAddress(blocks, chainName, poolAddresses) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar fetchAllPoolData = function() {\n    var _ref = (0,src_async_to_generator/* default */.Z)(function(blocks, chainName) {\n        var poolAddresses;\n        return (0,tslib_es6.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        fetchTopPoolAddresses(chainName)\n                    ];\n                case 1:\n                    poolAddresses = _state.sent();\n                    return [\n                        2,\n                        fetchAllPoolDataWithAddress(blocks, chainName, poolAddresses)\n                    ];\n            }\n        });\n    });\n    return function fetchAllPoolData(blocks, chainName) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/* harmony default export */ var poolData = ((/* unused pure expression or super */ null && (usePoolDatas)));\n\n\n/***/ }),\n\n/***/ 29209:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"i\": function() { return /* binding */ TransactionType; }\n/* harmony export */ });\nvar TransactionType;\n(function(TransactionType) {\n    TransactionType[TransactionType[\"SWAP\"] = 0] = \"SWAP\";\n    TransactionType[TransactionType[\"MINT\"] = 1] = \"MINT\";\n    TransactionType[TransactionType[\"BURN\"] = 2] = \"BURN\";\n})(TransactionType || (TransactionType = {}));\n\n\n/***/ }),\n\n/***/ 84785:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"d\": function() { return /* binding */ formatAmount; }\n/* harmony export */ });\n/* unused harmony export getFirstThreeNonZeroDecimals */\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1246);\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(numeral__WEBPACK_IMPORTED_MODULE_0__);\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nvar getFirstThreeNonZeroDecimals = function(value) {\n    return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0];\n};\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */ var formatAmount = function(amount, options) {\n    var ref = options || {\n        notation: amount >= 10000 ? \"compact\" : \"standard\"\n    }, _notation = ref.notation, notation = _notation === void 0 ? amount >= 10000 ? \"compact\" : \"standard\" : _notation, displayThreshold = ref.displayThreshold, tokenPrecision = ref.tokenPrecision, isInteger = ref.isInteger;\n    if (amount === 0) {\n        if (isInteger) {\n            return \"0\";\n        }\n        return \"0.00\";\n    }\n    if (!amount) return \"-\";\n    if (displayThreshold && amount < displayThreshold) {\n        return \"<\".concat(displayThreshold);\n    }\n    if (amount < 1 && !tokenPrecision) {\n        return getFirstThreeNonZeroDecimals(amount);\n    }\n    var precision = 2;\n    if (tokenPrecision) {\n        precision = amount < 1 ? 3 : 2;\n    }\n    var format = \"0.\".concat(\"0\".repeat(precision), \"a\");\n    if (notation === \"standard\") {\n        format = \"0,0.\".concat(\"0\".repeat(precision));\n    }\n    if (isInteger && amount < 1000) {\n        format = \"0\";\n    }\n    var amountWithPrecision = parseFloat(amount.toFixed(precision));\n    // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n    return numeral__WEBPACK_IMPORTED_MODULE_0___default()(amountWithPrecision).format(format).toUpperCase();\n};\n\n\n/***/ }),\n\n/***/ 33992:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"z\": function() { return /* binding */ getBlocksFromTimestamps; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(98788);\n/* harmony import */ var _swc_helpers_src_tagged_template_literal_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92228);\n/* harmony import */ var _swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5163);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6647);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_orderBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34498);\n/* harmony import */ var lodash_orderBy__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_orderBy__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var state_info_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79467);\n/* harmony import */ var _views_Info_utils_infoQueryHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56615);\n\n\n\nfunction _templateObject() {\n    var data = (0,_swc_helpers_src_tagged_template_literal_mjs__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)([\n        \"query blocks {\\n    \",\n        \"\\n  }\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\nvar getBlockSubqueries = function(timestamps) {\n    return timestamps.map(function(timestamp) {\n        return \"t\".concat(timestamp, \":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp, \", timestamp_lt: \").concat(timestamp + 600, \" }) {\\n      number\\n    }\");\n    });\n};\nvar blocksQueryConstructor = function(subqueries) {\n    return (0,graphql_request__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject(), subqueries);\n};\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @param {Array} timestamps\n */ var getBlocksFromTimestamps = function() {\n    var _ref = (0,_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)(function(timestamps) {\n        var sortDirection, skipCount, chainName, fetchedData, blocks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key;\n        var _arguments = arguments;\n        return (0,_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    sortDirection = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : \"desc\", skipCount = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : 500, chainName = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : \"BSC\";\n                    if ((timestamps === null || timestamps === void 0 ? void 0 : timestamps.length) === 0) {\n                        return [\n                            2,\n                            []\n                        ];\n                    }\n                    return [\n                        4,\n                        (0,_views_Info_utils_infoQueryHelpers__WEBPACK_IMPORTED_MODULE_4__/* .multiQuery */ .L)(blocksQueryConstructor, getBlockSubqueries(timestamps), state_info_constant__WEBPACK_IMPORTED_MODULE_3__/* .multiChainBlocksClient */ .OO[chainName], skipCount)\n                    ];\n                case 1:\n                    fetchedData = _state.sent();\n                    blocks = [];\n                    if (fetchedData) {\n                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            // eslint-disable-next-line no-restricted-syntax\n                            for(_iterator = Object.keys(fetchedData)[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                key = _step.value;\n                                if (fetchedData[key].length > 0) {\n                                    blocks.push({\n                                        timestamp: key.split(\"t\")[1],\n                                        number: parseInt(fetchedData[key][0].number, 10)\n                                    });\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                        // graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\n                        return [\n                            2,\n                            lodash_orderBy__WEBPACK_IMPORTED_MODULE_2___default()(blocks, function(block) {\n                                return block.number;\n                            }, sortDirection)\n                        ];\n                    }\n                    return [\n                        2,\n                        blocks\n                    ];\n            }\n        });\n    });\n    return function getBlocksFromTimestamps(timestamps) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\n/***/ }),\n\n/***/ 41485:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"T\": function() { return /* binding */ getChangeForPeriod; }\n/* harmony export */ });\n/* harmony import */ var _views_Info_utils_infoDataHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99066);\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */ var getChangeForPeriod = function(valueNow, valueOnePeriodAgo, valueTwoPeriodsAgo) {\n    var currentPeriodAmount = (0,_views_Info_utils_infoDataHelpers__WEBPACK_IMPORTED_MODULE_0__/* .getAmountChange */ .D)(valueNow, valueOnePeriodAgo);\n    var previousPeriodAmount = (0,_views_Info_utils_infoDataHelpers__WEBPACK_IMPORTED_MODULE_0__/* .getAmountChange */ .D)(valueOnePeriodAgo, valueTwoPeriodsAgo);\n    var percentageChange = (0,_views_Info_utils_infoDataHelpers__WEBPACK_IMPORTED_MODULE_0__/* .getPercentChange */ .Y)(currentPeriodAmount, previousPeriodAmount);\n    return [\n        currentPeriodAmount,\n        percentageChange\n    ];\n};\n\n\n/***/ }),\n\n/***/ 73806:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"z\": function() { return /* binding */ getDeltaTimestamps; }\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28401);\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18717);\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7069);\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85899);\n\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */ var getDeltaTimestamps = function() {\n    var utcCurrentTime = (0,date_fns__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(new Date()) * 1000;\n    var t24h = (0,date_fns__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(utcCurrentTime, 1)));\n    var t48h = (0,date_fns__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(utcCurrentTime, 2)));\n    var t7d = (0,date_fns__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(utcCurrentTime, 1)));\n    var t14d = (0,date_fns__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((0,date_fns__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z)(utcCurrentTime, 2)));\n    return [\n        t24h,\n        t48h,\n        t7d,\n        t14d\n    ];\n};\n\n\n/***/ }),\n\n/***/ 78030:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"z\": function() { return /* binding */ getLpFeesAndApr; }\n/* harmony export */ });\n/* harmony import */ var _config_constants_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43437);\n\nvar getLpFeesAndApr = function(volumeUSD, volumeUSDWeek, liquidityUSD) {\n    var totalFees24h = volumeUSD * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .TOTAL_FEE */ .om;\n    var totalFees7d = volumeUSDWeek * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .TOTAL_FEE */ .om;\n    var lpFees24h = volumeUSD * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .LP_HOLDERS_FEE */ .BY;\n    var lpFees7d = volumeUSDWeek * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .LP_HOLDERS_FEE */ .BY;\n    var lpApr7d = liquidityUSD > 0 ? volumeUSDWeek * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .LP_HOLDERS_FEE */ .BY * _config_constants_info__WEBPACK_IMPORTED_MODULE_0__/* .WEEKS_IN_YEAR */ .MV * 100 / liquidityUSD : 0;\n    return {\n        totalFees24h: totalFees24h,\n        totalFees7d: totalFees7d,\n        lpFees24h: lpFees24h,\n        lpFees7d: lpFees7d,\n        lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0\n    };\n};\n\n\n/***/ }),\n\n/***/ 3063:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony import */ var _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47842);\n/* harmony import */ var _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90902);\n\n\nvar _obj;\nvar mapping = (_obj = {}, (0,_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(_obj, _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__/* .ChainId.BSC */ .a_.BSC, \"smartchain\"), (0,_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(_obj, _pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__/* .ChainId.ETHEREUM */ .a_.ETHEREUM, \"ethereum\"), _obj);\nvar getTokenLogoURL = function(token) {\n    if (token && mapping[token.chainId]) {\n        return \"https://assets-cdn.trustwallet.com/blockchains/\".concat(mapping[token.chainId], \"/assets/\").concat(token.address, \"/logo.png\");\n    }\n    return null;\n};\n/* harmony default export */ __webpack_exports__[\"Z\"] = (getTokenLogoURL);\n\n\n/***/ }),\n\n/***/ 25997:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GJ\": function() { return /* binding */ infoClientETH; },\n/* harmony export */   \"MS\": function() { return /* binding */ infoStableSwapClient; },\n/* harmony export */   \"dQ\": function() { return /* binding */ infoClient; },\n/* harmony export */   \"vA\": function() { return /* binding */ getGQLHeaders; }\n/* harmony export */ });\n/* unused harmony exports infoClientWithChain, infoServerClient, stableSwapClient, bitQueryServerClient */\n/* harmony import */ var config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10494);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6647);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var process = __webpack_require__(34406);\n\n\n\n// Extra headers\n// Mostly for dev environment\n// No production env check since production preview might also need them\nvar getGQLHeaders = function(endpoint) {\n    if (endpoint === config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .INFO_CLIENT */ .JY) {\n        return {\n            \"X-Sf\": process.env.NEXT_PUBLIC_SF_HEADER || // hack for inject CI secret on window\n             true && // @ts-ignore\n            window.sfHeader\n        };\n    }\n    return undefined;\n};\nvar infoClient = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .INFO_CLIENT */ .JY, {\n    headers: getGQLHeaders(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .INFO_CLIENT */ .JY)\n});\nvar infoClientWithChain = function(chainId) {\n    return new GraphQLClient(INFO_CLIENT_WITH_CHAIN[chainId], {\n        headers: getGQLHeaders(INFO_CLIENT_WITH_CHAIN[chainId])\n    });\n};\nvar infoClientETH = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .INFO_CLIENT_ETH */ .EC);\nvar infoStableSwapClient = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .STABLESWAP_SUBGRAPH_CLIENT */ .gr);\nvar infoServerClient = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .INFO_CLIENT */ .JY, {\n    headers: {\n        \"X-Sf\": process.env.SF_HEADER\n    },\n    timeout: 5000\n});\nvar stableSwapClient = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .STABLESWAP_SUBGRAPH_CLIENT */ .gr, {\n    headers: getGQLHeaders(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .STABLESWAP_SUBGRAPH_CLIENT */ .gr)\n});\nvar bitQueryServerClient = new graphql_request__WEBPACK_IMPORTED_MODULE_1__.GraphQLClient(config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__/* .BIT_QUERY */ .d$, {\n    headers: {\n        // only server, no `NEXT_PUBLIC` not going to expose in client\n        \"X-API-KEY\": process.env.BIT_QUERY_HEADER\n    },\n    timeout: 5000\n});\n\n\n/***/ }),\n\n/***/ 10549:\n/***/ (function(__unused_webpack_module, __webpack_exports__) {\n\nvar requestWithTimeout = function(graphQLClient, request, variables) {\n    var timeout = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30000;\n    return Promise.race([\n        variables ? graphQLClient.request(request, variables) : graphQLClient.request(request),\n        new Promise(function(_, reject) {\n            setTimeout(function() {\n                reject(new Error(\"Request timed out after \".concat(timeout, \" milliseconds\")));\n            }, timeout);\n        }), \n    ]);\n};\n/* harmony default export */ __webpack_exports__[\"Z\"] = (requestWithTimeout);\n\n\n/***/ }),\n\n/***/ 15051:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"T\": function() { return /* binding */ useBlockFromTimeStampSWR; }\n/* harmony export */ });\n/* unused harmony export useBlocksFromTimestamps */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2784);\n/* harmony import */ var state_info_hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84434);\n/* harmony import */ var swr_immutable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2303);\n/* harmony import */ var utils_getBlocksFromTimestamps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33992);\n\n\n\n\n\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n * @param sortDirection\n * @param skipCount\n */ var useBlocksFromTimestamps = function(timestamps) {\n    var sortDirection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"desc\", skipCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;\n    var ref = useState(), blocks = ref[0], setBlocks = ref[1];\n    var ref1 = useState(false), error = ref1[0], setError = ref1[1];\n    var timestampsString = JSON.stringify(timestamps);\n    var blocksString = blocks ? JSON.stringify(blocks) : undefined;\n    var chainName = useGetChainName();\n    useEffect(function() {\n        var fetchData = function() {\n            var _ref = _async_to_generator(function() {\n                var timestampsArray, result;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            timestampsArray = JSON.parse(timestampsString);\n                            return [\n                                4,\n                                getBlocksFromTimestamps(timestampsArray, sortDirection, skipCount, chainName)\n                            ];\n                        case 1:\n                            result = _state.sent();\n                            if (result.length === 0) {\n                                setError(true);\n                            } else {\n                                setBlocks(result);\n                            }\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n            return function fetchData() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        var blocksArray = blocksString ? JSON.parse(blocksString) : undefined;\n        if (!blocksArray && !error && chainName) {\n            fetchData();\n        }\n    }, [\n        blocksString,\n        error,\n        skipCount,\n        sortDirection,\n        timestampsString,\n        chainName\n    ]);\n    return {\n        blocks: blocks,\n        error: error\n    };\n};\nvar useBlockFromTimeStampSWR = function(timestamps) {\n    var sortDirection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"desc\", skipCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;\n    var chainName = (0,state_info_hooks__WEBPACK_IMPORTED_MODULE_1__/* .useGetChainName */ .qg)();\n    var timestampsString = JSON.stringify(timestamps);\n    var timestampsArray = JSON.parse(timestampsString);\n    var data = (0,swr_immutable__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)([\n        \"info/blocks/\".concat(timestampsString),\n        chainName\n    ], function() {\n        return (0,utils_getBlocksFromTimestamps__WEBPACK_IMPORTED_MODULE_3__/* .getBlocksFromTimestamps */ .z)(timestampsArray, sortDirection, skipCount, chainName);\n    }).data;\n    return {\n        blocks: data\n    };\n};\n\n\n/***/ }),\n\n/***/ 99066:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"D\": function() { return /* binding */ getAmountChange; },\n/* harmony export */   \"Y\": function() { return /* binding */ getPercentChange; }\n/* harmony export */ });\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */ var getAmountChange = function(valueNow, valueBefore) {\n    if (valueNow && valueBefore) {\n        return valueNow - valueBefore;\n    }\n    if (valueNow) {\n        return valueNow;\n    }\n    return 0;\n};\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */ var getPercentChange = function(valueNow, valueBefore) {\n    if (valueNow && valueBefore) {\n        return (valueNow - valueBefore) / valueBefore * 100;\n    }\n    return 0;\n};\n\n\n/***/ }),\n\n/***/ 56615:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"L\": function() { return /* binding */ multiQuery; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98788);\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(70865);\n/* harmony import */ var _swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5163);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6647);\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var utils_graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(25997);\n/* harmony import */ var utils_requestWithTimeout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10549);\n\n\n\n\n\n\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */ var multiQuery = function() {\n    var _ref = (0,_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(function(queryConstructor, subqueries, endpoint) {\n        var skipCount, fetchedData, allFound, skip, client, end, subqueriesSlice, result, error;\n        var _arguments = arguments;\n        return (0,_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    skipCount = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : 1000;\n                    fetchedData = {};\n                    allFound = false;\n                    skip = 0;\n                    client = new graphql_request__WEBPACK_IMPORTED_MODULE_0__.GraphQLClient(endpoint, {\n                        headers: (0,utils_graphql__WEBPACK_IMPORTED_MODULE_1__/* .getGQLHeaders */ .vA)(endpoint)\n                    });\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        4,\n                        ,\n                        5\n                    ]);\n                    if (!!allFound) return [\n                        3,\n                        3\n                    ];\n                    end = subqueries.length;\n                    if (skip + skipCount < subqueries.length) {\n                        end = skip + skipCount;\n                    }\n                    subqueriesSlice = subqueries.slice(skip, end);\n                    return [\n                        4,\n                        (0,utils_requestWithTimeout__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(client, queryConstructor(subqueriesSlice))\n                    ];\n                case 2:\n                    result = _state.sent();\n                    fetchedData = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z)({}, fetchedData, result);\n                    allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length;\n                    skip += skipCount;\n                    return [\n                        3,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2,\n                        fetchedData\n                    ];\n                case 4:\n                    error = _state.sent();\n                    console.error(\"Failed to fetch info data\", error);\n                    return [\n                        2,\n                        null\n                    ];\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function multiQuery(queryConstructor, subqueries, endpoint) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","LP_HOLDERS_FEE","ONE_DAY_UNIX","PCS_ETH_START","WEEKS_IN_YEAR","MINIMUM_SEARCH_CHARACTERS","PCS_V2_START","ONE_HOUR_SECONDS","ETH_TOKEN_BLACKLIST","TREASURY_FEE","TOTAL_FEE","ITEMS_PER_INFO_TABLE_PAGE","TOKEN_BLACKLIST","BUYBACK_FEE","multiChainPaths","multiChainQueryEndPoint","checkIsStableSwap","multiChainBlocksClient","multiChainId","multiChainQueryMainToken","multiChainStartTime","multiChainScan","getMultiChainQueryEndPointWithStableSwap","multiChainTokenBlackList","_obj","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_4__","utils_graphql__WEBPACK_IMPORTED_MODULE_0__","config_constants_endpoints__WEBPACK_IMPORTED_MODULE_1__","_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_2__","config_constants_info__WEBPACK_IMPORTED_MODULE_3__","BSC","ETH","I0","Hs","Rr","DY","a_","ETHEREUM","Z","multiChainQueryClient","dQ","GJ","JY","EC","tE","Vd","chainName","MS","window","location","href","includes","useAllPoolDataSWR","useAllTokenDataSWR","hooks_useGetChainName","useMultiChainPath","usePoolChartDataSWR","usePoolDatasSWR","usePoolTransactionsSWR","usePoolsForTokenSWR","useProtocolChartDataSWR","useProtocolDataSWR","useProtocolTransactionsSWR","useStableSwapPath","useTokenChartDataSWR","useTokenDataSWR","useTokenDatasSWR","useTokenPriceDataSWR","useTokenTransactionsSWR","_ref","src_sliced_to_array","getUnixTime","startOfHour","sub","next_router","react","src_async_to_generator","_tagged_template_literal","tslib_es6","dist","fromPairs","fromPairs_default","n","info","types","constant","mapMints","mint","type","i","MINT","hash","id","split","timestamp","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","parseFloat","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","volumeUSD","dailyVolumeUSD","liquidityUSD","totalLiquidityUSD","mapPairDayData","pairDayData","reserveUSD","helpers_fetchChartData","getEntityDayDatas","chartEntries","error","skip","allFound","ref","data","fetchError","formattedDayDatas","availableDays","firstAvailableDayData","ref1","ref2","latestLiquidityUSD","endTimestamp","__generator","_state","label","sent","length","concat","map","dayData","parseInt","Bq","toFixed","console","warn","keys","dayOrdinal","YM","Date","Object","toString","values","apply","arguments","fetchChartDataWithAddress","address","_templateObject","getPoolChartData","query","pairDayDatas","trys","gql","rf","request","startTime","fetchPoolChartData","poolData","_to_consumable_array","transactions_templateObject","POOL_TRANSACTIONS","fetchPoolTransactions","mints","burns","swaps","chart_templateObject","PANCAKE_DAY_DATAS","getOverviewChartData","pancakeDayDatas","fetchGlobalChartData","utils_getChangeForPeriod","hooks_useBlocksFromTimestamps","infoDataHelpers","overview_templateObject","getOverviewData","block","factoryString","J5","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","totalVolumeUSD","fetchProtocolData","block24","block48","ref3","ref4","ref5","ref6","data24","ref7","data48","overviewData","overviewData24","overviewData48","ref8","volumeUSDChange","liquidityUSDChange","ref9","txCount","txCountChange","protocolData","Promise","all","number","undefined","factories","pancakeFactories","T","Y","protocol_transactions_templateObject","GLOBAL_TRANSACTIONS","fetchTopTransactions","sort","a","b","chartData_templateObject","getTokenChartData","tokenDayDatas","fetchTokenChartData","poolsForToken_templateObject","POOLS_FOR_TOKEN","transactionGT","WR","fetchPoolsForToken","blacklist","addresses","asToken0","asToken1","p","getBlocksFromTimestamps","infoQueryHelpers","orderBy","orderBy_default","priceData_templateObject","priceQueryConstructor","subqueries","fetchTokenPriceData","interval","startTimestamp","timestamps","time","blocks","prices","tokenPrices","mainToken","sortedTokenPrices","formattedHistory","z","tokenAddress","L","toLowerCase","Ho","forEach","priceKey","derivedBNB","priceUSD","tokenPriceIndex","findIndex","tokenPrice","open","close","high","low","_object_spread","_object_spread_props","utils_getDeltaTimestamps","topTokens_templateObject","fetchTopTokens","timestamp24hAgo","whereCondition","firstCount","z2","t","fetchTokenAddresses","tokenData_templateObject","TOKEN_AT_BLOCK","tokens","addressesString","join","blockString","fetchTokenData","block24h","block48h","block7d","block14d","tokenAddresses","weeksQuery","parseTokenData","reduce","accum","tokenData","derivedUSD","tradeVolumeUSD","totalLiquidity","derivedETH","fetchAllTokenDataByAddresses","parsed","parsed24","parsed48","parsed7d","parsed14d","formatted","now","oneDayAgo","twoDaysAgo","oneWeekAgo","twoWeeksAgo","current","oneDay","twoDays","week","twoWeeks","volumeUSDWeek","liquidityUSDOneDayAgo","liquidityToken","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","D","exists","name","fetchAllTokenData","tokens_transactions_templateObject","TOKEN_TRANSACTIONS","isStableSwap","whereToken0","whereToken1","fetchTokenTransactions","mints0","mints1","burns0","burns1","swaps0","swaps1","mintsAs0","mintsAs1","burnsAs0","burnsAs1","swapsAs0","swapsAs1","immutable_dist","SWR_SETTINGS","refreshInterval","t24","t48","chartData","transactions","protocol_transactions","t24h","t48h","t7d","t14d","d7","poolAddresses","HA","filter","pool","tokensWithData","useMemo","allTokenData","find","poolsForToken","tokens_chartData","timeWindow","utcCurrentTime","priceData","tokens_transactions","path","getChain","useCallback","useState","setName","result","useEffect","router","useRouter","fetchAllPoolData","fetchAllPoolDataWithAddress","fetchPoolData","utils_getLpFeesAndApr","fetchTopPools","fetchTopPoolAddresses","poolData_templateObject","POOL_AT_BLOCK","pools","_arguments","parsePoolData","pairs","reserve0","reserve1","token0Price","token1Price","formattedPoolData","formattedPoolData24h","formattedPoolData48h","formattedPoolData7d","formattedPoolData14d","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","totalFees24h","totalFees7d","lpFees24h","lpFees7d","lpApr7d","TransactionType","formatAmount","numeral__WEBPACK_IMPORTED_MODULE_0__","numeral__WEBPACK_IMPORTED_MODULE_0___default","amount","options","value","notation","_notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","toUpperCase","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_5__","_swc_helpers_src_tagged_template_literal_mjs__WEBPACK_IMPORTED_MODULE_0__","_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_6__","graphql_request__WEBPACK_IMPORTED_MODULE_1__","lodash_orderBy__WEBPACK_IMPORTED_MODULE_2__","lodash_orderBy__WEBPACK_IMPORTED_MODULE_2___default","state_info_constant__WEBPACK_IMPORTED_MODULE_3__","_views_Info_utils_infoQueryHelpers__WEBPACK_IMPORTED_MODULE_4__","blocksQueryConstructor","sortDirection","skipCount","fetchedData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","key","OO","Symbol","iterator","next","done","err","return","getChangeForPeriod","_views_Info_utils_infoDataHelpers__WEBPACK_IMPORTED_MODULE_0__","valueNow","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","percentageChange","getDeltaTimestamps","date_fns__WEBPACK_IMPORTED_MODULE_0__","date_fns__WEBPACK_IMPORTED_MODULE_1__","date_fns__WEBPACK_IMPORTED_MODULE_2__","date_fns__WEBPACK_IMPORTED_MODULE_3__","getLpFeesAndApr","_config_constants_info__WEBPACK_IMPORTED_MODULE_0__","om","BY","MV","Infinity","_swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_1__","_pancakeswap_sdk__WEBPACK_IMPORTED_MODULE_0__","mapping","getTokenLogoURL","token","chainId","infoClientETH","infoStableSwapClient","infoClient","getGQLHeaders","config_constants_endpoints__WEBPACK_IMPORTED_MODULE_0__","process","endpoint","env","NEXT_PUBLIC_SF_HEADER","sfHeader","GraphQLClient","headers","gr","SF_HEADER","timeout","d$","BIT_QUERY_HEADER","requestWithTimeout","graphQLClient","variables","race","_","reject","setTimeout","useBlockFromTimeStampSWR","state_info_hooks__WEBPACK_IMPORTED_MODULE_1__","swr_immutable__WEBPACK_IMPORTED_MODULE_2__","utils_getBlocksFromTimestamps__WEBPACK_IMPORTED_MODULE_3__","qg","timestampsString","JSON","stringify","timestampsArray","parse","getAmountChange","getPercentChange","valueBefore","multiQuery","_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_2__","_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_5__","_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_3__","graphql_request__WEBPACK_IMPORTED_MODULE_0__","utils_graphql__WEBPACK_IMPORTED_MODULE_1__","utils_requestWithTimeout__WEBPACK_IMPORTED_MODULE_4__","queryConstructor","client","end","subqueriesSlice","vA","slice"],"sourceRoot":""}